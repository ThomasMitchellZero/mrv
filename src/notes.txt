Big list of things I need to do:

    -Validate entered item number in Item Entry panel

    -Fix the CSS for the Scanned Item List
        -position chart on the screen
        -relative sizes of the columns
        -Make the Scanned Item List scrollable

    



//////////////

24 Sep 2022

    -Explore what I need to do to use heredity in CSS.  Max 1 hour, option to continue if I feel like I am close to the answer.
        -I am not close to an answer.

    -Organize the tables so that inputs <th> and <tr> use a similar structure

    -Make the tables use a flex-basis so I can alter the sizes.

    -Table should be universal.  Lots of other parts of the app use a table, and I want them all to be configurations of this.

        -Some <td> will be components.
        -Some <td> will have multiple elements
        -Need to be able to take unknown number of <td> in each <tr>
        -Incorporate flex-basis into <th>


14 Oct 2022

-Add button to button container, figure out how to control positioning.

-see if React elements can be controlled like HTML elements via CSS.  If not, make alternate plan.
    -It seems they cannot.

-Next test - see if I can add a non-modular CSS class in case I need to control that way?  
    -Also cannot.  I think if I need to, I can pass styles via props.  No idea if this is best or not.  

-Where am I stuck and spinning my wheels?

    - I need the footer container to be able to accept an arbitrary collection of contents.  Could be buttons, could be price summary, could be nothing at all.
    
    With that in mind, I really need to be able to style the Footer contents as well.  I can't know in advance where to align the buttons, how many, etc.  

    - I WANT (but do not need) each base panel to have everything needed: header, contents, and footer.  

    -Conflict:  the <BasePanel> component accepts one set of children, which will fill the content area.  

    -So one way to do it would be to define the footer contents in the section configuration component, and then pass that down via a prop.  AFAICT I can also do any styling in that parent as well.  

    -The other option would be to just make each panel separately.  I guess this is technically violating DRY, but the parts I'm 'repeating' are some pretty simple CSS that I don't think I'm going to mess up.  I think this is the move.  I am also very proud of myself for systematically figuring this out, and I have earned a smoke tonight.  And still 2:30(+?) to go!



-I need to implement the react-router-dom in my file

-I need to convert my nav bar into the HTML <nav> component

-OK, stuck again!  Let's do this!

    Objective - I want the tabs in <GlobalNav> to be able to handle URL requests because I will eventually need this.

    Problem - When I changed the tabs to the <NavLink> compnent from React-Router, the styling got all weird.

    Options:
        -I could fiddle with the CSS in the existing file to see if I can make what I have work.

        -AFAICT the <NavLink> does everything I need OOtB.  I could try to do my mapping to <NavLinks> in the NavBar and do the styling in the NavBar CSS.  

            -Does <Navlink> accept an ID? - YES
            -Does it allow other styling or is it just text?  - I think so?

16 Oct 2022

    -Got the V6.x update working with surprisingly little trouble.  

    -Next is the nav bar. 
        -I need to convert the buttons to <NavLink> components
        -I need to style the NavLink components just like their previous custom peers.
        -I think I can get rid of the custom state tracking.  AFAICT the stock <NavLink> component handles that, and in any case each page will have a different URL.

    -Then I can finally get started on some page building?

    -The Scan Items sidesheet elements are going to need routes as well.

18 Oct 2022

    -The Nav Menu buttons need the ability to have an icon specified on creation.  Options:  

21 Oct 2022

    -Routes:

        -I need to figure out how to do sub-routes - like 
        "localhost:3000/base/branch"
            -I think if I just place the sub-route in the main route, it will work.

        
        -I need to figure out how to do routes that are part of a page: like if I want 70-panel to stay the same but 30-panel to change based on route.

    OK.  I notice I am confused.

    I now have the No Sale button linked to the /nosale route in my code.  When I click the No Sale button, the URL changes to 
    localhost:3000/returns/nosale   which is what I expect.

    However, I set that route to include a page element, that page element does not appear the URL changes.  
        -First.  Do I have any examples of parent routes also rendering elements?  

    -Gonna stop for tonight.  I think that this section haswsxs the answer:  https://www.robinwieruch.de/react-router-nested-routes/


22 Oct 2022
    OK!  Long list of things to work on today!  Wish I were as clear and excited now as I was when I was trying to sleep at 6:00 a.m.  :/

    -First, going to try an experiment of starting with something I know I can crush to get into the groove.  
        -Experiment seems to have gone very well.  I am 100% dialed in and excited to work.

    ROUTING

        -Need to understand <Outlet> and how to use it.
            -May need to re-factor the app to use Outlet with the Nav bar.
        
        -Can I get the whole page to change via a child URL?
            -AFAICT, the answer is no.  I think that you only use a child route if you want to change part of the parent?

        -How do I make part but not all of a page change via URL?

    CONTEXT

        -Do I want the scanned list to be a separate context?  If so, how to reference more than one context?

        -I need to figure out a way to add items to the cart.  This will probably be a form.

    1:30 evaluation:  

        -I THINK I have the answer to my immediate routing questions.  I think what I should do is test to make sure I've got it with the <Outlet> component.  If it is working as expected:
            -Do I diagram one of the Router components?  It would be good to solidify the knowledge, but I haven't gotten a lot of pixels on the screen and that's what I really need to do.

        -I think I should plan to restructure the app based on what I've learned.  
            -I think all flows should have a parent URL - Returns, Exchanges, etc.
            -Some of my components, especially the ones with 30-70 panels, are going to need some Outlet organization.
            -Returns will need to be a parent URL.  

        -For <Outlet> My understanding:  Each parent can have a single outlet.  I can have any number of potential children to fill that outlet, but I can't say "put these children here and those children there" based on URL.  

        -After test and restructure, what to work on next?  Got to keep in mind that I am probably showing this to Kristin on Monday.
            -Scanned Item list?
                -Pros:  
                    -at some point, even in Exchanges, I'm going to have to have entered items.
                    -That is a really cool feature and I don't think it can be matched in Axure.
                -Cons:  
                    -It's not directly related to Returns and it might look like this process is too slow. 

    OK, now 3:30.  At the moment, I do not feel like fiddlefucking around with routing any more.  I want to get some stuff on the screen, and I've got my eye on item entry.  I need:

        -A form that accepts item number
            -looks for a match in product context
            -If found, adds to basket
            -If not found, gives an error.

        -A context scoped to Returns that records all successful item entries... or could it be a state?

        -A table that shows all items in the transaction
            -A component for the the individual LIs.
        
        -the 70 panel should conditionally render either the Scan CTA or the table, depending on if there are any items scanned.

        -First, I think I need a Returns component to track the state.  The contents will change a lot based on what phase of the process the user is in, and I also need to keep track of the state.

    Wrapping it up for the day.  I didn't want to spend the whole afternoon on routing, but... I did, and the stuff I worked on is stuff that I need eventually.  

23 Oct 2022

    -Back to playing with my code Legos!  First task is going to be creating the input form for Item Lookup.

    -Got the base input up and running.  Now I have a decsion to make.  I don't think I need a button component.  I think I could actually do that in CSS, and in the meantime the prop-passing is getting to be a little much.  I think I will do this, but set myself a time limit.  

    -1:45pm Got basically what I want for the input field.  Now I need to get into some data-moving stuff.  I need:  

        Returns:

            -A state in <Returns> that tracks the current Cart.  

            -A table that shows the current items.
                -table must map from an entry in product-context.
                -I'm going to need a custom LI for the scanned-items table.

            -The items must come from the product-context 

            -First, let me just test getting the product-context in Returns.

        product-context:

            -Item keys need to be a product number, not a name.  

    3:30.  Kind of spinning my wheels again.  What NEEDS to happen first is to update the product-context to use numbers as keys.

    Next, I need to figure out how to get a product-context object via its key.

    Then, I can get to work on a <LI> that populates based on that.

24 Oct 2022:

    Things I could do today:


        X -I need a way to show an invalid item entry in the Item Entry form. 

        -Get the Add Item form working.

            -I'm going to do this first because I think making the LI will be easier.  I need:

                - a function in Returns that gets the values of Item Number and Quantity.

                -I need a function that checks 

        -Create the full Item List LI

    Ok, getting some major fucking meltdowns when trying to use the AddItemHandler() function from Returns.  First, potential issues:

        -I know very little about forms and there are a few things I could be doing wrong.

            -Submission behavior is set in the form, not the Submit button.
            -I haven't used preventDefault() anywhere.
            -I'm not referencing an event and the examples I see online appear to do this.
            -I still don't know why I'm using a <form> instead of just some input states.
            -Something else.

        -I've never passed a properties through multiple Outlet contexts.  In theory it should work no different from prop drilling, but I've never done it and I could messing up the technicalities.

        -This whole idea of using routes for nested outlets might be stupid.  I might be better off with fewer URLs and conditional rendering.

            -I guess I should think about this one first, since its implications are the largest and it will cause the most rework if I change my mind.

            KEEP THE URLS

                +The main benefit of URLs is that if I am testing, I can send someone a URL and have them start right at the source.

                    -That's not how the real app works.  Users expect to click through.

                    -The other model I have in my mind is to have one URL per page, and then do all variations through conditional rendering.  If that is the case, I could still direct users to the nearest URL and let them click through from there.
                
                +The URLs are actually kind of nice.  The ability to click and make <thing> be on the page is pretty cool.

                +If this is training then I should be preparing for the worst-case.  When I am navigating websites, the URLs are changing all the time.  I might need that capability.

                    -This is training, but we need output.  It's better to get it working in a non-ideal way and then figure out the rest later.

                + This is what we have now.  We need to make progress.  Major reworks when running into snags is not a good habit to be in.  Figuring out how to make what we have work is what is likely to get us moving again the quickest.

            ---

            1 URL per page
                + This is familiar.  I'm pretty sure I know how to make it work.

                    -It also means we won't be learning as much.

                + It is a simpler conceptual model.  If we get stuck, no one is coming to help us.  The fewer moving parts we don't understand, the easier it will be to find problems.

                + Makes it easier to try that component composition model, which we've also been wanting to understand.

        OK.  Here's my compromise.  I'm going to spend an hour trying to un-fuck what I have.  If I'm still stuck, I will re-evaluate 1 URL per Page, and I plan to use 1UpP for the future work.

            -Test 1:  Pass a function down and run it using a local var as an argument.
                Took a little fiddlefucking but works fine.

            -Test 2:  Check the form examples, look for deviations, address them.

                Well.  I solved it?  I changed the submission to happen from the form, I added a local function with event.preventDefault() and I had that function call the AddItemHandler function from Returns, and now it's working flawlessly.  I do not know why.

25 Oct 2022:

    -Goal for today is to try and get the Product Detail component working.
        -Render the component in the list, populated by a prop.
        
26 Oct 2022:

    -Working on the CSS for the product component.
    -or... maybe not.  Might be the validator.
        -I'm pretty sure I can validate with what I have.  The question is when.

            -I could validate on Submit, which is kind of a lousy experience but would be easy to implement.

            -I could validate inline, but when?
                -De-focus is really nice, but if they do it second then I miss my validation.
                    -I could make item number unavailable until a valid item is entered?  Overkill?

                -I could track in the state, and make the button unavilable until there's a valid number?
                    -but then what triggers the message?
                
                -I think no matter what, I need to check as the text is being entered, and so I need a state to track that.

27 Oct 2022
    -This might be stupid, but I'm trying to re-arrange my input form to use a reducer instead of a state.  I don't actually know why except that reducers are supposedly better for complex states.

28 Oct 2022
    -I got stuck last night, and I think I understand the reason why.  I can make Item Entry work just fine with a reducer.  My problem is that I don't understand why I should be using the reducer instead of a state.  I really can't see any advantages.  It just looks like a different syntax for accomplishing the same thing.

        -I think the very first task of the day should be to get it running again with the Reducer.  After that I can decide how much time to spend on learning.
    1:00
    -Time's kind of getting away from me here.  I just really have not had great luck with Maddie the last few sessions, although I haven't been super great about following procedure, either.

        -I need to choose here:

            1. I could change Returns to use a reducer instead of a state.  
                + If I'm not changing the logic, this -shoudn't- take too much time.
                + Once I figure out the value of Reducer, this is the thing I'm most likely to need to change at the cost of significant re-work.
                
                -The application is working fine right now.  This is more non-progress.

            2. Experiments and reading to find out the purpose of UseReducer().

                + Biggest potential payoff in terms of new understanding.  Right now I don't know why Reducer is better and so I can't design in a way that takes advantage.
                
                - Not immediately needed for anything.

                - Success and progress are ill-defined so not satisfying. Most likely to result in a completely wasted day.

            3. Fix the appearance of the table and its list items.
                + This is the one thing on the list that I KNOW has to be done.
                + It's satisfying and could help get me into the groove.

                - Is likely to need rework if I ever do Item 1.  

        -I think the compromise is to do Item 1, but restrict it to JUST replicating what I'm doing with useState.  No exceptions.  I'm going to make that change, then decide if there's anything I want to modify.  Setting a 45 minute timer to help focus me.

            -One deviation.  I'm going to put all the items in an Items object because eventually I will need to keep track of at least a Receipts object too.  Since I can't imagine not needing this, it's a time-saver to do it now.
    
    3:30:
        -Well, that took way too long, but finally got the Returns state working through Reducer.  

            -The next, obvious question is if I can move more of the state-change logic into the Reducer.
                -It's working, so I don't know if that's the best use of my time.
                -I don't know what the best practices are, so I'm not even sure it's a good use of my time.  

            -I'm gonna take a SHORT break, then devote 20 minutes to Googling to see what I can find on best practices.  If nothing's clear, I'll move on to more visible work.

            -OK.  From the examples I've seen, the Reducer function TENDS to be pretty simple - 

            -The plot thickens.  It is true that I am not using Redux, but IIRC most of the useReducer() approach was developed from Redux.  Redux recommends that as much logic as possible be placed into the Reducer.  

                -This was just a comment from StackOverflow, but it made so much sense to me.  Paraphrasing:  determine whether or not to dispatch in the action creator, but do all other logic in the reducer.

            -Is it stupid to refactor the Returns logic into the Reducer?  Probably.  Am I going to do it anyway?  Also probably.

                -Well, that was completely painless.  Took one try and ten minutes.  :/
        
    Going to do some work on the styling next.  

        -A little sidetracked again.  I found a way to make the scrolling happen but it had a really weird effect where it was making the whole table grow outside the bounds of the flex box.

            -I am actually wondering if it's not happening at the level of the <tr>

30 Oct 2022
    OK, gotta get in and beat this boss.

        Approaches:

            -The CSS for the table is all over the place.  Who coded this shit?
            I need to decide if I am going to have global CSS for the table, or if I am going to keep it with the component?

                -I don't know of any other tables I plan to make, but I could be wrong.  If I do make another table, I could always override that with local CSS, but that's kind of inelegant.  I like the idea of having one style per chart, so I think that's what I'm going to do.

            -I THINK it's some part of the table, and specifically its size, that is causing the overflow.  Everything was fine until the table got big.

            -So first move is going to be refactoring the table's style.  

    OK.  Why am I stuck?
    
        -First problem was that the table's height was behaving unpredictably.  

        -Second problem is that the horizontal layout appears to be behaving strangely and I don't know why.

        -Now I am wondering if I should even be using tables at all.  

        -I've rolled back all changes so I can think clearly about this.

            -ReactTable might be better.  It seems to be very well liked.  I don't know what the benefits are, but if I keep working on the stock table I might find myself stuck.

            -IF my normal table can:

                -fit within the confines of the page
                -scroll
                -let me set columns, or at least respond to different content sizes

            Then the stock table is fine.  

        -I think I am going to try with react-table.  My main reason is that it has a sorting feature, which would be nice not to have to build.

        https://react-table-v7.tanstack.com/docs/quick-start


1 Nov 2022

    -I got the react-table working from the example.  However, at least right now it looks pretty overwhelming to me.  Like, there's a lot of stuff in the code that I just don't understand what it is or why it is there.

        -Let's just dig in a little bit here.  I would hate to give up so close to the end.

            -First.  That scary object at the start was just object de-structuring.  I added in an additional variable that I got from the TableInstance object and it printed as expected.

            -Second.  You can populate from a nested object.  I tried it with the sample data and it worked as expected: "parent.child"  so that isn't my problem.

    -My main concern is that I am depending on something I didn't build and don't understand, so if I get stuck I don't have a great way of fixing it.

2 Nov 2022

    -I finally got use-table working. Right now, I don't see it.  It literally looks exactly like what I had before.  The main draw feature is that it is supposedly easy to sort the columns, but I'm not planning to do that any time soon.  
    
    -If I come back to this, the keys I need to remember are that memoizing the data arrays and the names of the props/object thingy(?) passed to the useTable() function turned out to be very important.

    const tableInstance = useTable({ columns, data });

    I think I'm just going to roll with the stock table and try to figure out why it wasn't working.  

        -Was this a mistake?  I think so.  The best defense I can make is that this package appears to be more capable and if I could have made it work with little effort, it might have been worth it.

        -The best criticism I can make is that even from the start, I didn't see a way that this would solve my immediate problem: scrolling and LIs not fitting on screen.  As soon as it became apparent that this was going to be a lot of extra complexity, I should have abandoned it.

        I need  to be very suspicious of the 'IDK, I just want to' feeling.

    -So, on to the table.

        -I don't understand why my table was such a disaster, and there are so many interactions that I think I'll have trouble finding the problem.  I think the right move is to start with the 70 panel, and build the chart up from scratch.

    -Before I get into that, I think I need to make an architecture decision or else I'll need to do more fiddling.

        I want the /returns URL to be an entry point.  The 70 and 30 panels should be handled by conditional rendering.  From /retuns you can navigate to deeper URLs, but until you choose a path the page should just be conditional rendering.

            -The first thing I will need to change is that I need the 30 panel to be able to do conditional rendering.
            
                -To do that, I will need to track the active state.  Maybe with a reducer?

                -If they don't already do this, I need the button component to accept different onClick() functions.  Sometimes it's going to be a state+conditional render change, other times it will be a URL change.

                -OK, I got it.  Figured out how to do navigation via a function.  This was the site that solved it for me:

                https://www.kindacode.com/article/programmatically-navigate-using-react-router/

3 Nov 2022

    -Next little question: should I control the Returns Index 70 and 30 panels with one or two reducers?  
        - as far as I know, they are completely independent, so there's no reason to pair them.  

        - It's not that much harder to make it all one reducer, and if I'm wrong I could see just wanting one.

    -The question now is: do I have a skinny Reducer and let the lower-level components set the state via payload, or do I try to get as much of that logic in the Reducer as possible?
        -I feel like the answer is the skinny reducer.  I think that gives me maximum flexibility to determine what is getting rendered.  
            

4 Nov 2022

    -Having slept on  it, I think the right approach to the cart is to conditionally render the Invoice and Items tables based on the session.  If there is anything in the table, we render the table.  If not, we render the Scan screen.

    -OK, got it working.  The next thing to to is to start hacking away at the table.  I think the approach is just going to be: build a very long table, styling as I go, and see where the problem is.


5 Nov 2022

    -Things to try - 
        -convert <tbody> to flex

        -App.js class main container seems to be the right height for the blue area, but is somehow flexing beyond that.  Why?

        -if absolutely nothing else is working, try clearing out most of .App and putting the table as close as possible to the top of the tree.  This will at least allow me to try out different approaches without having to change 15 different layers of children.
    
        -I know exactly why I'm avoiding getting started.  I'm pretty sure making the table into <flex> won't work and then I'm back to frustration.  But there's no alternative.  I am blocked.  However long this problem takes to solve, I can't proceed until it is.  

            -OK.  I made the simple version.  It works exactly like I want :/  But I guess that means I can find the mistake somewhere in here?

            -Added in the horizontal container, which I really expected was goign to be the source of all the problems.  Again, working perfectly as expected.

            -Another clue.  AFAICT, the faulty offset is exactly the height of the nav bar.  Something is not counting that in the percentage.

            -Also.  When I take out the nav bar, the size is porportioned correctly.  WTF?

        -Holy shitballs.  I got it.  I'm actually not sure what was tripping me up.  It was some combination of three things.  
            -First, for a flex item:    height: 100%   is relative to the parent, so if I have other items with defined sizes in there eating up space, I could get overflow.  The correct way to do it is:
                flex: 1 1 0rem.

            -The second thing, the reason why I didn't see changes earlier, is that    flex: 1 1 0    is not actually a valid input.  The third argument needs to include a unit, like rem or %.  Otherwise, I think it just compiles to 'auto' which would explain why I was seeing no response - it was just being its default self.

            -Finally.  Not sure if I grasped this or not, but the   flex:   property determines how this element behaves RELATIVE TO ITS PARENT.  I was trying to make the table a flex-item and getting weird shit, but that's wrong.  It is a flex item already.  All children of a flex box are flex items, whether they themselves flex or not, and I can use any flex-item properties on them.

    -Next up is to get the custom table working.  I'm going to try my existing custom table and see if it works.

        -Custom table is working, accepting data from Returns context, and adding and deleting properly.  Next step will be to wire the Product Detail section together, but that should be pretty easy.

        -If you told me this morning that this is what I'd have at the end of the day, I'd take that outcome in an instant.  :)

6 Nov 2022
    -First thing.  I've been wondering if I should plan the invoice/item matching.
        -At some point it will be needed, but that's fairly far in the future.  
        -The only dependency right now is mapping the item object to the table.  
            -I could just plow ahead.  It's some re-mapping, but I'm not concerned at all.
            -I could come up with a plan, re-do the data map, and then figure out the acutal mapping later.

    -I think I am going to devote an hour to the problem.  After that, I'm gonna stop or I could be on this all day.

        OK.  I think I can fix the item part for now.  What I have is an array of items that looks like:

          {
        productData: {
          img: toilet_img,
          price: 8.75,
          itemNum: "400",
          modelNum: "RT3301",
          description: "American Standard Grand Duke II with Ultra-Flush",
          categories: ["Stock", "Special Order"],
        },
        scanDetails: {
          quantity: "1",
          scanID: 511415,
        },
      },


    {
        img: toilet_img,
        price: - -
        itemNum: "400",
        modelNum: "RT3301",
        description: "American Standard Grand Duke II with Ultra-Flush",
        categories: ["Stock", "Special Order"],
        quantity: 1,
    }

    or:

        "400": {
            img: toilet_img,
            price: - -
            itemNum: "400",
            modelNum: "RT3301",
            description: "American Standard Grand Duke II with Ultra-Flush",
            categories: ["Stock", "Special Order"],
            quantity: 1,
    }

    I think having it as an object will make some of the matching easier, but I need to do a bit of extra work to make it into an array for rendering.

    I think if I'm going to do this, my plan should be to ONLY keep the object in the state.  The only time I convert it to an array is right before I need to render something.  The object is always the SSoT.

    Right now, I will need to change:
        -the SSoT state in Returns
            -to be an object instead of an array.
        -the function that adds a new entry in Returns
            -to add an object instead of an array.
            -to check if this item already exists.
        -the Returns function that removes an item.
            -Remove by key instead of filtering?
        -the Returns function that checks for a match?
        -the Add Items window?
        -The table that renders all scanned items to convert the array into 


        


