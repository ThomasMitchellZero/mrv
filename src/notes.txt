24 Sep 2022

    -Explore what I need to do to use heredity in CSS.  Max 1 hour, option to continue if I feel like I am close to the answer.
        -I am not close to an answer.

    -Organize the tables so that inputs <th> and <tr> use a similar structure

    -Make the tables use a flex-basis so I can alter the sizes.

    -Table should be universal.  Lots of other parts of the app use a table, and I want them all to be configurations of this.

        -Some <td> will be components.
        -Some <td> will have multiple elements
        -Need to be able to take unknown number of <td> in each <tr>
        -Incorporate flex-basis into <th>


14 Oct 2022

-Add button to button container, figure out how to control positioning.

-see if React elements can be controlled like HTML elements via CSS.  If not, make alternate plan.
    -It seems they cannot.

-Next test - see if I can add a non-modular CSS class in case I need to control that way?  
    -Also cannot.  I think if I need to, I can pass styles via props.  No idea if this is best or not.  

-Where am I stuck and spinning my wheels?

    - I need the footer container to be able to accept an arbitrary collection of contents.  Could be buttons, could be price summary, could be nothing at all.
    
    With that in mind, I really need to be able to style the Footer contents as well.  I can't know in advance where to align the buttons, how many, etc.  

    - I WANT (but do not need) each base panel to have everything needed: header, contents, and footer.  

    -Conflict:  the <BasePanel> component accepts one set of children, which will fill the content area.  

    -So one way to do it would be to define the footer contents in the section configuration component, and then pass that down via a prop.  AFAICT I can also do any styling in that parent as well.  

    -The other option would be to just make each panel separately.  I guess this is technically violating DRY, but the parts I'm 'repeating' are some pretty simple CSS that I don't think I'm going to mess up.  I think this is the move.  I am also very proud of myself for systematically figuring this out, and I have earned a smoke tonight.  And still 2:30(+?) to go!



-I need to implement the react-router-dom in my file

-I need to convert my nav bar into the HTML <nav> component

-OK, stuck again!  Let's do this!

    Objective - I want the tabs in <GlobalNav> to be able to handle URL requests because I will eventually need this.

    Problem - When I changed the tabs to the <NavLink> compnent from React-Router, the styling got all weird.

    Options:
        -I could fiddle with the CSS in the existing file to see if I can make what I have work.

        -AFAICT the <NavLink> does everything I need OOtB.  I could try to do my mapping to <NavLinks> in the NavBar and do the styling in the NavBar CSS.  

            -Does <Navlink> accept an ID? - YES
            -Does it allow other styling or is it just text?  - I think so?

16 Oct 2022

    -Got the V6.x update working with surprisingly little trouble.  

    -Next is the nav bar. 
        -I need to convert the buttons to <NavLink> components
        -I need to style the NavLink components just like their previous custom peers.
        -I think I can get rid of the custom state tracking.  AFAICT the stock <NavLink> component handles that, and in any case each page will have a different URL.

    -Then I can finally get started on some page building?

    -The Scan Items sidesheet elements are going to need routes as well.

18 Oct 2022

    -The Nav Menu buttons need the ability to have an icon specified on creation.  Options:  

21 Oct 2022

    -Routes:

        -I need to figure out how to do sub-routes - like 
        "localhost:3000/base/branch"
            -I think if I just place the sub-route in the main route, it will work.

        
        -I need to figure out how to do routes that are part of a page: like if I want 70-panel to stay the same but 30-panel to change based on route.

    OK.  I notice I am confused.

    I now have the No Sale button linked to the /nosale route in my code.  When I click the No Sale button, the URL changes to 
    localhost:3000/returns/nosale   which is what I expect.

    However, I set that route to include a page element, that page element does not appear the URL changes.  
        -First.  Do I have any examples of parent routes also rendering elements?  

    -Gonna stop for tonight.  I think that this section haswsxs the answer:  https://www.robinwieruch.de/react-router-nested-routes/


22 Oct 2022
    OK!  Long list of things to work on today!  Wish I were as clear and excited now as I was when I was trying to sleep at 6:00 a.m.  :/

    -First, going to try an experiment of starting with something I know I can crush to get into the groove.  
        -Experiment seems to have gone very well.  I am 100% dialed in and excited to work.

    ROUTING

        -Need to understand <Outlet> and how to use it.
            -May need to re-factor the app to use Outlet with the Nav bar.
        
        -Can I get the whole page to change via a child URL?
            -AFAICT, the answer is no.  I think that you only use a child route if you want to change part of the parent?

        -How do I make part but not all of a page change via URL?

    CONTEXT

        -Do I want the scanned list to be a separate context?  If so, how to reference more than one context?

        -I need to figure out a way to add items to the cart.  This will probably be a form.

    1:30 evaluation:  

        -I THINK I have the answer to my immediate routing questions.  I think what I should do is test to make sure I've got it with the <Outlet> component.  If it is working as expected:
            -Do I diagram one of the Router components?  It would be good to solidify the knowledge, but I haven't gotten a lot of pixels on the screen and that's what I really need to do.

        -I think I should plan to restructure the app based on what I've learned.  
            -I think all flows should have a parent URL - Returns, Exchanges, etc.
            -Some of my components, especially the ones with 30-70 panels, are going to need some Outlet organization.
            -Returns will need to be a parent URL.  

        -For <Outlet> My understanding:  Each parent can have a single outlet.  I can have any number of potential children to fill that outlet, but I can't say "put these children here and those children there" based on URL.  

        -After test and restructure, what to work on next?  Got to keep in mind that I am probably showing this to Kristin on Monday.
            -Scanned Item list?
                -Pros:  
                    -at some point, even in Exchanges, I'm going to have to have entered items.
                    -That is a really cool feature and I don't think it can be matched in Axure.
                -Cons:  
                    -It's not directly related to Returns and it might look like this process is too slow. 

    OK, now 3:30.  At the moment, I do not feel like fiddlefucking around with routing any more.  I want to get some stuff on the screen, and I've got my eye on item entry.  I need:

        -A form that accepts item number
            -looks for a match in product context
            -If found, adds to basket
            -If not found, gives an error.

        -A context scoped to Returns that records all successful item entries... or could it be a state?

        -A table that shows all items in the transaction
            -A component for the the individual LIs.
        
        -the 70 panel should conditionally render either the Scan CTA or the table, depending on if there are any items scanned.

        -First, I think I need a Returns component to track the state.  The contents will change a lot based on what phase of the process the user is in, and I also need to keep track of the state.

        

    


    
