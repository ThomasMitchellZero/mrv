
Anything problem I identify with no dependencies is probably getting bypassed.  This is my personal Backlog:
    
    -When I hit Enter on keyboard for Item or Invoice entry panels, the form submits anyways even though it isn't valid.

    -Figure out a more logical way for Input validation red warning messages to appear when needed.  Right now they are visible at the start and only go away when the user is entering.

    -After entering an item, ItemEntry30 should focus on the itemNum field instead of staying on the Qty field.

    -Product Details <th> in SessionItems70 is actually correctly aligned, but it looks like it isn't.  Figure out a way to either include space or customize margin / padding.

    -Invoice column in in SessionItems70 currently displays nothing.  This is a stupid feature, but figure out a different approach.

    -For the sake of clarity, I really should rename the container for all dispositions into something that reflects that it is a container of all the individual dispositions.

        AFAICT, this term is used in 4 places:
            -Returns
            -ItemEntry30
            -ItemDetails30
            -the matching.js function.

    -Add in Manager Override to be able to cancel restock fee.  As this has no dependencies I'm leaving it for later.

    -Items with a restocking fee need to show the restocking fee.  This does have a dependency (the manager override to remove the fee) so it might have to move up.

    -I need to figure out how to handle an expired receipt.  It seems like the logic would be pretty heavy and this isn't a very important feature so I am backlogging it.  
        If I had to guess right now, the thing to do would be: 
            -add a date to each invoice in the store.
            -in the matchmaker, sort the array to loop through invoices by date, earliest first.  This is to make sure that if there are any recent invoices that also include the item, those are matched first.
            -For any that are past 90 days, treat as a non-match, add an expired:true property to the specialConditions object, and continue to the next invoice.
            -and then how do I handle the quantities if some aren't matched?


//// Github Pages Deployment ////

Writing a little about this since I've struggled with it in the past. This site had a really good walkthrough

https://github.com/gitname/react-gh-pages

I was actually able to skip to Step 7, and I think with what I've done, Step 7 is all I need to do.  I'm going to make a change and see if it appears.

To push it live, I just have to type:     npm run deploy     into the console.



//////////////

24 Sep 2022

    -Explore what I need to do to use heredity in CSS.  Max 1 hour, option to continue if I feel like I am close to the answer.
        -I am not close to an answer.

    -Organize the tables so that inputs <th> and <tr> use a similar structure

    -Make the tables use a flex-basis so I can alter the sizes.

    -Table should be universal.  Lots of other parts of the app use a table, and I want them all to be configurations of this.

        -Some <td> will be components.
        -Some <td> will have multiple elements
        -Need to be able to take unknown number of <td> in each <tr>
        -Incorporate flex-basis into <th>


14 Oct 2022

-Add button to button container, figure out how to control positioning.

-see if React elements can be controlled like HTML elements via CSS.  If not, make alternate plan.
    -It seems they cannot.

-Next test - see if I can add a non-modular CSS class in case I need to control that way?  
    -Also cannot.  I think if I need to, I can pass styles via props.  No idea if this is best or not.  

-Where am I stuck and spinning my wheels?

    - I need the footer container to be able to accept an arbitrary collection of contents.  Could be buttons, could be price summary, could be nothing at all.
    
    With that in mind, I really need to be able to style the Footer contents as well.  I can't know in advance where to align the buttons, how many, etc.  

    - I WANT (but do not need) each base panel to have everything needed: header, contents, and footer.  

    -Conflict:  the <BasePanel> component accepts one set of children, which will fill the content area.  

    -So one way to do it would be to define the footer contents in the section configuration component, and then pass that down via a prop.  AFAICT I can also do any styling in that parent as well.  

    -The other option would be to just make each panel separately.  I guess this is technically violating DRY, but the parts I'm 'repeating' are some pretty simple CSS that I don't think I'm going to mess up.  I think this is the move.  I am also very proud of myself for systematically figuring this out, and I have earned a smoke tonight.  And still 2:30(+?) to go!



-I need to implement the react-router-dom in my file

-I need to convert my nav bar into the HTML <nav> component

-OK, stuck again!  Let's do this!

    Objective - I want the tabs in <GlobalNav> to be able to handle URL requests because I will eventually need this.

    Problem - When I changed the tabs to the <NavLink> compnent from React-Router, the styling got all weird.

    Options:
        -I could fiddle with the CSS in the existing file to see if I can make what I have work.

        -AFAICT the <NavLink> does everything I need OOtB.  I could try to do my mapping to <NavLinks> in the NavBar and do the styling in the NavBar CSS.  

            -Does <Navlink> accept an ID? - YES
            -Does it allow other styling or is it just text?  - I think so?

16 Oct 2022

    -Got the V6.x update working with surprisingly little trouble.  

    -Next is the nav bar. 
        -I need to convert the buttons to <NavLink> components
        -I need to style the NavLink components just like their previous custom peers.
        -I think I can get rid of the custom state tracking.  AFAICT the stock <NavLink> component handles that, and in any case each page will have a different URL.

    -Then I can finally get started on some page building?

    -The Scan Items sidesheet elements are going to need routes as well.

18 Oct 2022

    -The Nav Menu buttons need the ability to have an icon specified on creation.  Options:  

21 Oct 2022

    -Routes:

        -I need to figure out how to do sub-routes - like 
        "localhost:3000/base/branch"
            -I think if I just place the sub-route in the main route, it will work.

        
        -I need to figure out how to do routes that are part of a page: like if I want 70-panel to stay the same but 30-panel to change based on route.

    OK.  I notice I am confused.

    I now have the No Sale button linked to the /nosale route in my code.  When I click the No Sale button, the URL changes to 
    localhost:3000/returns/nosale   which is what I expect.

    However, I set that route to include a page element, that page element does not appear the URL changes.  
        -First.  Do I have any examples of parent routes also rendering elements?  

    -Gonna stop for tonight.  I think that this section haswsxs the answer:  https://www.robinwieruch.de/react-router-nested-routes/


22 Oct 2022
    OK!  Long list of things to work on today!  Wish I were as clear and excited now as I was when I was trying to sleep at 6:00 a.m.  :/

    -First, going to try an experiment of starting with something I know I can crush to get into the groove.  
        -Experiment seems to have gone very well.  I am 100% dialed in and excited to work.

    ROUTING

        -Need to understand <Outlet> and how to use it.
            -May need to re-factor the app to use Outlet with the Nav bar.
        
        -Can I get the whole page to change via a child URL?
            -AFAICT, the answer is no.  I think that you only use a child route if you want to change part of the parent?

        -How do I make part but not all of a page change via URL?

    CONTEXT

        -Do I want the scanned list to be a separate context?  If so, how to reference more than one context?

        -I need to figure out a way to add items to the cart.  This will probably be a form.

    1:30 evaluation:  

        -I THINK I have the answer to my immediate routing questions.  I think what I should do is test to make sure I've got it with the <Outlet> component.  If it is working as expected:
            -Do I diagram one of the Router components?  It would be good to solidify the knowledge, but I haven't gotten a lot of pixels on the screen and that's what I really need to do.

        -I think I should plan to restructure the app based on what I've learned.  
            -I think all flows should have a parent URL - Returns, Exchanges, etc.
            -Some of my components, especially the ones with 30-70 panels, are going to need some Outlet organization.
            -Returns will need to be a parent URL.  

        -For <Outlet> My understanding:  Each parent can have a single outlet.  I can have any number of potential children to fill that outlet, but I can't say "put these children here and those children there" based on URL.  

        -After test and restructure, what to work on next?  Got to keep in mind that I am probably showing this to Kristin on Monday.
            -Scanned Item list?
                -Pros:  
                    -at some point, even in Exchanges, I'm going to have to have entered items.
                    -That is a really cool feature and I don't think it can be matched in Axure.
                -Cons:  
                    -It's not directly related to Returns and it might look like this process is too slow. 

    OK, now 3:30.  At the moment, I do not feel like fiddlefucking around with routing any more.  I want to get some stuff on the screen, and I've got my eye on item entry.  I need:

        -A form that accepts item number
            -looks for a match in product context
            -If found, adds to basket
            -If not found, gives an error.

        -A context scoped to Returns that records all successful item entries... or could it be a state?

        -A table that shows all items in the transaction
            -A component for the the individual LIs.
        
        -the 70 panel should conditionally render either the Scan CTA or the table, depending on if there are any items scanned.

        -First, I think I need a Returns component to track the state.  The contents will change a lot based on what phase of the process the user is in, and I also need to keep track of the state.

    Wrapping it up for the day.  I didn't want to spend the whole afternoon on routing, but... I did, and the stuff I worked on is stuff that I need eventually.  

23 Oct 2022

    -Back to playing with my code Legos!  First task is going to be creating the input form for Item Lookup.

    -Got the base input up and running.  Now I have a decsion to make.  I don't think I need a button component.  I think I could actually do that in CSS, and in the meantime the prop-passing is getting to be a little much.  I think I will do this, but set myself a time limit.  

    -1:45pm Got basically what I want for the input field.  Now I need to get into some data-moving stuff.  I need:  

        Returns:

            -A state in <Returns> that tracks the current Cart.  

            -A table that shows the current items.
                -table must map from an entry in product-context.
                -I'm going to need a custom LI for the scanned-items table.

            -The items must come from the product-context 

            -First, let me just test getting the product-context in Returns.

        product-context:

            -Item keys need to be a product number, not a name.  

    3:30.  Kind of spinning my wheels again.  What NEEDS to happen first is to update the product-context to use numbers as keys.

    Next, I need to figure out how to get a product-context object via its key.

    Then, I can get to work on a <LI> that populates based on that.

24 Oct 2022:

    Things I could do today:


        X -I need a way to show an invalid item entry in the Item Entry form. 

        -Get the Add Item form working.

            -I'm going to do this first because I think making the LI will be easier.  I need:

                - a function in Returns that gets the values of Item Number and Quantity.

                -I need a function that checks 

        -Create the full Item List LI

    Ok, getting some major fucking meltdowns when trying to use the AddItemHandler() function from Returns.  First, potential issues:

        -I know very little about forms and there are a few things I could be doing wrong.

            -Submission behavior is set in the form, not the Submit button.
            -I haven't used preventDefault() anywhere.
            -I'm not referencing an event and the examples I see online appear to do this.
            -I still don't know why I'm using a <form> instead of just some input states.
            -Something else.

        -I've never passed a properties through multiple Outlet contexts.  In theory it should work no different from prop drilling, but I've never done it and I could messing up the technicalities.

        -This whole idea of using routes for nested outlets might be stupid.  I might be better off with fewer URLs and conditional rendering.

            -I guess I should think about this one first, since its implications are the largest and it will cause the most rework if I change my mind.

            KEEP THE URLS

                +The main benefit of URLs is that if I am testing, I can send someone a URL and have them start right at the source.

                    -That's not how the real app works.  Users expect to click through.

                    -The other model I have in my mind is to have one URL per page, and then do all variations through conditional rendering.  If that is the case, I could still direct users to the nearest URL and let them click through from there.
                
                +The URLs are actually kind of nice.  The ability to click and make <thing> be on the page is pretty cool.

                +If this is training then I should be preparing for the worst-case.  When I am navigating websites, the URLs are changing all the time.  I might need that capability.

                    -This is training, but we need output.  It's better to get it working in a non-ideal way and then figure out the rest later.

                + This is what we have now.  We need to make progress.  Major reworks when running into snags is not a good habit to be in.  Figuring out how to make what we have work is what is likely to get us moving again the quickest.

            ---

            1 URL per page
                + This is familiar.  I'm pretty sure I know how to make it work.

                    -It also means we won't be learning as much.

                + It is a simpler conceptual model.  If we get stuck, no one is coming to help us.  The fewer moving parts we don't understand, the easier it will be to find problems.

                + Makes it easier to try that component composition model, which we've also been wanting to understand.

        OK.  Here's my compromise.  I'm going to spend an hour trying to un-fuck what I have.  If I'm still stuck, I will re-evaluate 1 URL per Page, and I plan to use 1UpP for the future work.

            -Test 1:  Pass a function down and run it using a local var as an argument.
                Took a little fiddlefucking but works fine.

            -Test 2:  Check the form examples, look for deviations, address them.

                Well.  I solved it?  I changed the submission to happen from the form, I added a local function with event.preventDefault() and I had that function call the AddItemHandler function from Returns, and now it's working flawlessly.  I do not know why.

25 Oct 2022:

    -Goal for today is to try and get the Product Detail component working.
        -Render the component in the list, populated by a prop.
        
26 Oct 2022:

    -Working on the CSS for the product component.
    -or... maybe not.  Might be the validator.
        -I'm pretty sure I can validate with what I have.  The question is when.

            -I could validate on Submit, which is kind of a lousy experience but would be easy to implement.

            -I could validate inline, but when?
                -De-focus is really nice, but if they do it second then I miss my validation.
                    -I could make item number unavailable until a valid item is entered?  Overkill?

                -I could track in the state, and make the button unavilable until there's a valid number?
                    -but then what triggers the message?
                
                -I think no matter what, I need to check as the text is being entered, and so I need a state to track that.

27 Oct 2022
    -This might be stupid, but I'm trying to re-arrange my input form to use a reducer instead of a state.  I don't actually know why except that reducers are supposedly better for complex states.

28 Oct 2022
    -I got stuck last night, and I think I understand the reason why.  I can make Item Entry work just fine with a reducer.  My problem is that I don't understand why I should be using the reducer instead of a state.  I really can't see any advantages.  It just looks like a different syntax for accomplishing the same thing.

        -I think the very first task of the day should be to get it running again with the Reducer.  After that I can decide how much time to spend on learning.
    1:00

    -Time's kind of getting away from me here.  I just really have not had great luck with Maddie the last few sessions, although I haven't been super great about following procedure, either.

        -I need to choose here:

            1. I could change Returns to use a reducer instead of a state.  
                + If I'm not changing the logic, this -shoudn't- take too much time.
                + Once I figure out the value of Reducer, this is the thing I'm most likely to need to change at the cost of significant re-work.
                
                -The application is working fine right now.  This is more non-progress.

            2. Experiments and reading to find out the purpose of UseReducer().

                + Biggest potential payoff in terms of new understanding.  Right now I don't know why Reducer is better and so I can't design in a way that takes advantage.
                
                - Not immediately needed for anything.

                - Success and progress are ill-defined so not satisfying. Most likely to result in a completely wasted day.

            3. Fix the appearance of the table and its list items.
                + This is the one thing on the list that I KNOW has to be done.
                + It's satisfying and could help get me into the groove.

                - Is likely to need rework if I ever do Item 1.  

        -I think the compromise is to do Item 1, but restrict it to JUST replicating what I'm doing with useState.  No exceptions.  I'm going to make that change, then decide if there's anything I want to modify.  Setting a 45 minute timer to help focus me.

            -One deviation.  I'm going to put all the items in an Items object because eventually I will need to keep track of at least a Receipts object too.  Since I can't imagine not needing this, it's a time-saver to do it now.
    
    3:30:
        -Well, that took way too long, but finally got the Returns state working through Reducer.  

            -The next, obvious question is if I can move more of the state-change logic into the Reducer.
                -It's working, so I don't know if that's the best use of my time.
                -I don't know what the best practices are, so I'm not even sure it's a good use of my time.  

            -I'm gonna take a SHORT break, then devote 20 minutes to Googling to see what I can find on best practices.  If nothing's clear, I'll move on to more visible work.

            -OK.  From the examples I've seen, the Reducer function TENDS to be pretty simple - 

            -The plot thickens.  It is true that I am not using Redux, but IIRC most of the useReducer() approach was developed from Redux.  Redux recommends that as much logic as possible be placed into the Reducer.  

                -This was just a comment from StackOverflow, but it made so much sense to me.  Paraphrasing:  determine whether or not to dispatch in the action creator, but do all other logic in the reducer.

            -Is it stupid to refactor the Returns logic into the Reducer?  Probably.  Am I going to do it anyway?  Also probably.

                -Well, that was completely painless.  Took one try and ten minutes.  :/
        
    Going to do some work on the styling next.  

        -A little sidetracked again.  I found a way to make the scrolling happen but it had a really weird effect where it was making the whole table grow outside the bounds of the flex box.

            -I am actually wondering if it's not happening at the level of the <tr>

30 Oct 2022
    OK, gotta get in and beat this boss.

        Approaches:

            -The CSS for the table is all over the place.  Who coded this shit?
            I need to decide if I am going to have global CSS for the table, or if I am going to keep it with the component?

                -I don't know of any other tables I plan to make, but I could be wrong.  If I do make another table, I could always override that with local CSS, but that's kind of inelegant.  I like the idea of having one style per chart, so I think that's what I'm going to do.

            -I THINK it's some part of the table, and specifically its size, that is causing the overflow.  Everything was fine until the table got big.

            -So first move is going to be refactoring the table's style.  

    OK.  Why am I stuck?
    
        -First problem was that the table's height was behaving unpredictably.  

        -Second problem is that the horizontal layout appears to be behaving strangely and I don't know why.

        -Now I am wondering if I should even be using tables at all.  

        -I've rolled back all changes so I can think clearly about this.

            -ReactTable might be better.  It seems to be very well liked.  I don't know what the benefits are, but if I keep working on the stock table I might find myself stuck.

            -IF my normal table can:

                -fit within the confines of the page
                -scroll
                -let me set columns, or at least respond to different content sizes

            Then the stock table is fine.  

        -I think I am going to try with react-table.  My main reason is that it has a sorting feature, which would be nice not to have to build.

        https://react-table-v7.tanstack.com/docs/quick-start


1 Nov 2022

    -I got the react-table working from the example.  However, at least right now it looks pretty overwhelming to me.  Like, there's a lot of stuff in the code that I just don't understand what it is or why it is there.

        -Let's just dig in a little bit here.  I would hate to give up so close to the end.

            -First.  That scary object at the start was just object de-structuring.  I added in an additional variable that I got from the TableInstance object and it printed as expected.

            -Second.  You can populate from a nested object.  I tried it with the sample data and it worked as expected: "parent.child"  so that isn't my problem.

    -My main concern is that I am depending on something I didn't build and don't understand, so if I get stuck I don't have a great way of fixing it.

2 Nov 2022

    -I finally got use-table working. Right now, I don't see it.  It literally looks exactly like what I had before.  The main draw feature is that it is supposedly easy to sort the columns, but I'm not planning to do that any time soon.  
    
    -If I come back to this, the keys I need to remember are that memoizing the data arrays and the names of the props/object thingy(?) passed to the useTable() function turned out to be very important.

    const tableInstance = useTable({ columns, data });

    I think I'm just going to roll with the stock table and try to figure out why it wasn't working.  

        -Was this a mistake?  I think so.  The best defense I can make is that this package appears to be more capable and if I could have made it work with little effort, it might have been worth it.

        -The best criticism I can make is that even from the start, I didn't see a way that this would solve my immediate problem: scrolling and LIs not fitting on screen.  As soon as it became apparent that this was going to be a lot of extra complexity, I should have abandoned it.

        I need  to be very suspicious of the 'IDK, I just want to' feeling.

    -So, on to the table.

        -I don't understand why my table was such a disaster, and there are so many interactions that I think I'll have trouble finding the problem.  I think the right move is to start with the 70 panel, and build the chart up from scratch.

    -Before I get into that, I think I need to make an architecture decision or else I'll need to do more fiddling.

        I want the /returns URL to be an entry point.  The 70 and 30 panels should be handled by conditional rendering.  From /retuns you can navigate to deeper URLs, but until you choose a path the page should just be conditional rendering.

            -The first thing I will need to change is that I need the 30 panel to be able to do conditional rendering.
            
                -To do that, I will need to track the active state.  Maybe with a reducer?

                -If they don't already do this, I need the button component to accept different onClick() functions.  Sometimes it's going to be a state+conditional render change, other times it will be a URL change.

                -OK, I got it.  Figured out how to do navigation via a function.  This was the site that solved it for me:

                https://www.kindacode.com/article/programmatically-navigate-using-react-router/

3 Nov 2022

    -Next little question: should I control the Returns Index 70 and 30 panels with one or two reducers?  
        - as far as I know, they are completely independent, so there's no reason to pair them.  

        - It's not that much harder to make it all one reducer, and if I'm wrong I could see just wanting one.

    -The question now is: do I have a skinny Reducer and let the lower-level components set the state via payload, or do I try to get as much of that logic in the Reducer as possible?
        -I feel like the answer is the skinny reducer.  I think that gives me maximum flexibility to determine what is getting rendered.  
            

4 Nov 2022

    -Having slept on  it, I think the right approach to the cart is to conditionally render the Invoice and Items tables based on the session.  If there is anything in the table, we render the table.  If not, we render the Scan screen.

    -OK, got it working.  The next thing to to is to start hacking away at the table.  I think the approach is just going to be: build a very long table, styling as I go, and see where the problem is.


5 Nov 2022

    -Things to try - 
        -convert <tbody> to flex

        -App.js class main container seems to be the right height for the blue area, but is somehow flexing beyond that.  Why?

        -if absolutely nothing else is working, try clearing out most of .App and putting the table as close as possible to the top of the tree.  This will at least allow me to try out different approaches without having to change 15 different layers of children.
    
        -I know exactly why I'm avoiding getting started.  I'm pretty sure making the table into <flex> won't work and then I'm back to frustration.  But there's no alternative.  I am blocked.  However long this problem takes to solve, I can't proceed until it is.  

            -OK.  I made the simple version.  It works exactly like I want :/  But I guess that means I can find the mistake somewhere in here?

            -Added in the horizontal container, which I really expected was goign to be the source of all the problems.  Again, working perfectly as expected.

            -Another clue.  AFAICT, the faulty offset is exactly the height of the nav bar.  Something is not counting that in the percentage.

            -Also.  When I take out the nav bar, the size is porportioned correctly.  WTF?

        -Holy shitballs.  I got it.  I'm actually not sure what was tripping me up.  It was some combination of three things.  
            -First, for a flex item:    height: 100%   is relative to the PARENT, so if I have other items with defined sizes in there eating up space, I could get overflow.  The correct way to do it is:
                flex: 1 1 0rem.

            -The second thing, the reason why I didn't see changes earlier, is that    flex: 1 1 0    is not actually a valid input.  The third argument needs to include a unit, like rem or %.  Otherwise, I think it just compiles to 'auto' which would explain why I was seeing no response - it was just being its default self.

            -Finally.  Not sure if I grasped this or not, but the   flex:   property determines how this element behaves RELATIVE TO ITS PARENT.  I was trying to make the table a flex-item and getting weird shit, but that's wrong.  It is a flex item already.  All children of a flex box are flex items, whether they themselves flex or not, and I can use any flex-item properties on them.

    -Next up is to get the custom table working.  I'm going to try my existing custom table and see if it works.

        -Custom table is working, accepting data from Returns context, and adding and deleting properly.  Next step will be to wire the Product Detail section together, but that should be pretty easy.

        -If you told me this morning that this is what I'd have at the end of the day, I'd take that outcome in an instant.  :)

6 Nov 2022
    -First thing.  I've been wondering if I should plan the invoice/item matching.
        -At some point it will be needed, but that's fairly far in the future.  
        -The only dependency right now is mapping the item object to the table.  
            -I could just plow ahead.  It's some re-mapping, but I'm not concerned at all.
            -I could come up with a plan, re-do the data map, and then figure out the acutal mapping later.

    -I think I am going to devote an hour to the problem.  After that, I'm gonna stop or I could be on this all day.

        OK.  I think I can fix the item part for now.  What I have is an array of items that looks like:

          {
        productData: {
          img: toilet_img,
          price: 8.75,
          itemNum: "400",
          modelNum: "RT3301",
          description: "American Standard Grand Duke II with Ultra-Flush",
          categories: ["Stock", "Special Order"],
        },
        scanDetails: {
          quantity: "1",
          scanID: 511415,
        },
      },


    {
        img: toilet_img,
        price: - -
        itemNum: "400",
        modelNum: "RT3301",
        description: "American Standard Grand Duke II with Ultra-Flush",
        categories: ["Stock", "Special Order"],
        quantity: 1,
    }

    or:

        "400": {
            img: toilet_img,
            price: - -
            itemNum: "400",
            modelNum: "RT3301",
            description: "American Standard Grand Duke II with Ultra-Flush",
            categories: ["Stock", "Special Order"],
            quantity: 1,
    }

    I think having it as an object will make some of the matching easier, but I need to do a bit of extra work to make it into an array for rendering.

    I think if I'm going to do this, my plan should be to ONLY keep the object in the state.  The only time I convert it to an array is right before I need to render something.  The object is always the SSoT.

    Right now, I will need to change:
        X-the SSoT state in Returns
            -to be an object instead of an array.
        X-the function that adds a new entry in Returns
            -to add an object instead of an array.
            -to check if this item already exists.
        -the Returns function that removes an item.
            -Remove by key instead of filtering?
        X-the Returns function that checks for a match?
        X-the Add Items window?
        -The table that renders all scanned items to convert the array into 

17 Nov 2022

    I'm back!  Been a while since I wrote, but I was actually figuring out how to do matching with wireframes in Figma.  Time not wasted.

    My next move is to turn all that thinking into action.
        - I am going to need to make sure I have a structure for everything.

            -Items
            -Invoices
            -Unmatched
            -MatchEligble
            -Matched

            and in context:
            -InvoiceCatalog
            -ProductCatalog
    
    -Wait.  I actually do get to start with something easy!  I need an invoice entry.  

    -OK, next up.  For an invoice to be added, it needs to pass 2 checks.   
        -that it is in the context.
        -that it hasn't already been used.
    
        -Maybe what I need to do is change the context checker to check both.  I'm sure that would be a better user experience because it gives the user the tools to resolve it.

-19 Nov, 2022

    -I'm also going to try something new here.  Like programming mindfulness.  When I find myself not typing, I should either start writing code or come to this file and start writing to get unstuck.  Like, no self-shaming, just gently return the focus to the work.

    -Today's engine-starter.  I'm going to make the text that describes the error states for Enter Invoice.

    -Next, I need to add each new added invoice to the list.

    -I think after that, I will get into the three derived states.

    -12:20.  No mystery here.  I know exactly why I am stuck.  I would LIKE to have  ALL state-setting logic inside the reducer function.  Then I wouldn't have to export any state-setting functions.  I could just export the reducer function and control everything that happens with action.type.

        -Benefits:
            + A lot fewer functions to export and track down.  I'll know what the function is setting state and what level it is occuring at, assumign I name things well.  
            + Complexity Creep is has the potential to be a huge problem for me, since I'm the one that has to solve every problem.
            + I -THINK- that's actually cleaner code, and if I want this to be a demo piece that is important.
            + If I don't do it now and change my mind later, this gets a lot harder.

        -Risks:
            -I don't know if this approach will work.  I haven't really seen it done, and that should give me pause.

            -I really need to be making progress.  It's been a long time and I still haven't progresses beyond the Index URL for returns.

            -One of the things Harrison got into trouble with for Solo was that he was constantly tearing up old track because he figured out a new, better way to do things.

        Moving the statement inside the component function seems to work fine.  Now, what does that get me?

            -In the reducer, I can now call other functions that exist inside the component function, like checking if an item in the Product Catelog.  

            -I don't think I can directly call a second function that changes the state.  I think once the Switch statement returns, the state updates, the component re-renders, and we're back to zero.

                -How to do sequential updates, like validations?

                -Not sure useEffect is appropriate for this.  The documentation seems to suggest that this shouldn't really be used for state-setting.

                -I guess I could do all my updating at once.  Like, if I've got an input change, I could get that in the payload, do the validation, and then assign both the new input and the new validity status in the State object.

            -I think some functions, like checks to see if something is in the catalog, would have to be passed down.  Or could they live within their respective contexts?

            -Still not sure what the answer is, but I am definitely engaged and interested now :)

            -Maybe the thing to do would be to try it with Invoices, and then see how it extends.

            -I think I'm gonna try it.  New objective:
                -Session state should be updatable using just the Reducer function.
                -Anything not changing the session should be defined at the lowest possible level that covers all children.
                    -What about validation functions?  Could I do validation in the component?
                    -I could.  I can.
            
        5:00 - slowly chugging along, but I haven't gotten majorly stuck yet.  I think the next thing I need to do is populate the Invoices table, because the next thing after that is being able to delete invoices.

        Alternatively, I could try and move / clean up via reducer the Items table, but that thing is working OK right now and I think I'm gonna pass.  I think the time for that will be when it comes time to populate the derived lists.

22 Nov 2022
    Making decent progress on completing the move to dispatching.  
        For adding an item, here's what needs to happen.
            -Get item number + quantity from the ItemEntry30 component
            -If itemNum does not exist in sessionItems, add it.
            -update quantity.

    -Next, I want to make three sample objects, one each for Unmatched, MatchEligible, and Matched.

    -OK, so now.  How to handle this updating?  

    -Raw list > derived list > matched list.  I suppose I could:
        -have a function that generates each derived list
        -have a function that generates the matched list
        -Whenever Items or Invoices is updated, I call those two functions, then update the state with all three.  
        -I guess my only reservation is that I'm doing a LOT of work in the reducer, but I don't know any reason why that wouldn't be OK.

        -Alternatively, I could have separate functions to update EACH state object, but I think then I'm back to having to pass named functions back down the chain.

        If I do this:  one of my lists won't be in the state yet.  Either the soon-to-be Unmatched or MatchEligible will be a variable that hasn't been added to state yet.  Will this work?

            -the only purpose of UM and ME is so that I'm not double-counting either items or receipted items.
            
            -I DO NOT need to maintain UM and ME.  In fact, I definitely don't want to.  
                -I need to conceptually grasp that these two are re-generated with every state change.  

            -I do at least need to keep the Unmatched list, or else I can't give store credit.
            -I think I also need to end up with the Matched list in the state, since 

    Fuuuuuuuuck.  I think I might have just screwed myself.  I don't know if I can call outside functions in the reducers.  

        -Remember.  This is an ASSUMPTION.  We've gotten into trouble like this before.  Let's check this assumption before we blow everything up.  At the very least, I don't know WHY it wouldn't work.

        -OK.  I have not fucked myself.  I am really glad I checked my assumptions because otherwise I would have had to redo a shitload of work.  Good on me for learning from past mistakes.  I'm calling it a day.

23 Nov, 2022
    Having a little trouble getting engaged with the work, but what else is new?

    -One thing giving me pause right now.  Do I want to generate a Match-Eligible list, or do I want to to the matching directly from the invoice list?
        -IF I match directly from the invoice list, I will be left with three neat little buckets:
            -A revised invoice list, with all the returned contents subtracted.
            -An unmatched list, which will get store credit
            -A matched list, which will be refunded in kind.  
        
        The last two, I will have already.  The first  item, the revised Invoice list, I could then push directly to the existing invoice list.

            -So basically, this is a question of whether I want to update the invoice list or not.

            Argument in favor:
                + I can probably do it.  Searching for matches is going to be harder, and sorting prices highest to lowest is going to be MUCH harder, but I think I could do it.

                + If I ever do want this feature in the future, I will have to do a lot of uprooting to get it.

                    -Or will I?  I'm not consuming the invoices that aren't matched anywhere, so I think the only code affected would be the matching function.  

                + If I am every showing code in a portfolio review, I might get asked why I don't have this.  "It was too much work" might be a difficult answer.  

                I think I need to get moving on this.  Pushing unmatched back into the store is deep into "Nice to have"

                I'm good with back-burnering it for now.

    For the time being, I'm going to move the function into a separate file.  I'm really just testing the JS code and this makes it a lot easier to debug in the terminal.  

        -Having spent some time with it, I'm really, seriously considering the option to just look for matches in the invoice list directly.  The path TO the items sold is a little longer, but I really don't think it's all that much harder.

        -Do I want to account for the possiblity of more than one price for the same item on an invoice?
            -on the one hand, no.  On the other hand, it's not that much more code?  

24 Nov 2022

    I need to do a little thinking here.  
        -AFAICT, I should NEVER reference anything from the two loop arrays other than keys.  
        -I should never be modifying anything other than the three derived objects - Unmatched Items, Modified Invoices, and Matched.
        -AFAICT, I should only be referencing these as well?


    Well, kind of hard to believe but I've finally got it working.  At least on my sample data, it handled a variety of scenarios.  I think I've been working on this damn thing for at least 2 weeks.  
    
    -I'm gonna try leaving this one as a module and importing it into Returns.  I think it will be a little easier to debug if it's a standalone file?  

    -I'm losing velocity here and I know exactly why it's happening.  I'm afraid that if something goes wrong in the Returns context I will have no way to fix it.  I'm riding a high from my progress and I'm afraid of the crash.  Litany of Gendlin.  I might as well find out.

    -So.  It is KIND of working, but I am getting some weird behavior.  It *LOOKS* like I am somehow modifying the session items and invoices, which should never happen.  

        -I notice I am confused.  What is happening that I do not expect?

            -First, the sessionInvoices state is being modified, which should never happen.  Even more frustrating, session Items are not modified if they are a lower quantity but they are if they are higher?

            -Third, if I enter an item quantity lower than the qty on the invoice, that item and the corresponding quantity appear in Matched.  The item appears to be finding a match.

            -Finally, if the item quantity is higher than the invoice qty, no matched item appears in Matched object, but the unmatched Item is reduced by the correct amount.

        -I don't know what is going on, but the first problem seems the most significant.  No matter what, I need to figure out why that is happening because matchmaking should NEVER alter session states.

        -I'm gonna call it a night.  I'm actually feeling pretty good.  This is a puzzle, but I'm pretty confident the matchmaker is working fine and that was by FAR the most uncertain part.

26 Nov 2022
    -Back in the saddle after Thanksgiving.  NGL, I'm expecting today to be hard.  I know that I am especially vulnerable to time-wasters when I'm not sure how to procreed.  I can't get success-feeling from good sources so I give into my hunger for stimulation from crap.  
    
    -Today can be a good test of meta problem-solving skills.  This really is a unique opportunity to see if I can make good decisions without knowing the answers.  I want to get good results, but all I can control for certain is making good decisions.  

    -The good news is that I HOPE this will be the last hard thing I have to do for a while.  

    -How to attack this problem?

        -I could attack the problem with a bunch of console.log()  It's crude and offers a pretty limited view of what is happening inside the app, but I know I can make it work.

        -I could look more into how to debug React applications.  IF there is a really good way to do this, I think it would be my ideal.  It was so helpful when I was making the matchMaker() module to be able to step through the code line by line, make predictions, and see all the variables changing.  

            Risks:
            -I don't actually know if this will help anything.  I could just come up empty and have nothing to show for the time.

            -I don't actually have a clear picture in my mind of why my current de-bugging tools are unsatisfactory.  

        -I could re-structure the app.  I actually have no idea if having lots of logic in the Dispatcher is good practice.  

            -Like, I could make a case that what I am doing is clear because I've got one action type per input.  User adds an item => do every step involved in adding an item.  

            But I don't know if that's right.  Maybe having one top-level function per action, and once dispatch action per state-change is more logical?

            -This seems like the most risky option.  It is DEFINITELY a lot of work, and without knowing where the problem is coming from, I don't actually know if this solves it.  

            -It also feels like giving up in a way I don't like.  It isn't actually identifying the problem.  It's just throwing away a lot of code and hoping that the problem was contained in what I got rid of.  Worth a try if I am TRULY stuck, but this ought to be a last resort.

    -Here's what I'm going to do.  I'm going to allow myself 30 minutes to do Googling on how to debug React apps.  Highest potential payout, and if I whiff I'm not out a lot of time.  If it looks promising I can extend, but if not I will then move onto console.log()

    -Web searching has indicated that eitehr IDE or Chrome dev tools are common approaches to debugging, although console.log() works too.  I think the case for the dev tool debuggers looks stronger because the people who prefer it generally described why, while the console.loggers didn't really elaborate.

    -Next question is - debug in Chrome, or in the IDE?  


    -OK, so one issue identified in Chrome:  I am passing through a LOT of React framework code that I didn't write and don't especially care about.  This might have been the reason I gave up on this in the past.

        -My working hypothesis is that at least at macro scale, I shouldn't be stepping though line by line - I should be using F8 to jump to the next breakpoint and then crawl line by line if I need to.

    -Current working understanding:
        F8 - either pauses or resumes operation.  I think this proceeds to the next stopping point?  Generally, this jumps me to the next breakpoint?
        F10 - goes to the next function within this particular scope, or up one scope level if it is the last?
        F11 - most specific, step by step ahead?

    -By clicking the appropriate JS filename in the Call Stack tree, I can switch scopes.  This is really helpful because I previously didn't know how to see values outside of the current block.

    2:00 - Made no progress on the problem, but I feel good about the decisions I've made so far.  I've engaged with the work.  

    OK, I think I've identified where at least one problem is occurring.  After I've evaluated the larger of the two qtys, AFAICT that is when the bad change happens.

        -Somehow, when I change the Invoice quantity, I'm changing the actual invoice, not the thing I thought was a copy.  Even nuttier, the change is happening in the Context, too.  How is that even possible?
    
    -According to what I've found, I should not be mutating state in the reducer function.  Why?  No idea.  
        -Am I mutating state?  

    -This article has some clues:  https://dev.to/il3ven/common-error-accidentally-mutating-state-in-react-4ndg#:~:text=In%20simple%20terms%20it%20means,Here%20are%20two%20examples.

    -Assuming I comprehend correctly, this is telling me 2 important things.

        -First, consider: 
            const newState = oldState;
            newState += 1;

            According to this, modifying the newState will actually modify the old state.  It's definitely possible that I'm doing that somewhere.

        -Second, using the Spread operator should prevent this:

            const newState = {...oldState}.  Now, my new state should be a separate copy.

        -OK.  I have an idea.  I wonder if this is all happening because I am not spreading the Invoice Content into a new object.  If I am modifying the context, that might explain why the Invoice state is changing.  It pulls the details from the context, so if I make a change upstream then I might pull in the bad change later.  It would also explain why I'm getting less weird behavior from items, because although I made the same mistake, I'm not changing any values that are stored in the Item context.  Let me at least give it a shot.

            -Didn't work.  Still having the same error.

    4:45: did some Googling and took a walk and I think I have at least a partial answer.  

        const Alpha = {
            val1: 20
            val2: {
                a: 30;
                b: 40;
            }
        }

        const Beta = Alpha;

        Beta is not a copy of Alpha.  Beta is just a pointer to Alpha.  If I make a change to Beta, that change appears in Alpha, too.  If instead I try:

        const Beta = {...Alpha}

        I can change the value of val1 and val2 in Beta without affecting Alpha.  But if I change the values in   Beta.val2.a   those changes will actually appear in Alpha.  Level 1 and level 2 are now separate, but Level 3 is still pointing back to the original.

        This makes sense.  It explains why, despite all my redundant top-level spreading, I'm still modifying the quantity in the product-context store.  Unless I spread absolutely every level, I'm still pointing at the original value.

        That also explains why some of the guides I found encourage us to make states as flat as possible.

        So.  What to do.  

        -I could manually spread everything, but that seems like a huge pain in the dick.  Or is it?  I really just need to spread the Invoices, and I think I just have to do it once?

        -Related: I could try and flatten the invoices, but it could get kind of fucky with the products, since I never know in advance how many there are.
        
        -There is a workaround, which seems to involve converting the object to JSON and then parsing that JSON.  That apparently works because I've seen it suggested in a few spots.  It does seem kind of hacky and apparently doesn't work with methods or circular references.  Right now I don't THINK I have either, so this is the lowest-impact way to move forward.  

        -I'm sure I could find some kind of 3rd-party library that does deep copies.  Lodash CloneDeep appears to be pretty popular.

    That brings me to my second question, whether I should have multiple reducers (called 'slices'), each controlling one property of the state.  I like the idea, but it seems like I would have to do a lot of learning to make it work.  

        -OK.  It's almost 6:00 and I'm losing steam here.  I think what I am going to do is try to get the deepClone working and then call it a day.

        OK.  It's working.  I tried some tests and didn't find any unexpected result.  I think it is actually working.  Let's call it a day.

27 Nov 2022
    Sunday Fun Day!  A couple things I need to be able to do.  I need to:
        X-When a product LI is clicked, console.log its details
        -Create a side panel that displays product details when given a product number.
        X-figure out why TF my icons keep shrinking.
        -Add buttons that allow me to track disposition.
        -Store disposition in state
        -Validate disposition requirements.
        X-Get rid of Vertical Nav component.  It's not doing anything.
    
    For the side panel:  I think I need to change the ReturnsIndex file to accept two additional payload properties.  

    a little stuck.  Right now, the dispatch function of the ReturnsIndex container only accepts which panel to switch to.  It does not accept details.

    I think I could just have a payload.contents property in my state.  I actually don't think I need to maintain it at all.  I just need to get it up so I can pass it back down to the item details page.  

    2:45 - panel navigation is now working correctly. 

    3:25 - I was feeling a little disinterest before my break, but I'm feeling pretty good right now.  Engaged and ready to get back to it.

    4:15 - I no longer feel good.  I'm feeling high effort gravity and a low comprehension radius.  Gonna finish this session and call it a day.

28 Nov 2022

    Next, I think I need to add the disposition state.
        -There are 7 possible damaged dispositions plus one Didn't Want / Need.  
        -The sum of all dispositions cannot exceed the number of entered items.  
        -DW/DN can be calculated last, since it is just the total number minus sum of all DD dispositions.

        -When D/D is selected, there should be a default active state.  Either the first one in the list, or the last one selected.  

        -Selecting any disposition should display its current quantity in the input field.  Changing the input field should change both.

    
3 Dec 2022

    -Back to the real work! I need to remember that the 4 (and even the 20) are not time limits.  I think that for this, some extra writing could really save me some work. !coding !== !working.  Today I would really like to get Item Disposition done.  A few things I know I need:

        X -Disposition is going to live with the scanned items, so I know I need a way to store it there.  I also need a dispatch action to handle it.
            -Should the disposition include ALL categories, or just the ones that have a value?  
            -I think I'm going to have it track all values.  That will make the code a little cleaner.

        -How to incorporate disposition into the matching?  I don't know, but this only really affects the return price so it's not super urgent.  Another thing to keep in mind - AFAICT, I really only need to track the total quantity and the Defective quantity.  If I really want to shortcut the process, I could just track those.

        -The real action is going to be in the disposition 30 panel itself.

            In the 30 panel state, I need to store:
                -Which tab is active
                -If Defective, which disposition is active.
                -I need to track a dispoObj, since that part of the payload is what will be used to update the session Item disposition.  
                
                

            -I need a way to read the stored disposition from the Session items state.  
            - I need a way to get the sum of all item dispositions, and that sum cannot exceed the total item quantity.
            -Whenever a Defective disposition is selected, I need to:
                -read its current quantity from the Session Items Disposition object.
                -Display that quantity in the Sessions Disposition object.
                -Check that this dispo quantity + all others does not exceed scanned quantity for this item.
                -Update the item.disposition[whatever] property.
    
    -12:20 - not doing super great on time.  I'm definitely distracted by that Spinnaker Bradner watch I just found, plus the fact that Mom is waiting on me to make a Christmas request.

        -I think the thing to do next is to handle the Tabs and whichever Defective button is selected in the ItemDetails page.  I know I'm going to need that and it doesn't require me to make any hard decisions right now :)

    2:00 - I am kind of hitting a wall here and I suspect it's because I haven't been eating.  I think the actual most productive thing I could do is take a few minutes, slam some food, and take a SHORT walk.

    2:30 - back at it.  First little task will be to populate the dispo buttons and make them activate with a click.

        -Now, potentially the hardest task.
            - the thing I want to do is pull the quantity directly out of the session Item state, and have the input update it directly.  The reason I want to do this is because AFAICT I don't actually have a button to submit this form, and I think that would be frustrating to have to remember to submit or else your item is lost.   Can it be done?

        -If I can get it working, a QoL addition I want to add is to have the test reflect the qty scanned.  But that is later.

        -I might also move the Quantity input into the Condition Picker?  It's not like it can be interacted with elsewhere?

    5:55 - I have actually accomplished what I set out to do today.  I'm not sure how it happened except I kept doing the next thing and suddenly the problem was gone.  I'm also very proud of myself for identifying the fact that I was replacing the state with just the item and disposition.  I feel like I could go for another three hours, which experience has taught me means that I'm about 40 minutes from being sick of coding :P

    I also learned a new pattern.  You can real-time update an outside state just as easily as a state within the component.  No theoretical reason why it shouldn't work, I guess, but I'll be a lot more comfortable in the future because I know it works.  When I'm taking my walk and thinking about how to be a better coder, I should think about why this correct answer wasn't my initial thought.

    Maybe it's the Adderall but I'm legit feeling amazing right now.  I would have accepted partial progress as a good day, and I actually solved the whole thing.  Now I just need to decide which QoL improvements are my highest priority.  Options are:

        -Figure out the quantity validation.  This should probably be the choice as it is the only one that is actually necessary for the project to function right.

        -Show quantities on all the disposition buttons.  Might be worth putton off because it's not necessary but would be a GREAT get-into-flow starter for tomorrow.  Might need useEffect because I don't want appearance changing as the user is typing.  This will be the trickiest part for sure.

        -Figure out how to use refs.  There are a number of inputs that I would really like to autofocus given various conditions, but again, nice-to-have.

        -The buttons do need CSS, but it's tempting to leave it out since it doesn't affect anything else.  Necessary, but no dependencies.

        -I actually do still have a frog to eat, and that's figuring out where to put the input field.  I could definitely leave it.  I actually probably should leave it, because it reflects the app as it currently exists.  

        -I should also change the input so it's inactive when the Unwanted tab is selected.  Right now, any input there changes the current Reason quantity, which is not what I want.  Also, Didn't Want should never be adjustable.  It's just what's left over.

        -At some point I do need to go through ItemDetail30 and make sure it's well-commented.

    Gonna do the quantity validation.  It's the logical choice.  First, I think this validation can live in the Item Details component.

        -I will need to loop through the disposition array and get the sum.  But when?  Maybe prior to input?  I think I can set a max value to the input field, and that would be nice to know.

        -The other question is a UX question. 
            -First, how do I handle a situation where the user inputs a quantity larger than the undisposed quantity?  If I just set a max they can't screw it up, but there's no indication why they can't enter the number they want to.

            Also, I think I need to use the max?  The state is being updated as they type, so if they exceed the max, I can't have them just going ahead with that value in the input field.

            Finally, how do I show the number of undisposed items?  If you don't know that, you don't know the max you can enter.

        -Almost right on cue, I am sick of coding.  For tomorrow:  I want to start on some standardized text styles.  I think I will apply them to this work and MAYBE add them retroactively.
    
-4 Dec 2022

    Today might be a struggle.  I slept like absolute shit last night because I lost control of my mind and couldn't stop thinking about that Haikyuu point-buy-team building game.  I also need to not think about the game today.  It sounds funny to say that I have to avoid fantasy football like heroin and I do play it for laughs, but like, I legit lost control.  "Just a little more, I'm sure this next idea will crack the problem"  I genuinely wish I'd never found it.

    OK, on to the work.

    First things first.  I'm going to make a list of some important pages, check them for common text styles, and try to create a CSS file to capture the important ones.  This will not be fun, but I'm redoing a LOT of work with these damn text styles and I would really like to stop it.  This will not be fun, but if I don't do this now it's going to be re-work later and this task MUST be done at some point.  At the end of 20, I would like to have a list on the way.

        Just wrapped up the 20, and I think I have the list.  Honestly doesn't look as bad as I expected (although that's partially because I haven't built as much UI as I hoped.)

        Next thing to do is see if I can find some guidelines about how to name things, like what tags to use and such.

        -Looks like it's just <p>, <h*>, and possibly label.  

        -I think the next thing to do is to create some default elements in a CSS text style file and get after it from there.  I'll do one more 20-minute run and then start a longer one for the reassignment.

        -OK. Gotta go through the files and look for text fuckery. This task is going to suck, but I just need to dive in and make it happen.  One way out!

        -related to nothing, but I also need to remember that part of the reason the UI hasn't moved in a month is because I also had to solve the flexbox / table scrolling problem.  That involved a lot of knowledge-building and rework.  

    3:15 - back after it.  I'm proud of myself.  I kept my short break short, and I'm still feeling pretty good.

        -I'm gonna get the 3 completed 30-panels done, and then dig into the disposition setter.

        -Ok, all the cleanup is done.  I'm back at the starting line.  

    4:15 -Starting to feel a little loss of steam.  I'm gonna go until I'm not having fun but I already consider today a win.  Those app-wide styles were something that needed to happen.

    5:00 calling it a day.  Gonna take a walk and think about what to do next.  I can either add in validation or consider what would come next.

5 Dec 2022:  69-420 for work.  I'm planning to make sure my Figma screens for the SOS restocking fee are correct, then I will find an appropriate location and post them.  I need to confirm with Kristin that we can ask our outstanding questions in tomorrow's Returns team meetings.

At some point today I need to message my doctor and get the ball rolling on next steps for my knee.

The first coding thing I should do is box up the process for Github Pages,

I think if I really blaze, I could complete my work tasks in the 20 section :)



-7 Dec 2022.  
    Well, for some reason, I seem to have lost my styling changes in the Item Details section.  I'm not sure how, because they were present in the working protoype I showed Liz.  And also some but not all of my styling in RefundTotal?  And my notes from 7 Dec.
    
    I was at least able to roll back and address whatever the problem was with the ItemDetails.

    Next, I need to figure out what's wrong with the RefundTotal.

    Remember to change Returns reducer to make sure it re-evaluates if the disposition changes.

10 Dec, 2022

    69-420:  I think the DispoMatcher is actually in pretty good shape.  I got about halfway through it on Thursday and it was mostly doing what I expected.  The 'Watch' section in VS Code is really nice, and I need to find its equivalent in Chrome.  (Update:  the feature exists in Chrome.  I haven't used it yet, but the terminology is the same)

    I also feel slow, dumb, and heavy, so worried about today's outcome.

    -Get the matching module to account for dispositions.

    -Add a check to the Dispositions to make sure that total dispositions are always equal to items entered.
    
    -Figure out how to handle the Unwanted items.  I either recompute every time or else I need to store total items entered separately.  

    -Make sure that changes to dispositions are triggering the Matching process.  IIRC matching only happens when an item is added.
        -A side note to this process.  I might want to ditch having a separate Action for changing dispositions, and just handle it as an 'ADD_ITEM'

    -I think I'm going to start with the Quantity / Dispositions question.  It's not a HUGE change, but it will affect how I do the matching so I might as well do it first.

        -Right now, I'm kind of thinking I should track total quantity separately.  I need it for:
            -the display table.
            -I need to have a total to calculate Unwanted, since it's always the remainder.  If I don't store it, I have to re-derive it.
            -I need to store a total to calculate the upper limit.
            -In the MatchMaker, it would simplify the check if there are any items remaining.  

        -Looks pretty clear right now that I should store the total.

        -Next question is how to store Unwanted.  Options are:  

            -A method that, by hand, names all of the properties EXCEPT Unwanted and sets Unwanted to total - (result of the method)
                -This is pretty reliable but kind of crude?

            -Copy the object, delete Unwanted, sum all remaining, set that to index?

            -Put Unwanted in some notable position, like first.  Make object into array, delete first term FROM ARRAY, then assign Unwanted to that sum?

            -I was going to say that Unwanted is calculated only once, but I guess that isn't true.  It's also calculated when an object is created.  

            -The reason I am stalling is because I don't know how the object I plan to create will behave.  I suppose the correct thing to do would be make a test object and check on that.

    1:00.  If there is any easy way to set a property's value from within the function, I haven't found it.  What to do?

                -I don't technically have to set the value of Unwanted within the object.  I could create the empty Disposition object and then set the value of Unwanted from outside.  

                -It's also not a requirement to have Unwanted within the object, but it makes the Matching logic more complicated.  

            -Let me back up a step.  In the ItemEntry component, right now I am currently just adding a quantity.  I suppose that either here or in the actual ADD_Item action, I could just automatically add that quantity to Unwanted.  
                -but what does that solve?  
                -I guess that IF I want all changes to an item to be handled in the same action, I need some clean way of turning an item with one disposition into an item with another.
                -the reason that is good is because if all dispositioning is happening in the same place, I could do the Unwanted calculation there.

            -I also really could handle it in the Matching system.  Whenever matching is called for, I can just calculate Unwanted there.  
                -My feeling is 'I don't like it'.  Feels dirty somehow.  It feels like I should always have the state as complete as possible.  However, I don't really have a better answer and this gets me moving.  
                
                I suppose I could justify it by saying that 'Unwanted' isn't a real quantity.  It's not being used anywhere before the match.  
                It's not a duct-tape workaround of my limited knowledge of objects, it's a clever solution to simplify the logic of the Matchmaker :P

            -Also, potential problem:  what happens when I add new items to items that already have dispositions?  NVM, past-me already handled it :)  Preparation is a gift to your future self :)

    -3:15  You are stalling.  You don't know what problems you'll encounter and you're afraid you won't be able to figure out a solution.  Don't be scared.  We've got the debugger.  This is so much easier than how we used to debug.  Get in there and press that green arrow.

11 Dec 2022 - 
    69-420.  The past two weeks have taught me that the name is important.  Every time I'm tempted to skip, my inner 14-year-old says "yeah, but...hehe...69-420...heh..."
        The VERY first step is to get in there, cycle through the Matchmaker, and find out where it's all going wrong.  I feel like we're close.  I would not be surprised if I had enough time to get to something else this afternoon.

        -The next next step is going to be to look at the Disposition inputs.  It's very important that the total dispositions do not exceed the quantity entered.  
            -I think the way to do it is to use the Quantity as a maximum value.  The logic for how to handle a larger input is still TBD, but I've at least got the component set up to show an error messsage.
        -The last little feature would be to make the buttons show show the total number entered.  this is acutally not a great solution, but I'll have to live with it.
        

        -A small little morsel:  the Item Quantity input should have a minimum value of 1.  Nobody should be entering 0 or negative numbers.

    2:30.  OK.  Decision time.  Right now, the Matchmaker appears to be working, but it isn't 'squeezing the air' out of the disposition objects.  Right now, if I match all of the items in all invoices before going through all of an item's dispositions, there are going to be some dispositions with a value of zero.  I don't know what the downstream effects (if any) are goign to be, but it feels sloppy.  Options  are:

        +Do nothing.  I'm spending time and focus on something I don't even know will be an issue.
            -This feels sloppy.  In my mental style guide, each step in the process should do as much refining as is practical so as to not create problems down the road.
                +If we're doing the next option, this is fine.  In fact, this is fastest.

        +Change the input so that I don't put in empty dispositions in the first place.  If we're REALLY sticking to the aforementioned style guide, THIS is where that pre-fining should actually be happening.
            -This will happen at some point, but I just want to get this damn module working and if there's a problem I now have to chase it through three components and not 2.
            -I'm PRETTY sure I can do pre-finement in the Product Details section, but not 100%.

        +Squeeze in the module.  I think the place to put it is right at the top.  I have to loop through each dispo object anyways because I'm summing their values to get Unwanted.  I could add in a quick condition that deletes any properties with a value of zero.  That will save me quite a few loops AND it ensures that the squeezing happens even if there are NO invoices that have the product.
            -This is spending time on a feature we hope won't be in the final version.
                +Just do it and add a big old comment to take it out once the pre-finement is set up.  And maybe a note in the running To Do list so I don't forget.

    I'm gonna go for Option 3 and do the squeezing in the module.

    4:05:  Fuuuuuuuuck.  Edit: NVM, not fuck.  If the disposition quantity is greater than the invoice quantity, the program WILL loop and check the next dispo, but after that fails it will try to match dispositions from the top in the next invoice, and it will start with the disposition that wasn't fully matched previously.  That was scary.  I thought I was gonna have to do some deep rebuilding.

    4:55 - OK.  I put the new module into the app and tried a few things.  I still need to figure out how it is that I am going to call the Matchmaker when disposition changes, BUT!  The matchmaker is working!  I admittedly didn't put it completely through the ringer, but it did appear to be making its matches correctly!  Excellent!

17 Dec 2022
    I've been sick the last few days, hence the lack of progress.  But I'm feeling good enough to get back after it!  Now, the eternal question - what to do today?

    -One thing I think needs an answer is a plan for dealing with the Scanned Items state.  Options:

        -Have one reducer for all additions.  In every case, payloads to this reducer carry everything they need to re-assemble the new Item object and then replace the existing session item.  And remember, payloads are only coming from two places - Add Item or Item Disposition.

            -I think I'm kind of leaning this way right now.  I had this idea that separating the two would be a lighter operation because it was only updating the disposition, but that's not actually true.  In both cases, I have to clone and replace the entire item state.  

            -It's also a much simpler conceptual model.  In fact, I might even change the name to EDIT_ITEMS because that's what I'm actually doing.  

        -OK.  We've got a direction.  The next thing to do is figure out how to handle the incoming dispositions.  My cases are:
            -A new item is added:  Add a new, empty set of dispositions.
            -An existing item is added: The dispositions are whatever that item already had.

            -The other thing I should keep in mind.  I'm currently envisioning having a whole empty Dispo object that I squeeze later, but it would be cleaner to ONLY have dispositions for items with a value.
            Maybe the correct approach is to do it with the whole empty item for now?  I can already do squeezing in the Matchmaker so it's not like this will be a problem.

            -All incoming items have a Disposition payload.  If the payload is empty, use the existing payload.  Else, use the payload coming in.  
                -I have to remember that there will never be two payloads with values being added together.  Any payload with numbers will be coming from Item Details, in which case I am just cloning the existing dispositions, changing them, and sending them back.


            All items from the Add Item 30 panel will come in with an empty disposition.
                -That's not quite right because 

            -mind bouncing around a lot right now but at least I am not bored!\

            -If the incoming item has a disposition, use that disposition.  Otherwise, use the existing dispostion.  If there is no disposition, create the empty one.  

            This will work.  I just have this feeling there's a simpler logical approach.

            -If the payload contains a disposition, that is the new disposition.  Otherwise the disposition is the old disposition.

            OR - {... oldDispo, ...newDispo} ? I think if you call the spread operator on undefined, you just get an empty object?

        I did some tests and it works.  You can spread undefined into an object and it will just return an empty object.  OK.  So I think that's the new logic.

        More decisions.  I tried making a new Disposition Input with a fake name, and it actually did update the Returns state with the fake name and value, although I'm getting some 'Controlled State' errors.  (NVM, solved by providing a default value of 0)

        Here's what I think.  I guess we could do the squeezing here, but I don't see any problem doing it in the Matchmaker.  I still have to have the squeezing because even if I start with an empty Disposition object (i.e. NOT a full disposition object with all values set to 0), I can still have disposition categories with values of 0 - if I fill the field and then delete it.

        I think this might be time for a branch, since I think I understand this all but I could run into a disaster.

        OK.  Time to stop and reflect.  I think I now have the ADD_ITEM function working correctly.  I also learned some REALLY useful new tools:

        The first is the Nullish Coalescing Operator (  ??  ) It's similar to the || operator, but the Or operator returns the second term if the first term is ANY falsy value, while   ??  returns 2nd term ONLY if the first term is null or undefined.  If it's falsy, that gets returned.

            false || 13   -- returns 13
            false && 13   -- returns false

        The second thing I learned is about the TypeError.  I think I've unknowingly been running into this a lot.  TypeError occurs when you try to do an operation on an element that can't support it.

        const one = undefined
        one.two = abc

        I won't be able to read either of these because the program with throw a TypeError before I can even get to the end of my declarations.  the [ . ] operator means "the following property out of the proceeding object.  Well, undefined isn't an object!  There's no property to get,and so JS won't let me try to define it, even if it might become an object later.

        that brings me to the third thing I just learned, the Optional Chaining operator (  ?.  )  This checks if the preceeding term is defined before evaluating its following property.  So from the previous example, if I write
            const three = one?.two
        then   three   will be undefined instead of giving me an error.

        This could really clean up my code because I have SO MANY 'Do you even exist' checks before doing things.  Wow.  No matter what else happens, these three learnings have already made today a win :)

    4:50 - I'm now successfully updating the dispositions via ADD_ITEM.  I've now run into another problem.  No matter what defective reason I have selected, entries in the input field are just updating the default reason.  The defectiveReason state does change when I switch the tabs.  

    OK.  Sweet.  It's now working just like I wanted.  Maybe time to test some matching?

    Looks like we've got another problem.  My Unmatched invoices aren't totaling up correctly.  
        -When I add the first disposition, everything's fine.  Unmatched shows that disposition and quantity, and then whatever's left is recorded as Unwanted.
        -When I add a second disposition, it appears correctly along with the first, but Unwanted is now gone.
        -Adding additional dispostions also works as expected, but Unwanted still doesn't show up.

    My very first thought is to do the Unwanted check in the ADD_ITEM case.  I don't feel great about it because I haven't actually identified the problem, but I guess I should try it and see if it works.  I'm not hacking, just gathering a data point.

    It's still not working, but I have a hunch I know where it is and so I've got a good place to pick back up.

    Ha. Well, I changed the ItemDetails30 to make pass back integers and not strings and now it's working perfectly?

    Well, not perfectly.  Deleting an invoice isn't working, but that REALLY is a problem for tomorrow.

18 Dec 2022

    OK.  Did a little more work last night while the pizza was cooking and it appears that invoice deletion is working correctly.  I'm not 100% sure but it really does look like the Matching is working correctly.  

    Next two tasks on the menu.  First, I need to make it so that the total qty of dispositions does not exceed the qty of items scanned.  

    I also need to figure how how to handle the deletion of the item currently being shown in Item Details.  Ideal behavior would be that if the item is deleted, the 30 panel would then navigate to the Item Entry screen.  
        -Ha.  I legit expected to struggle with this one, maybe even taking the rest of the day, but it's done.  

    11:40 - I'm about an hour in and I feel really good.  I don't quite understand it because I slept like shit last night but I feel engaged and smart right now :)

    OK, I've been kind of fiddlefucking around with getting the display state to show empty instead of zero and not dispatch any falsy values but that's really not blocking any progress.  It's just not as clean as I would like.

    What I need to do is figure out the sum evaluation.  
        -After fiddling with the HTML max property, it appears that it doesn't actually restrict the user from entering the value.  So I could have a total of 20 items, and I'm actually not restricted from putting 21+ in the input field.  In a way this is good because it makes my decision for me.  I will have a check on the input field, and if it's out of range I will show an error message and not dispatch.  I think.

        I really do not like that there isn't a form submit button.  I can't really check and make sure everything is tight before I send it.  The problem is that each input is representing 2 things that aren't necessarily the same.  They're representing the user's input, and also the value in the system.  

        I wonder if I could separate them.  Like, every time the page is refreshed, I get the existing disposition object.  Whenever there is a change, I check the validity.  If everything is valid, I dispatch the update.  If it isn't, I do not.  So far, so good.  That lets me do everything I want.  

        Here's the one issue I see.  If the user inputs a bad value, they don't necessarily know they haven't changed the value in the system.  And if they navigate to any conditions that have values, those other conditions are going to show errors, too.  

        I also need to be careful not to over-solve this problem.  At this time, I've already departed from the live app, since that doesn't let you enter more than one disposition.  I hate this input style because I don't think it represents the business logic, so any work I put into this current version is work I am hoping to throw out later.  

        OK, absolute minimum:
            -Conditional dispatching.
            -Show an error if conditions are exceeded.
            -I need to create an invalid input field CSS style

    1:20  Definitely losing speed here.  I'm gonna make a quick mail run.  Maybe that will clear my head.   

    2:30 - Not exactly the break I was hoping for, but I'm back after it.  I think I'm gonna do one more session and then call it a day.  Let's re-evaluate.
        -I've got the sum-checker working (I think)  I need to figure out WHEN to check the sum, and my responses to the potential outcomes.
            -I think once an input is made, we check that input's value against the unassigned quantity.
            -If the unassigned quantity is smaller, we run our Error procedure.  We DO NOT dispatch, although since the values are linked I don't actually know what happens to the contents of the input field.
            -If the value is legit, we dispatch and proceed as normal.

        -OPTIONAL:  Prior to dispatch, I could also squeeze the upcoming dispositions object.
            -DOUBLE-OPTIONAL:  That would potentially allow me to go through and have 

    5:40.  Going to stop for the day.  Haven't tested hard but the ItemDetails disposition setting appears to be working.  It's adding to the total and not dispatching any input values that would push it over the total.  

    However, the inputs are behaving weird.  Like if I'm near the limit and I try to enter 12, it will accept the 1 but won't let me add the second character.

    For next time:  I think what I need to do is get the item dispostions from the session state.  I need to then CLONE that object in a local state, and do modifications to the local state.  Whenever the local state becomes valid, I dispatch to the session.  Until then, it stays local.  

    That's a pretty cool model.  I should probably remember that for other things.

    6:45.  My dispatches to the Returns Session object are one step behind the local state and I don't currently have the brainpower to figure this out.

    For tomorrow - try putting the dispatch to Returns outside of the onChange loop.  

20 Dec, 2022
    69-420 I know EXACTLY why I don't want to start today :)  I don't truly understand the relationship between state and re-rendering, which means I don't actually know why my app isn't working, and I don't truly understand the de-bugger, which is why I fear the frustration of it behaving unpredictably.

    That said, this does need to be solved, and if I can't do it the way I have in mind, I have plenty of dirtier alternatives.  IMO first move should be to do a littl reading about state and rendering and see what I can find.

        -OK, from the documentation:

        1. The dispatch function only updates the state variable for the next render. If you read the state variable after calling the dispatch function, you will still get the old value that was on the screen before your call.

        2. If the new value you provide is identical to the current state, as determined by an Object.is comparison, React will skip re-rendering the component and its children. This is an optimization. React may still need to call your component before ignoring the result, but it shouldn’t affect your code.

        3. React batches state updates. It updates the screen after all the event handlers have run and have called their set functions. This prevents multiple re-renders during a single event. In the rare case that you need to force React to update the screen earlier, for example to access the DOM, you can use flushSync.

    That...was not a waste at all.  That was actually really helpful.  I've learned a few things.  First, AFAICT it's OK for me to be batching multiple state updates together (#3).  I thought that was my problem but it looks like I was wrong.

    Second, AFAICT, the state variable doesn't actually change when it is dispatched.  Like, the dispatch will happen, but if there's any code after the dispatch, that code will run before the re-render.  I think that's why my global state was one step behind my local state.  I was updating the global state with the local state's value, and because state updates are batched, the local state didn't yet reflect the new values.  

    I think if I dispatch to the global state with the same dispos object variable I used for the local state it should work?  

    OK.  Working correctly now, but a slight snag.  For multi-digit characters,each subsequent digit is dispatched separately.  If I enter a multi digit number where the first digit is under the limit but the second digit is over, the first number gets dispatched and the second does not.  Options:

        -It's not the end of the world.  Going over will show the user an error and directions to correct it.  Remember, we want to get rid of this whole input pattern soon.  Don't fix something that's getting discarded anways.

            -My main objection to this is that it's doing something the user wouldn't expect, and it is happening out of sight.  If I'm typing 12 and the second digit makes it invalid, I do not expect that the first digit has already been applied.  

            -OK, here's another crazy thought.  What if: on every change to the input field, I evaluate the input contents.  On every content change, I dispatch contents to local state.  If qty is valid, I dispatch it to global state.  If not, I dispatch null?  

            Right now I think that's the least bad solution?  I think it's at least more in line with expected behavior.  If my input is wrong I wouldn't necessarily expect it to be dispatched.

                Here's the snag.  If I switch to any other input while I'm over the limit, that is also going to be wrong, and it's also going to be dispatched as 0.

                -What if.  On every Damaged button click, the local state dispos object gets set to the value of its global counterpart?  Like, as soon as the user clicks away from any field, the local dispos get reset?  Quantities only get submitted if they are valid, so every other quantity other than the one they just entered will be as it was.  



        -What I REALLY want is for the local state to handle all the state changes, and wait a while to dispatch to the global state if the local state is valid.  Basically, I want Submit without the Submit button.

            -I could do it when the Product Details component unmounts, I think.  The problem with that is that if any part of the form is valid, ALL dispositions would be lost, which is shitty.  

    It's annoyingly hilarious how much every problem keeps coming back to "none of this would be a problem if there was a Submit button" 

    I also can't escape the feeling that I am making this more complicated than it needs to be.  

21 Dec 2022 

    On the docket for today:
        -Need to figure out how to display the warning, probably with a side effect.  
        -I should look into how to use refs.  I want the input field to be focused every time someone clicks one of the disposition buttons.
        -Before I get farther, I should probably figure out how to handle tax.  Like, it's not going to be fun but if I don't handle it now that could legit bite me later.

        -First.  The display warning.  I THINK I can just handle it in the input change handler?  

    12:00 - I do know why I am stuck.  I feel like I am violating DRY because I'm doing similar operations in similar places, but I don't know what would be better.  Just right now I feel not smart enough to find the patterns.  

    I also just found out that the current app DOES use a Submit button, but since I think the local validation is important and I wouldn't want to have to re-create it in another prototype, I'm just going to keep it for the time being.

    Just really not feeling the magic today.  I think I'm going to skip the redose, but I will try to work up until the painting party - which I am also not at all sure I'm going to do.

    4:50 - Got the painting party going in the background, so glad I decided not to participate.  My intuition that the existing code was flabby and repetitive was totally correct(I think).  I had a cool new insight:  since we're treating each change in the input independently, I should delete the current property being evaluated from the local Dispos obj IN EVERY CASE.  If the value has changed, the old value is meaningless.   Now I am having fun :)

    Mostly working.  Bug to attack tommorrw - I get the error message when I backspace a formerly valid number to "" in the input field.  Otherwise appears to be working correctly!

    Today started out bad and I'm glad I stuck with it.  This turned out really well.

22 Dec.  I can't remember if I already took a pill this morning, so I am taking one now.  It's either going to be a good day or a REALLY good day.

    First thing to do:  I am going to use my new debugger tools to try and re-create the error in the Item Entry field.  

    -I also need to turn off the increment arrows

    -I also need to clear out all the commented code.  That SHOULD be it for item entry. 

    -OK, looks like the problem and solve are pretty clear.  Turns out the typeof NaN is ... "number" :/   Yes, kids, Not A Number is actually a number.  Any numbers added to NaN disappear in to the void, resulting in Nan.  So, the first condition acutally failed to separate the NaN conditions, allowing a non-number value into the system.  The larger or smaller evaluation included the inputQty, so that evaluates to NaN, and because we are checking relative sizes of NaN and a number, it always evaluates to false.  My returning objects are false by default and they are never modified, so the IsValid state returns false.  Hence the error.

    And I doubt I would have figured this out without the debugger. 

    Also, I want to record this because I think this is actually a turning point in my growth.  I think I needed two additional tips to use the debugger.  The first was to use custom break points.  Because I'm using a framework, Step Into (F11) would take me through a long and incomprehensible sequence of framework code any time I used React-specific methods (like useReducer) in my code.  And also you can't step back, so if I was frustration-clicking to get through all the boilerplate there was a decent chance I would blow past the code I actually wanted to see entirely.  By using custom breakpoints, I can make sure I'm stepping where I need to.
    
    The second, related change was to set the F5 key to be 'Unpause'.  I remember having all of these frustrating moments where I would be stepping through with F11, get frustrated, hit F5 to step ahead, and then find myself back at the beginning of the program.  Well, the connection that I failed to make was that the Unpause key is different in Chrome and VS Code.  Chrome wasn't behaving unpredictably - it was refreshing the page, which is what browsers are supposed to do when you hit F5.  I think that was also the source of a huge amount of frustration.

    Finally did it!  input validation is finally working just how I want it to :)

    -The next thing is to figure out how to handle tax.  I really do want to move on, but the RefundTotal component is used in other places and if I don't address it now, it could cause rework later.

        I am HOPING this shouldn't be too hard.  I THINK all I need to do is add a   tax   property to each invoice product's object, next to price and quantity.  I'm representing "How much you paid, and how much of that was tax"  When I am matching an object, that price and tax can just be copied together.  With quantity, I can calculate the total tax and total price.

        I don't want to go with a single rate because, like I saw in Connecticut, not all products have the same sales tax.  Like if a state has a sugar tax and the customer bought a soda, they would pay different from the normal sales tax.

        -I've also realized that the TRUE full form of this product would accept multiple payment methods on an invoice (like using up the last of a gift card and then paying the rest in credit) and might need to have multiple quantities per item, but I don't want to have to deal with that right now.

    -instead of thinking in my head, I suppose I could think on paper.  
        -I did what I needed for the matchmaker.
        -I'm now looking at it and I want to make 2 changes.  
            -First, I want to use the squeezer at the start.  I think this is actually what I cloned the squeezer from.  This one I should probably do.
                -I might also change the output names.  Right now, the squeezer is only used in 2 places.  Again, now would be the time.  

            -Second.  More dicey - I notice a lot of repetition in object values I'm referencing: like  one[two].three[four] which I could and probably should clean up with variables.  BUT.  Do I really want to spend even more time on the Matchmaker?  

            -If I'm going to do it, now would be the time.  I'll just be adding dependencies later and it will get harder to change.

    -Seems to be going OK, but I ran into a bug where an item matched and it had an empty dispos obj in its array.  The item was 200, qty was 4, and I had AAA, BBB, and CCC invoices scanned.

    -OK, got it.  Matchmaker is now working, I put it through a couple scenarios, and so far it is working as expected.  

    3:00 gonna have some Soylent and get back to it.  I feel pretty good but I also feel like if I lose momentum it could be hard to get back.  10 minute timer, go!

    UGH.  For fuck's sake.  Now something else is happening in the matchMaker.  

    OK, problem fixed.  
        A couple of takeaways.  First.  I am a little concerned about the fact that I still don't REALLY have a conceptual model for what the Matchmaker is doing.  I really wish I could conceive the fractal pattern.

        Second.  I REALLY need to remember to not do multiple changes between commits unless I am REALLY confident.  I took a LOT longer to solve that problem because I assumed the problem was truncating my object 'addresses' with variables, when it was actually that line that check if the invoice still contained any of the item in question.  

        Also.  You know what?  Good on you for noticing the problem!  You at least know enough to know that a matched item should NEVER have 2 of the same dispostion in two different arrays.  The Matchmaker clears out every disposition sequentially, so that can never happen if it's working right.
    
        -FINALLY for the Returns Total.  Feels weird to be looking at this again, like it was so long ago :/

            -I now think the Return value calculator should be a separate module.  

            -First, we need to get the Matched Items from the Returns state.
                Loop through each matched item
                    Loop through each item's array of matched objects.
                    For each object, apply the Adjuster()

                    For each Matched Item, we should get:
                        Total paid sum
                        Tax sum
                        Adjustments (if any)

    SessionItems: raw count of all the items scanned in.
    SessionInvoices: raw count of all invoices being considered.
    matched_items: a list of all items that have been matched.
    unmatched_items: a list of all items that have not been matched.
    
    returnTotal: {
        refunding: [
            {
                orignalTender: "cash"
                refundTender: "store credit"
                refundAmount: 123.45
            },
            {
                orignalTender: "Visa ****1234"
                refundTender: "Visa ****1234"
                refundAmount: 8.76
            },
            ...
        ],
        refundTotal: 98.13
        subTotal: 78.10
        tax: 10.03
        adjustment: -10.00
    }

    So.  

    MATCHED_ITEMS will take SESSION_ITEMS as its only input.

        RETURN_TOTAL will take MATCHED_ITEMS as its only input.

        Adjuster() will take accept an object of all MATCHED_ITEMS, go through them, calculate price Adjustments based on conditions, and return that list of items along with an Adjustment property for how much the return value is getting reduced.

    I think that means that any manager overrides need to happen at the level of SESSION_ITEMS.  BUUUUT.  Some of the declines can only happen after the item is matched, like if it's past 90 days.

    And the problem with making adjustment-adjustments at the level of MATCHED_ITEMS is that MATCHED_ITEMS isn't stored.  It's recomputed literally any time the state changes, so any overrides applied here wouldn't even be kept.

    How about this for a model?  AFAICT, there are no adjustments that interact with an invoice.  
    
    I think that Adjustments happen for an individual item, like the SOS restocking fee.  That should live on the item {actually, in the that item in the product-store}, and manager interaction just removes the adjustment from the item in SESSION_ITEMS.  Once it's gone, it's gone.  Since it happens in SESSION_ITEMS, I can recompute MATCHED_ITEMS as many times as I want and the MO will still be in effect.

    Meanwhile, for the outright rejections, manager override takes place in the derived states.  What I'm thinking is that that I'll have a separate OverRider() that accepts UNMATCHED_ITEMS, goes through, and generates a Magic Invoice for all legal (non-ARD) unmatched items in the cart, with the return tender set to Store Credit.  It then adds that invoice to the list and all remaining items get matched.

    Could also work well if customer is LVC.  If you are in the sytem, you just get the magic wand with no further input required.

    I like it.

    That still doesn't tell me what to do about ReturnTotal, though.  I also don't know what to do about ReturnTender types, or when those are computed.
        -Here would be my guess.  The unique key is the tender-in / tender-out pair.  Tender-in is always known.  I think that screen with the green circles is where tender-out is determined.  For any with no choice, it just grinds through automatically, and if there are any uncertainties, that's where the associate is asked to make a choice on screen.  I think that builds your complete list of return modes.

        -That's also good for me.  I think for right now, I can just calculate Total, Subtotal, Taxes, and Adjustment for the ReturnsTotal component.

    I'm also a little unsure what to do with the dispositions.  Like, if it's Defective then we don't apply the restocking fee.  When do I calculate that?
        -First of all, this should be a VERY limited case.  I actually only think it applies for an SOS item that has been damaged.  
        -I think the rule should be that if there is an adjustment it applies to all non-damaged items, unless there is a manager override in which case it is removed entirely.

    -I remember.  Receipt Date.  I mean, the easiest is to add a condition in the matchmaker that just doesn't count the receipt if it is older than 90 days.  The ONLY catch that I see is I think we have to show too-old-receipted returns separately.  I guess my tentative solution would be to have a separate function that goes through the Unmatched items after the Matchmaker, looks for matches with old receipts, and stores them somewhere else.  That's a simple-enough add later that I think I just ignore it.
    
    Now, for ReturnTotal.  We have some flexibility when to calculate adjustments.  Those could happen at any time ReturnTotal outputs.
        -What I'm thinking right now is I add a Special Conditions object to each item in the product catalog.  This will specifically hold things like ARD and SOS.  

        -Next, I have an Adjustments() method.  It will look for anything that changes the price, like SOS.  All adjustment percentages live in this tool so we don't have to change 50 billion entries if I decide to change the percentage.

        -Oh, fuck.  The percentage.  That could change too.  That is going to change, too.  We're going to give the manager the ability to adjust fees.  And I think it's per item.  OK, well, never mind.  

        -I mean, I guess the VERY easiest way would be to have an adjustment % on every item.  Maybe in my Special Conditions object, it looks like {SOS: 0.2}

        -Then, if there is a manager override, that percentage is changed on the SESSION_ITEMS.

        -If the adjustment percentage lives on the item, I also have the ability to display it, its percentage, and its reason code on the list of items, although I still have no idea what to do on price.

        -If there were ever a situation where multiple adjustments collided I could put the logic for it in the Adjuster.

        -No matter what, the end result of running MATCHED_ITEMS through the Adjuster() is going to be a modified version of MatchedItems where each object includes an Adjustment property along with price, tax, and quantity.  That will be the amount by which to reduce the return price.

        -Because of this, I'm now wondering if the Adjuster() should happen at the end of the Matchmaker.  Or maybe even in the middle?  Or, actually, I think it should be happening on ADD_ITEM?  Like, at that point we should already know everything we need.  Wait.  No.  We don't, because without the invoice we have no idea what price we should be adjusting.  OK, I think within the Matchmaker is correct.  

        -What if more of the same items are added later?  Adjustment percentage should be the lowest, I think?

        So then I think what we do is Adjuster(rate, matchedObj)=>{} in Matchmaker and ... and no.  Because we still don't have the dispositions. 

        -Crap.  Since the dispositions may be mixed, I can't just provide a flat value.  Like if I have 2 damaged and 3 unwanted, I can't specify one one number from which the Adjustment can be calculated.  Maybe I should calculate Total, TotalTax, and Adjustment in each object.  I mean, we're going to have to do it sooner or later.  

23 Dec 2022
    God, I wrote a fucking novel last night.  I also have only about an hour before  I need to head out to the doctor, but it's for my knee so that is also very important to enjoying life :)

    -Very first task in the queue today is figure out a plan of attack for how to handle the CostAdjuster().  

        -OK.  So.  Every loop through the dispositions will produce at least one property, and fill up the disposition: property until either all item dispositions or sold qty are exhausted.

    200:{
            specialConditions:{SOS: 0.2,}
            matches:[
            {
                price:44.00,
                tax:4.10,
                payment:"Check",
                disposition:{doesntWork: 8, unwanted: 4},
            },
            {
                ...
            },
            ...
        ]

    }    
        -I guess my first thought would be to calculate return value as I am looping through the items, but to do that I would need to know the special codes.  Although I guess I need special codes no matter where I loop from.

        -Rules:  SOS item - NEVER without a reciept, 20% with a receipt.
        -ARD: Never without a receipt.

        OK.  So I shouldn't have to worry about that here.  If they are matched then by definition they have a receipt. (that's what they're matching with.)  So the only think I need to be on the lookout for is adjustments.  

        I can either cumulatively calculate the total value as I go along, or I could do it after the full array of the item's matches are completed but before it is added to the MatchedItems object.  It might be more efficient to do it that way, but it would be much easier just to pass the whole object.  

        That's what I'm going to do.  Maybe it's more efficient but this way is easier to understand.

    After giving it some thought.  I think what I want to to is store cost inside each receipted item's > match array's > matchObj.
    That seems like a lot of extra data that I'm not going to use right now, but when it comes time to calculate how much money is being reimbursed to each tender method I think it will be really helpful.  

    Input/Matching:
        Revised Invoices:
            -How many items were returned from each invoice.
            -How much was paid per item, per invoice.

    Tenders/Refund:
        -Total sum paid for each item type per invoice.
        -Total sum being refunded per invoice
        -Tender type(s) per invoice.

    Remember, per receipted ItemNumber(200), each match array's > matchObj represents matches made from ONE invoice.  So as long as each matchObj also contains the invoice number from which it matched, having the cost already calculated and ready to go should make converting the MATCHED_ITEMS list into the Tenders/Refund list pretty easy.  Just cycle through the Items list and check if it came from the Invoice in question.  If so, add its costs to the total being refunded from that invoice.  AFAICT, I don't even need to know what the item is - item totals in MODIFIED_INVOICES has already been updated in the Matchmaker.  

    5:30 OK.  Hold up.  If that is the case, I might as well just handle it in the matchmaker, right?  For the time being, I'm just going to add a restockFee property to each item.  Calculating that can be the back end's problem.

24 Dec 2022 - Finally back after a morning power outage.  What a waste.  I couldn't get back to sleep after my CPAP was unpowered, and I legit think I could have been in this seat at 8:30 instead of like 12:30.  Nothing that can be done now.

    -What can be done now.  I need to get the Session state from Returns into RefundTotal via its parent.  I can't think of a time when I would be referencing anything else, so I don't think I need to accept the object as a separate prop.

    -After that, I need to figure out how and where to set the Continue buttons and have it track if there is anything in ScannedItem, and I legitimately think I will be ready to move on.

    2:40.  Well, that was pretty painless.  The ReturnTotal component is correctly showing totals calculated from Matched and AFAICT it's working just how I want it.

    Next question - what is next?  I supposed before anything I need to get the Continue buttons working.  I do like the idea of having Continue present from the ItemDetails state, but I think I will not.  First, for testing I might have to go back to having the Submit button here.  The other reason is that it's kind of an anti-pattern, because at L1 and L3 of the three the button in this spot continues, but at L2 it submits an item?  Not so sensible.  

    I swear I do want to move on, but I think I should add 2 QoL features.  First, hitting the Damaged / Defective button should set all dispositions to {}.  Otherwise it's not doing much.

    Also, I don't think it would be too hard to implement the Reason buttons showing their current quantity.  I just show the quantity from the global state.  That way, the user won't see the number change while they are typing?  Or should they see it?

    3:20.  OK.  40 minutes invested and both of those QoL features are working correctly!

    Now, to deal with the buttons and Continuation.

    5:10:  OK.  I'm doing OK today.  I finished up all the work for populating the ReturnTotal object and it's all working.  I've also got a new empty page with a new URL for the FirstReview component and navigation to and back is working correctly.  The next steps are going to be to make a couple of universal components - the in-page title and the Review LIs and honestly the thought of having to consider all of the use cases I need to consider to make then reusable in different configurations seems a little intimidating.  I think I'm gonna swalk, see how I feel, and only if I feel like it when I get back will I get after that next step.  I'm feeling a little down because I mostly did easy things today, but a lot of that easiness is familiarity and the fact that I have been working REALLY hard to apply the Robustness principle so that I don't make hard future steps for myself.

    Like... a lot of this stuff is smooth because of foresight.  Setting up Returns to hold universal state, and then having all the page displays on URLs so I can easily change pages while having unbroken access to the data?  That was preparation.  

25 Dec 2022
    Christmas calls are done and I need to wrap up and get on the road before too long.  However, I'm going to try to code one last little bit before I go.  Before I go, I would like to have:
        -A new, scrolling table
        -A new, custom ReviewDetailsLI component
        -Table populating from Unmatched and the new custom LI.

28 Dec 2022
    I'm really dragging ass today.  I could conceivably have started 90 minutes ago but my heart just isn't in it right now.

    -First thing for today.  I need to continue to build the list item for the non-receipted returns.

    -I also need to figure out what the hell was happening when the screen was at a shorter vertical height.  That was kind of ugly.

    -I need to create a container for the next phase, which is Lookup, and add a Continue button that leads to it.  

    12:30 - still not super engaged, still kind of going through the motions, but that is better than not going through anything :)

    -I've got most of the content added into the Review LI.  I just need the Rejection code.
        -Make list of areas where rejection codes are used.
            -Non-receipted review
            -Rejected Review
            -Sometimes in the raw Item List

            -OK.  So AFACIT, these codes are only used in relation to items, and I THINK they're all in relation to either Session Items or Unmatched Items which have the same structure.  I think what I am going to do is let the Rejection Code component accept a function, but also have a default function that works on the Item data structure.

        -Figure out how to display rejection codes.  Maybe the component accepts a function?  Or maybe there is a function in the component?
        -Create a Rejection Code component.

    3:30 - RejectionCode component is now working correctly.  I think I just need to do some CSS cleanup, add the button, and then move onto the next phase.














                





    




    






    





