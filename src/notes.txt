Rule 0: Hands On Keyboard, Butt In Chair.  If we know what to do, we should be coding.  If we don't know what to do, we should be writing our thoughts as we try to find the path forward.

RULE 1:  At the end of the day, we are building testing tools.  Don't spend time and anguish on problems we don't actually expect to face.  

RULE 2:  We are trying to grow our skills.  Every pattern that is now routine to us was once unfamiliar and frightening.  If we have legitimate reason to believe that an unfamiliar pattern is the best way to solve the problem, do the unfamiliar pattern.

RULE 3:  Our responsiblity is to get it working right and keep it working right as we add features.  We literally have NEVER encoutered a situation where processing speed had any effect on the UI.  Processing speed and efficiency mean nothing to us.  Optimize for clarity and simplicity.  'Easy for the coder' is far more important than 'easy for the computer'

RULE 4:
IME, it's generally faster to go: 
Pictograph => Rebus => Alphabet  than 
Pictograph => Think REAALLLY HARD => Alphabet.  
Without the Rebus phase it can be hard to identify the common elements that can be systematized.  Kludgy code is generally a stop en route to good code, not a detour from it.  

RULE 5: 
Be VERY careful with highly-abstract or non-obvious solutions.  Even if they result in tight, concise code, you still have to understand what it does later.  If it was hard to dream up the first time, there's a good chance it will be hard to comprehend in the future.  And if high abstraction is truly the best solution, comment the fuck out of the pattern and ALWAYS look for ways to refine the clarity of the comments.  The EV of 'maintain and refine your current knowledge' is generally higher than the EV of new knoweledge because if the existing knoweledge wasn't useful to you, you wouldn't have acquired it in the first place.  



//// Github Pages Deployment ////

Writing a little about this since I've struggled with it in the past. This site had a really good walkthrough

https://github.com/gitname/react-gh-pages

I was actually able to skip to Step 7, and I think with what I've done, Step 7 is all I need to do.  I'm going to make a change and see if it appears.

To push it live, I just have to type:     npm run deploy     into the console.


//// Returns Backlog ////

Anything problem I identify with no dependencies is probably getting bypassed.  This is my personal Backlog:

    -Figure out a more logical way for Input validation red warning messages to appear when needed.  Right now they are visible at the start and only go away when the user is entering.

    -After entering an item, ItemEntry30 should focus on the itemNum field instead of staying on the Qty field.

    -Product Details <th> in SessionItems70 is actually correctly aligned, but it looks like it isn't.  Figure out a way to either include space or customize margin / padding.

    -Invoice column in in SessionItems70 currently displays nothing.  This is a stupid feature, but figure out a different approach.

    -For the sake of clarity, I really should rename the container for all dispositions into something that reflects that it is a container of all the individual dispositions.

        AFAICT, this term is used in 4 places:
            -Returns
            -ItemEntry30
            -ItemDetails30
            -the matching.js function.

    -Add in Manager Override to be able to cancel restock fee.  As this has no dependencies I'm leaving it for later.

    -I need to figure out how to handle an expired receipt.  It seems like the logic would be pretty heavy and this isn't a very important feature so I am backlogging it.  

        If I had to guess right now, the thing to do would be: 
            -add a date to each invoice in the store.
            -in the matchmaker, sort the array to loop through invoices by date, earliest first.  This is to make sure that if there are any recent invoices that also include the item, those are matched first.
            -For any that are past 90 days, treat as a non-match, add an expired:true property to the specialConditions object, and continue to the next invoice.
            -and then how do I handle the quantities if some aren't matched?

    -Buttons on full pages are not the same size as buttons on 30 panels.  It would be nice if they were.  I have no idea how to make this happen.  

    -At some point I need to make the little indicator that shows number of receipts / unmatched / invoices / etc. at the top left of my components.  The part on SessionItems70 where it shows Receipt List (coming soon)

    -For the MatchMaker - I might need a way of prioritizing Invoices and Dispo types.  Like, for each item, I think we would want to refund the highest-value invoices first.  For dispo types, I think we would want to refund Damaged dispos first.  Right now, both of these are not being processed in any intentional order.  It shouldn't be too hard - I'm already making an array to loop through, so I should just be able to sort those arrays pre-looping.
        -This is going to become a NEED as soon as we start adding in Unwanted dispositions. AFAICT if an unwanted disposition matches first on an item with a Restock fee, customer wouldn't get the full refund?  

    -SessionItems70 and SessionInvoices70 are currently making the choice to render their respective tables or the StartScanning70 panel as conditionals within these components.  These conditions should probably be handled in the dispatching?

    -I need to figure out how to write no-UI functions that can use hooks, especially accessing the app state.  

    -On the Item Details page: The quantity needs to be an editable input field.  IIRC I'll have to change how the Items dispatcher is done in Returns.  

    -In the Tenderizer: Right now, all tenderLabels are hard-coded and stored in the Invoice object. Produce a String-maker that caluculates the credit card issuer from the ccNum.  So instead of "Credit ****1234" it would say "Discover ****1234". This will also require me to update the credit card numbers in the file, and then delete the hard-coded values.  AFAICT as long as the new function in the Tenderizer stores the new string in the same property name currently storing the hard-coded strings, no further re-wiring should be needed.

    -in tenderTypes: I'm having to copy and paste description strings all over the place.  it would be nice if each of the types were objects that contained both reference strings and description strings.  I should have made these objects from the start but I was naive and optimistic.  This will break like 10 files but they will at least be easy to find.  
        -If I ever do decide I want a class/factory for all the tender types, this would be a good time to incorporate it.


    -General Knowledge: really figure out the Component Composition model.  It looks like it's powerful but I don't quite grok it yet.  

    -In the <tr>s of the ItemList, we show the price as current price from the Item Store * current qty, but this is different from how much is being refunded.  I need to know how to handle the following scenarios:
        -Matched vs. unmatched items.
        -An item matched from multiple invoices at multiple prices.
    I really think the most logical way is to display a separate <tr> for each unique item/price combo, and have the unmatched items with null values for unit and total prices.  Considering I have a list of matched_items, that shouldn't be a big lift for me to program, but I don't think that's what's currently in stores.

    -Refactor ItemEntry30.  
        -useReducer is probably not necessary.  Probably fine as a state with an object.
        -only show Invalid ItemNum warning on de-focus.  
        -use useRef to auto-focus on ItemNum field on Render and Submit.
        -Should be able to useAddItem?






/////////// Recurring Problems ////////////////

If: state on screen appears be one change behind what you've actually done, or actions or payloads or any other unexpected properties are appearing in your state, check the order of the (state, action) arguments in the definition of the reducer function.  Remember, these are ARGUMENTS, so their names are meaningless.  Only their order matters.  


If: we are seeing [Object object] errors in the console:
    Check the path segments of all Objects involved.  AFAICT 
    items:{
        A1A1:{
            name: "ABC",
            quantity: 4,
        }
    }

so if we try to go items[itemCode] * 4, we will get some kind of [Object object] error because A1A1 is just a key for an object.  We need to go one segment deeper, items[itemCode].quantity for this to work.

If: we are having trouble positioning the contents of a table row: 
    -I don't know why but CSS rules don't seem to apply to <td>s.  I've had success creating a container <div>, and then setting width/flex and height to fill the <td>, then applying positioning and styling as normal.  It's like making a little pocket dimension.

If: children of a flex-container are overflowing their parent:
    Try setting min-width: 0; 
    Apparently, the default min-width property for flex-items is auto, not zero.  Flex-items cannot shrink below their minimum size, even if that causes them to overflow their containers.  
    Also note that this is DIFFERENT from the flex-basis (the third argument in flex: 1 1 auto). That determines the starting size, but it is not the minimum size.  




//////////////

24 Sep 2022

    -Explore what I need to do to use heredity in CSS.  Max 1 hour, option to continue if I feel like I am close to the answer.
        -I am not close to an answer.

    -Organize the tables so that inputs <th> and <tr> use a similar structure

    -Make the tables use a flex-basis so I can alter the sizes.

    -Table should be universal.  Lots of other parts of the app use a table, and I want them all to be configurations of this.

        -Some <td> will be components.
        -Some <td> will have multiple elements
        -Need to be able to take unknown number of <td> in each <tr>
        -Incorporate flex-basis into <th>


14 Oct 2022

-Add button to button container, figure out how to control positioning.

-see if React elements can be controlled like HTML elements via CSS.  If not, make alternate plan.
    -It seems they cannot.

-Next test - see if I can add a non-modular CSS class in case I need to control that way?  
    -Also cannot.  I think if I need to, I can pass styles via props.  No idea if this is best or not.  

-Where am I stuck and spinning my wheels?

    - I need the footer container to be able to accept an arbitrary collection of contents.  Could be buttons, could be price summary, could be nothing at all.
    
    With that in mind, I really need to be able to style the Footer contents as well.  I can't know in advance where to align the buttons, how many, etc.  

    - I WANT (but do not need) each base panel to have everything needed: header, contents, and footer.  

    -Conflict:  the <BasePanel> component accepts one set of children, which will fill the content area.  

    -So one way to do it would be to define the footer contents in the section configuration component, and then pass that down via a prop.  AFAICT I can also do any styling in that parent as well.  

    -The other option would be to just make each panel separately.  I guess this is technically violating DRY, but the parts I'm 'repeating' are some pretty simple CSS that I don't think I'm going to mess up.  I think this is the move.  I am also very proud of myself for systematically figuring this out, and I have earned a smoke tonight.  And still 2:30(+?) to go!



-I need to implement the react-router-dom in my file

-I need to convert my nav bar into the HTML <nav> component

-OK, stuck again!  Let's do this!

    Objective - I want the tabs in <GlobalNav> to be able to handle URL requests because I will eventually need this.

    Problem - When I changed the tabs to the <NavLink> compnent from React-Router, the styling got all weird.

    Options:
        -I could fiddle with the CSS in the existing file to see if I can make what I have work.

        -AFAICT the <NavLink> does everything I need OOtB.  I could try to do my mapping to <NavLinks> in the NavBar and do the styling in the NavBar CSS.  

            -Does <Navlink> accept an ID? - YES
            -Does it allow other styling or is it just text?  - I think so?

16 Oct 2022

    -Got the V6.x update working with surprisingly little trouble.  

    -Next is the nav bar. 
        -I need to convert the buttons to <NavLink> components
        -I need to style the NavLink components just like their previous custom peers.
        -I think I can get rid of the custom state tracking.  AFAICT the stock <NavLink> component handles that, and in any case each page will have a different URL.

    -Then I can finally get started on some page building?

    -The Scan Items sidesheet elements are going to need routes as well.

18 Oct 2022

    -The Nav Menu buttons need the ability to have an icon specified on creation.  Options:  

21 Oct 2022

    -Routes:

        -I need to figure out how to do sub-routes - like 
        "localhost:3000/base/branch"
            -I think if I just place the sub-route in the main route, it will work.

        
        -I need to figure out how to do routes that are part of a page: like if I want 70-panel to stay the same but 30-panel to change based on route.

    OK.  I notice I am confused.

    I now have the No Sale button linked to the /nosale route in my code.  When I click the No Sale button, the URL changes to 
    localhost:3000/returns/nosale   which is what I expect.

    However, I set that route to include a page element, that page element does not appear the URL changes.  
        -First.  Do I have any examples of parent routes also rendering elements?  

    -Gonna stop for tonight.  I think that this section haswsxs the answer:  https://www.robinwieruch.de/react-router-nested-routes/


22 Oct 2022
    OK!  Long list of things to work on today!  Wish I were as clear and excited now as I was when I was trying to sleep at 6:00 a.m.  :/

    -First, going to try an experiment of starting with something I know I can crush to get into the groove.  
        -Experiment seems to have gone very well.  I am 100% dialed in and excited to work.

    ROUTING

        -Need to understand <Outlet> and how to use it.
            -May need to re-factor the app to use Outlet with the Nav bar.
        
        -Can I get the whole page to change via a child URL?
            -AFAICT, the answer is no.  I think that you only use a child route if you want to change part of the parent?

        -How do I make part but not all of a page change via URL?

    CONTEXT

        -Do I want the scanned list to be a separate context?  If so, how to reference more than one context?

        -I need to figure out a way to add items to the cart.  This will probably be a form.

    1:30 evaluation:  

        -I THINK I have the answer to my immediate routing questions.  I think what I should do is test to make sure I've got it with the <Outlet> component.  If it is working as expected:
            -Do I diagram one of the Router components?  It would be good to solidify the knowledge, but I haven't gotten a lot of pixels on the screen and that's what I really need to do.

        -I think I should plan to restructure the app based on what I've learned.  
            -I think all flows should have a parent URL - Returns, Exchanges, etc.
            -Some of my components, especially the ones with 30-70 panels, are going to need some Outlet organization.
            -Returns will need to be a parent URL.  

        -For <Outlet> My understanding:  Each parent can have a single outlet.  I can have any number of potential children to fill that outlet, but I can't say "put these children here and those children there" based on URL.  

        -After test and restructure, what to work on next?  Got to keep in mind that I am probably showing this to Kristin on Monday.
            -Scanned Item list?
                -Pros:  
                    -at some point, even in Exchanges, I'm going to have to have entered items.
                    -That is a really cool feature and I don't think it can be matched in Axure.
                -Cons:  
                    -It's not directly related to Returns and it might look like this process is too slow. 

    OK, now 3:30.  At the moment, I do not feel like fiddlefucking around with routing any more.  I want to get some stuff on the screen, and I've got my eye on item entry.  I need:

        -A form that accepts item number
            -looks for a match in product context
            -If found, adds to basket
            -If not found, gives an error.

        -A context scoped to Returns that records all successful item entries... or could it be a state?

        -A table that shows all items in the transaction
            -A component for the the individual LIs.
        
        -the 70 panel should conditionally render either the Scan CTA or the table, depending on if there are any items scanned.

        -First, I think I need a Returns component to track the state.  The contents will change a lot based on what phase of the process the user is in, and I also need to keep track of the state.

    Wrapping it up for the day.  I didn't want to spend the whole afternoon on routing, but... I did, and the stuff I worked on is stuff that I need eventually.  

23 Oct 2022

    -Back to playing with my code Legos!  First task is going to be creating the input form for Item Lookup.

    -Got the base input up and running.  Now I have a decsion to make.  I don't think I need a button component.  I think I could actually do that in CSS, and in the meantime the prop-passing is getting to be a little much.  I think I will do this, but set myself a time limit.  

    -1:45pm Got basically what I want for the input field.  Now I need to get into some data-moving stuff.  I need:  

        Returns:

            -A state in <Returns> that tracks the current Cart.  

            -A table that shows the current items.
                -table must map from an entry in product-context.
                -I'm going to need a custom LI for the scanned-items table.

            -The items must come from the product-context 

            -First, let me just test getting the product-context in Returns.

        product-context:

            -Item keys need to be a product number, not a name.  

    3:30.  Kind of spinning my wheels again.  What NEEDS to happen first is to update the product-context to use numbers as keys.

    Next, I need to figure out how to get a product-context object via its key.

    Then, I can get to work on a <LI> that populates based on that.

24 Oct 2022:

    Things I could do today:


        X -I need a way to show an invalid item entry in the Item Entry form. 

        -Get the Add Item form working.

            -I'm going to do this first because I think making the LI will be easier.  I need:

                - a function in Returns that gets the values of Item Number and Quantity.

                -I need a function that checks 

        -Create the full Item List LI

    Ok, getting some major fucking meltdowns when trying to use the AddItemHandler() function from Returns.  First, potential issues:

        -I know very little about forms and there are a few things I could be doing wrong.

            -Submission behavior is set in the form, not the Submit button.
            -I haven't used preventDefault() anywhere.
            -I'm not referencing an event and the examples I see online appear to do this.
            -I still don't know why I'm using a <form> instead of just some input states.
            -Something else.

        -I've never passed a properties through multiple Outlet contexts.  In theory it should work no different from prop drilling, but I've never done it and I could messing up the technicalities.

        -This whole idea of using routes for nested outlets might be stupid.  I might be better off with fewer URLs and conditional rendering.

            -I guess I should think about this one first, since its implications are the largest and it will cause the most rework if I change my mind.

            KEEP THE URLS

                +The main benefit of URLs is that if I am testing, I can send someone a URL and have them start right at the source.

                    -That's not how the real app works.  Users expect to click through.

                    -The other model I have in my mind is to have one URL per page, and then do all variations through conditional rendering.  If that is the case, I could still direct users to the nearest URL and let them click through from there.
                
                +The URLs are actually kind of nice.  The ability to click and make <thing> be on the page is pretty cool.

                +If this is training then I should be preparing for the worst-case.  When I am navigating websites, the URLs are changing all the time.  I might need that capability.

                    -This is training, but we need output.  It's better to get it working in a non-ideal way and then figure out the rest later.

                + This is what we have now.  We need to make progress.  Major reworks when running into snags is not a good habit to be in.  Figuring out how to make what we have work is what is likely to get us moving again the quickest.

            ---

            1 URL per page
                + This is familiar.  I'm pretty sure I know how to make it work.

                    -It also means we won't be learning as much.

                + It is a simpler conceptual model.  If we get stuck, no one is coming to help us.  The fewer moving parts we don't understand, the easier it will be to find problems.

                + Makes it easier to try that component composition model, which we've also been wanting to understand.

        OK.  Here's my compromise.  I'm going to spend an hour trying to un-fuck what I have.  If I'm still stuck, I will re-evaluate 1 URL per Page, and I plan to use 1UpP for the future work.

            -Test 1:  Pass a function down and run it using a local var as an argument.
                Took a little fiddlefucking but works fine.

            -Test 2:  Check the form examples, look for deviations, address them.

                Well.  I solved it?  I changed the submission to happen from the form, I added a local function with event.preventDefault() and I had that function call the AddItemHandler function from Returns, and now it's working flawlessly.  I do not know why.

25 Oct 2022:

    -Goal for today is to try and get the Product Detail component working.
        -Render the component in the list, populated by a prop.
        
26 Oct 2022:

    -Working on the CSS for the product component.
    -or... maybe not.  Might be the validator.
        -I'm pretty sure I can validate with what I have.  The question is when.

            -I could validate on Submit, which is kind of a lousy experience but would be easy to implement.

            -I could validate inline, but when?
                -De-focus is really nice, but if they do it second then I miss my validation.
                    -I could make item number unavailable until a valid item is entered?  Overkill?

                -I could track in the state, and make the button unavilable until there's a valid number?
                    -but then what triggers the message?
                
                -I think no matter what, I need to check as the text is being entered, and so I need a state to track that.

27 Oct 2022
    -This might be stupid, but I'm trying to re-arrange my input form to use a reducer instead of a state.  I don't actually know why except that reducers are supposedly better for complex states.

28 Oct 2022
    -I got stuck last night, and I think I understand the reason why.  I can make Item Entry work just fine with a reducer.  My problem is that I don't understand why I should be using the reducer instead of a state.  I really can't see any advantages.  It just looks like a different syntax for accomplishing the same thing.

        -I think the very first task of the day should be to get it running again with the Reducer.  After that I can decide how much time to spend on learning.
    1:00

    -Time's kind of getting away from me here.  I just really have not had great luck with Maddie the last few sessions, although I haven't been super great about following procedure, either.

        -I need to choose here:

            1. I could change Returns to use a reducer instead of a state.  
                + If I'm not changing the logic, this -shoudn't- take too much time.
                + Once I figure out the value of Reducer, this is the thing I'm most likely to need to change at the cost of significant re-work.
                
                -The application is working fine right now.  This is more non-progress.

            2. Experiments and reading to find out the purpose of UseReducer().

                + Biggest potential payoff in terms of new understanding.  Right now I don't know why Reducer is better and so I can't design in a way that takes advantage.
                
                - Not immediately needed for anything.

                - Success and progress are ill-defined so not satisfying. Most likely to result in a completely wasted day.

            3. Fix the appearance of the table and its list items.
                + This is the one thing on the list that I KNOW has to be done.
                + It's satisfying and could help get me into the groove.

                - Is likely to need rework if I ever do Item 1.  

        -I think the compromise is to do Item 1, but restrict it to JUST replicating what I'm doing with useState.  No exceptions.  I'm going to make that change, then decide if there's anything I want to modify.  Setting a 45 minute timer to help focus me.

            -One deviation.  I'm going to put all the items in an Items object because eventually I will need to keep track of at least a Receipts object too.  Since I can't imagine not needing this, it's a time-saver to do it now.
    
    3:30:
        -Well, that took way too long, but finally got the Returns state working through Reducer.  

            -The next, obvious question is if I can move more of the state-change logic into the Reducer.
                -It's working, so I don't know if that's the best use of my time.
                -I don't know what the best practices are, so I'm not even sure it's a good use of my time.  

            -I'm gonna take a SHORT break, then devote 20 minutes to Googling to see what I can find on best practices.  If nothing's clear, I'll move on to more visible work.

            -OK.  From the examples I've seen, the Reducer function TENDS to be pretty simple - 

            -The plot thickens.  It is true that I am not using Redux, but IIRC most of the useReducer() approach was developed from Redux.  Redux recommends that as much logic as possible be placed into the Reducer.  

                -This was just a comment from StackOverflow, but it made so much sense to me.  Paraphrasing:  determine whether or not to dispatch in the action creator, but do all other logic in the reducer.

            -Is it stupid to refactor the Returns logic into the Reducer?  Probably.  Am I going to do it anyway?  Also probably.

                -Well, that was completely painless.  Took one try and ten minutes.  :/
        
    Going to do some work on the styling next.  

        -A little sidetracked again.  I found a way to make the scrolling happen but it had a really weird effect where it was making the whole table grow outside the bounds of the flex box.

            -I am actually wondering if it's not happening at the level of the <tr>

30 Oct 2022
    OK, gotta get in and beat this boss.

        Approaches:

            -The CSS for the table is all over the place.  Who coded this shit?
            I need to decide if I am going to have global CSS for the table, or if I am going to keep it with the component?

                -I don't know of any other tables I plan to make, but I could be wrong.  If I do make another table, I could always override that with local CSS, but that's kind of inelegant.  I like the idea of having one style per chart, so I think that's what I'm going to do.

            -I THINK it's some part of the table, and specifically its size, that is causing the overflow.  Everything was fine until the table got big.

            -So first move is going to be refactoring the table's style.  

    OK.  Why am I stuck?
    
        -First problem was that the table's height was behaving unpredictably.  

        -Second problem is that the horizontal layout appears to be behaving strangely and I don't know why.

        -Now I am wondering if I should even be using tables at all.  

        -I've rolled back all changes so I can think clearly about this.

            -ReactTable might be better.  It seems to be very well liked.  I don't know what the benefits are, but if I keep working on the stock table I might find myself stuck.

            -IF my normal table can:

                -fit within the confines of the page
                -scroll
                -let me set columns, or at least respond to different content sizes

            Then the stock table is fine.  

        -I think I am going to try with react-table.  My main reason is that it has a sorting feature, which would be nice not to have to build.

        https://react-table-v7.tanstack.com/docs/quick-start


1 Nov 2022

    -I got the react-table working from the example.  However, at least right now it looks pretty overwhelming to me.  Like, there's a lot of stuff in the code that I just don't understand what it is or why it is there.

        -Let's just dig in a little bit here.  I would hate to give up so close to the end.

            -First.  That scary object at the start was just object de-structuring.  I added in an additional variable that I got from the TableInstance object and it printed as expected.

            -Second.  You can populate from a nested object.  I tried it with the sample data and it worked as expected: "parent.child"  so that isn't my problem.

    -My main concern is that I am depending on something I didn't build and don't understand, so if I get stuck I don't have a great way of fixing it.

2 Nov 2022

    -I finally got use-table working. Right now, I don't see it.  It literally looks exactly like what I had before.  The main draw feature is that it is supposedly easy to sort the columns, but I'm not planning to do that any time soon.  
    
    -If I come back to this, the keys I need to remember are that memoizing the data arrays and the names of the props/object thingy(?) passed to the useTable() function turned out to be very important.

    const tableInstance = useTable({ columns, data });

    I think I'm just going to roll with the stock table and try to figure out why it wasn't working.  

        -Was this a mistake?  I think so.  The best defense I can make is that this package appears to be more capable and if I could have made it work with little effort, it might have been worth it.

        -The best criticism I can make is that even from the start, I didn't see a way that this would solve my immediate problem: scrolling and LIs not fitting on screen.  As soon as it became apparent that this was going to be a lot of extra complexity, I should have abandoned it.

        I need  to be very suspicious of the 'IDK, I just want to' feeling.

    -So, on to the table.

        -I don't understand why my table was such a disaster, and there are so many interactions that I think I'll have trouble finding the problem.  I think the right move is to start with the 70 panel, and build the chart up from scratch.

    -Before I get into that, I think I need to make an architecture decision or else I'll need to do more fiddling.

        I want the /returns URL to be an entry point.  The 70 and 30 panels should be handled by conditional rendering.  From /retuns you can navigate to deeper URLs, but until you choose a path the page should just be conditional rendering.

            -The first thing I will need to change is that I need the 30 panel to be able to do conditional rendering.
            
                -To do that, I will need to track the active state.  Maybe with a reducer?

                -If they don't already do this, I need the button component to accept different onClick() functions.  Sometimes it's going to be a state+conditional render change, other times it will be a URL change.

                -OK, I got it.  Figured out how to do navigation via a function.  This was the site that solved it for me:

                https://www.kindacode.com/article/programmatically-navigate-using-react-router/

3 Nov 2022

    -Next little question: should I control the Returns Index 70 and 30 panels with one or two reducers?  
        - as far as I know, they are completely independent, so there's no reason to pair them.  

        - It's not that much harder to make it all one reducer, and if I'm wrong I could see just wanting one.

    -The question now is: do I have a skinny Reducer and let the lower-level components set the state via payload, or do I try to get as much of that logic in the Reducer as possible?
        -I feel like the answer is the skinny reducer.  I think that gives me maximum flexibility to determine what is getting rendered.  
            

4 Nov 2022

    -Having slept on  it, I think the right approach to the cart is to conditionally render the Invoice and Items tables based on the session.  If there is anything in the table, we render the table.  If not, we render the Scan screen.

    -OK, got it working.  The next thing to to is to start hacking away at the table.  I think the approach is just going to be: build a very long table, styling as I go, and see where the problem is.


5 Nov 2022

    -Things to try - 
        -convert <tbody> to flex

        -App.js class main container seems to be the right height for the blue area, but is somehow flexing beyond that.  Why?

        -if absolutely nothing else is working, try clearing out most of .App and putting the table as close as possible to the top of the tree.  This will at least allow me to try out different approaches without having to change 15 different layers of children.
    
        -I know exactly why I'm avoiding getting started.  I'm pretty sure making the table into <flex> won't work and then I'm back to frustration.  But there's no alternative.  I am blocked.  However long this problem takes to solve, I can't proceed until it is.  

            -OK.  I made the simple version.  It works exactly like I want :/  But I guess that means I can find the mistake somewhere in here?

            -Added in the horizontal container, which I really expected was goign to be the source of all the problems.  Again, working perfectly as expected.

            -Another clue.  AFAICT, the faulty offset is exactly the height of the nav bar.  Something is not counting that in the percentage.

            -Also.  When I take out the nav bar, the size is porportioned correctly.  WTF?

        -Holy shitballs.  I got it.  I'm actually not sure what was tripping me up.  It was some combination of three things.  
            -First, for a flex item:    height: 100%   is relative to the PARENT, so if I have other items with defined sizes in there eating up space, I could get overflow.  The correct way to do it is:
                flex: 1 1 0rem.

            -The second thing, the reason why I didn't see changes earlier, is that    flex: 1 1 0    is not actually a valid input.  The third argument needs to include a unit, like rem or %.  Otherwise, I think it just compiles to 'auto' which would explain why I was seeing no response - it was just being its default self.

            -Finally.  Not sure if I grasped this or not, but the   flex:   property determines how this element behaves RELATIVE TO ITS PARENT.  I was trying to make the table a flex-item and getting weird shit, but that's wrong.  It is a flex item already.  All children of a flex box are flex items, whether they themselves flex or not, and I can use any flex-item properties on them.

    -Next up is to get the custom table working.  I'm going to try my existing custom table and see if it works.

        -Custom table is working, accepting data from Returns context, and adding and deleting properly.  Next step will be to wire the Product Detail section together, but that should be pretty easy.

        -If you told me this morning that this is what I'd have at the end of the day, I'd take that outcome in an instant.  :)

6 Nov 2022
    -First thing.  I've been wondering if I should plan the invoice/item matching.
        -At some point it will be needed, but that's fairly far in the future.  
        -The only dependency right now is mapping the item object to the table.  
            -I could just plow ahead.  It's some re-mapping, but I'm not concerned at all.
            -I could come up with a plan, re-do the data map, and then figure out the acutal mapping later.

    -I think I am going to devote an hour to the problem.  After that, I'm gonna stop or I could be on this all day.

        OK.  I think I can fix the item part for now.  What I have is an array of items that looks like:

          {
        productData: {
          img: toilet_img,
          price: 8.75,
          itemNum: "400",
          modelNum: "RT3301",
          description: "American Standard Grand Duke II with Ultra-Flush",
          categories: ["Stock", "Special Order"],
        },
        scanDetails: {
          quantity: "1",
          scanID: 511415,
        },
      },


    {
        img: toilet_img,
        price: - -
        itemNum: "400",
        modelNum: "RT3301",
        description: "American Standard Grand Duke II with Ultra-Flush",
        categories: ["Stock", "Special Order"],
        quantity: 1,
    }

    or:

        "400": {
            img: toilet_img,
            price: - -
            itemNum: "400",
            modelNum: "RT3301",
            description: "American Standard Grand Duke II with Ultra-Flush",
            categories: ["Stock", "Special Order"],
            quantity: 1,
    }

    I think having it as an object will make some of the matching easier, but I need to do a bit of extra work to make it into an array for rendering.

    I think if I'm going to do this, my plan should be to ONLY keep the object in the state.  The only time I convert it to an array is right before I need to render something.  The object is always the SSoT.

    Right now, I will need to change:
        X-the SSoT state in Returns
            -to be an object instead of an array.
        X-the function that adds a new entry in Returns
            -to add an object instead of an array.
            -to check if this item already exists.
        -the Returns function that removes an item.
            -Remove by key instead of filtering?
        X-the Returns function that checks for a match?
        X-the Add Items window?
        -The table that renders all scanned items to convert the array into 

17 Nov 2022

    I'm back!  Been a while since I wrote, but I was actually figuring out how to do matching with wireframes in Figma.  Time not wasted.

    My next move is to turn all that thinking into action.
        - I am going to need to make sure I have a structure for everything.

            -Items
            -Invoices
            -Unmatched
            -MatchEligble
            -Matched

            and in context:
            -InvoiceCatalog
            -ProductCatalog
    
    -Wait.  I actually do get to start with something easy!  I need an invoice entry.  

    -OK, next up.  For an invoice to be added, it needs to pass 2 checks.   
        -that it is in the context.
        -that it hasn't already been used.
    
        -Maybe what I need to do is change the context checker to check both.  I'm sure that would be a better user experience because it gives the user the tools to resolve it.

-19 Nov, 2022

    -I'm also going to try something new here.  Like programming mindfulness.  When I find myself not typing, I should either start writing code or come to this file and start writing to get unstuck.  Like, no self-shaming, just gently return the focus to the work.

    -Today's engine-starter.  I'm going to make the text that describes the error states for Enter Invoice.

    -Next, I need to add each new added invoice to the list.

    -I think after that, I will get into the three derived states.

    -12:20.  No mystery here.  I know exactly why I am stuck.  I would LIKE to have  ALL state-setting logic inside the reducer function.  Then I wouldn't have to export any state-setting functions.  I could just export the reducer function and control everything that happens with action.type.

        -Benefits:
            + A lot fewer functions to export and track down.  I'll know what the function is setting state and what level it is occuring at, assumign I name things well.  
            + Complexity Creep is has the potential to be a huge problem for me, since I'm the one that has to solve every problem.
            + I -THINK- that's actually cleaner code, and if I want this to be a demo piece that is important.
            + If I don't do it now and change my mind later, this gets a lot harder.

        -Risks:
            -I don't know if this approach will work.  I haven't really seen it done, and that should give me pause.

            -I really need to be making progress.  It's been a long time and I still haven't progresses beyond the Index URL for returns.

            -One of the things Harrison got into trouble with for Solo was that he was constantly tearing up old track because he figured out a new, better way to do things.

        Moving the statement inside the component function seems to work fine.  Now, what does that get me?

            -In the reducer, I can now call other functions that exist inside the component function, like checking if an item in the Product Catelog.  

            -I don't think I can directly call a second function that changes the state.  I think once the Switch statement returns, the state updates, the component re-renders, and we're back to zero.

                -How to do sequential updates, like validations?

                -Not sure useEffect is appropriate for this.  The documentation seems to suggest that this shouldn't really be used for state-setting.

                -I guess I could do all my updating at once.  Like, if I've got an input change, I could get that in the payload, do the validation, and then assign both the new input and the new validity status in the State object.

            -I think some functions, like checks to see if something is in the catalog, would have to be passed down.  Or could they live within their respective contexts?

            -Still not sure what the answer is, but I am definitely engaged and interested now :)

            -Maybe the thing to do would be to try it with Invoices, and then see how it extends.

            -I think I'm gonna try it.  New objective:
                -Session state should be updatable using just the Reducer function.
                -Anything not changing the session should be defined at the lowest possible level that covers all children.
                    -What about validation functions?  Could I do validation in the component?
                    -I could.  I can.
            
        5:00 - slowly chugging along, but I haven't gotten majorly stuck yet.  I think the next thing I need to do is populate the Invoices table, because the next thing after that is being able to delete invoices.

        Alternatively, I could try and move / clean up via reducer the Items table, but that thing is working OK right now and I think I'm gonna pass.  I think the time for that will be when it comes time to populate the derived lists.

22 Nov 2022
    Making decent progress on completing the move to dispatching.  
        For adding an item, here's what needs to happen.
            -Get item number + quantity from the ItemEntry30 component
            -If itemNum does not exist in sessionItems, add it.
            -update quantity.

    -Next, I want to make three sample objects, one each for Unmatched, MatchEligible, and Matched.

    -OK, so now.  How to handle this updating?  

    -Raw list > derived list > matched list.  I suppose I could:
        -have a function that generates each derived list
        -have a function that generates the matched list
        -Whenever Items or Invoices is updated, I call those two functions, then update the state with all three.  
        -I guess my only reservation is that I'm doing a LOT of work in the reducer, but I don't know any reason why that wouldn't be OK.

        -Alternatively, I could have separate functions to update EACH state object, but I think then I'm back to having to pass named functions back down the chain.

        If I do this:  one of my lists won't be in the state yet.  Either the soon-to-be Unmatched or MatchEligible will be a variable that hasn't been added to state yet.  Will this work?

            -the only purpose of UM and ME is so that I'm not double-counting either items or receipted items.
            
            -I DO NOT need to maintain UM and ME.  In fact, I definitely don't want to.  
                -I need to conceptually grasp that these two are re-generated with every state change.  

            -I do at least need to keep the Unmatched list, or else I can't give store credit.
            -I think I also need to end up with the Matched list in the state, since 

    Fuuuuuuuuck.  I think I might have just screwed myself.  I don't know if I can call outside functions in the reducers.  

        -Remember.  This is an ASSUMPTION.  We've gotten into trouble like this before.  Let's check this assumption before we blow everything up.  At the very least, I don't know WHY it wouldn't work.

        -OK.  I have not fucked myself.  I am really glad I checked my assumptions because otherwise I would have had to redo a shitload of work.  Good on me for learning from past mistakes.  I'm calling it a day.

23 Nov, 2022
    Having a little trouble getting engaged with the work, but what else is new?

    -One thing giving me pause right now.  Do I want to generate a Match-Eligible list, or do I want to to the matching directly from the invoice list?
        -IF I match directly from the invoice list, I will be left with three neat little buckets:
            -A revised invoice list, with all the returned contents subtracted.
            -An unmatched list, which will get store credit
            -A matched list, which will be refunded in kind.  
        
        The last two, I will have already.  The first  item, the revised Invoice list, I could then push directly to the existing invoice list.

            -So basically, this is a question of whether I want to update the invoice list or not.

            Case in favor:
                + I can probably do it.  Searching for matches is going to be harder, and sorting prices highest to lowest is going to be MUCH harder, but I think I could do it.

                + If I ever do want this feature in the future, I will have to do a lot of uprooting to get it.

                    -Or will I?  I'm not consuming the invoices that aren't matched anywhere, so I think the only code affected would be the matching function.  

                + If I am every showing code in a portfolio review, I might get asked why I don't have this.  "It was too much work" might be a difficult answer.  

                I think I need to get moving on this.  Pushing unmatched back into the store is deep into "Nice to have"

                I'm good with back-burnering it for now.

    For the time being, I'm going to move the function into a separate file.  I'm really just testing the JS code and this makes it a lot easier to debug in the terminal.  

        -Having spent some time with it, I'm really, seriously considering the option to just look for matches in the invoice list directly.  The path TO the items sold is a little longer, but I really don't think it's all that much harder.

        -Do I want to account for the possiblity of more than one price for the same item on an invoice?
            -on the one hand, no.  On the other hand, it's not that much more code?  

24 Nov 2022

    I need to do a little thinking here.  
        -AFAICT, I should NEVER reference anything from the two loop arrays other than keys.  
        -I should never be modifying anything other than the three derived objects - Unmatched Items, Modified Invoices, and Matched.
        -AFAICT, I should only be referencing these as well?


    Well, kind of hard to believe but I've finally got it working.  At least on my sample data, it handled a variety of scenarios.  I think I've been working on this damn thing for at least 2 weeks.  
    
    -I'm gonna try leaving this one as a module and importing it into Returns.  I think it will be a little easier to debug if it's a standalone file?  

    -I'm losing velocity here and I know exactly why it's happening.  I'm afraid that if something goes wrong in the Returns context I will have no way to fix it.  I'm riding a high from my progress and I'm afraid of the crash.  Litany of Gendlin.  I might as well find out.

    -So.  It is KIND of working, but I am getting some weird behavior.  It *LOOKS* like I am somehow modifying the session items and invoices, which should never happen.  

        -I notice I am confused.  What is happening that I do not expect?

            -First, the sessionInvoices state is being modified, which should never happen.  Even more frustrating, session Items are not modified if they are a lower quantity but they are if they are higher?

            -Third, if I enter an item quantity lower than the qty on the invoice, that item and the corresponding quantity appear in Matched.  The item appears to be finding a match.

            -Finally, if the item quantity is higher than the invoice qty, no matched item appears in Matched object, but the unmatched Item is reduced by the correct amount.

        -I don't know what is going on, but the first problem seems the most significant.  No matter what, I need to figure out why that is happening because matchmaking should NEVER alter session states.

        -I'm gonna call it a night.  I'm actually feeling pretty good.  This is a puzzle, but I'm pretty confident the matchmaker is working fine and that was by FAR the most uncertain part.

26 Nov 2022
    -Back in the saddle after Thanksgiving.  NGL, I'm expecting today to be hard.  I know that I am especially vulnerable to time-wasters when I'm not sure how to procreed.  I can't get success-feeling from good sources so I give into my hunger for stimulation from crap.  
    
    -Today can be a good test of meta problem-solving skills.  This really is a unique opportunity to see if I can make good decisions without knowing the answers.  I want to get good results, but all I can control for certain is making good decisions.  

    -The good news is that I HOPE this will be the last hard thing I have to do for a while.  

    -How to attack this problem?

        -I could attack the problem with a bunch of console.log()  It's crude and offers a pretty limited view of what is happening inside the app, but I know I can make it work.

        -I could look more into how to debug React applications.  IF there is a really good way to do this, I think it would be my ideal.  It was so helpful when I was making the matchMaker() module to be able to step through the code line by line, make predictions, and see all the variables changing.  

            Risks:
            -I don't actually know if this will help anything.  I could just come up empty and have nothing to show for the time.

            -I don't actually have a clear picture in my mind of why my current de-bugging tools are unsatisfactory.  

        -I could re-structure the app.  I actually have no idea if having lots of logic in the Dispatcher is good practice.  

            -Like, I could make a case that what I am doing is clear because I've got one action type per input.  User adds an item => do every step involved in adding an item.  

            But I don't know if that's right.  Maybe having one top-level function per action, and once dispatch action per state-change is more logical?

            -This seems like the most risky option.  It is DEFINITELY a lot of work, and without knowing where the problem is coming from, I don't actually know if this solves it.  

            -It also feels like giving up in a way I don't like.  It isn't actually identifying the problem.  It's just throwing away a lot of code and hoping that the problem was contained in what I got rid of.  Worth a try if I am TRULY stuck, but this ought to be a last resort.

    -Here's what I'm going to do.  I'm going to allow myself 30 minutes to do Googling on how to debug React apps.  Highest potential payout, and if I whiff I'm not out a lot of time.  If it looks promising I can extend, but if not I will then move onto console.log()

    -Web searching has indicated that eitehr IDE or Chrome dev tools are common approaches to debugging, although console.log() works too.  I think the case for the dev tool debuggers looks stronger because the people who prefer it generally described why, while the console.loggers didn't really elaborate.

    -Next question is - debug in Chrome, or in the IDE?  


    -OK, so one issue identified in Chrome:  I am passing through a LOT of React framework code that I didn't write and don't especially care about.  This might have been the reason I gave up on this in the past.

        -My working hypothesis is that at least at macro scale, I shouldn't be stepping though line by line - I should be using F8 to jump to the next breakpoint and then crawl line by line if I need to.

    -Current working understanding:
        F8 - either pauses or resumes operation.  I think this proceeds to the next stopping point?  Generally, this jumps me to the next breakpoint?
        F10 - goes to the next function within this particular scope, or up one scope level if it is the last?
        F11 - most specific, step by step ahead?

    -By clicking the appropriate JS filename in the Call Stack tree, I can switch scopes.  This is really helpful because I previously didn't know how to see values outside of the current block.

    2:00 - Made no progress on the problem, but I feel good about the decisions I've made so far.  I've engaged with the work.  

    OK, I think I've identified where at least one problem is occurring.  After I've evaluated the larger of the two qtys, AFAICT that is when the bad change happens.

        -Somehow, when I change the Invoice quantity, I'm changing the actual invoice, not the thing I thought was a copy.  Even nuttier, the change is happening in the Context, too.  How is that even possible?
    
    -According to what I've found, I should not be mutating state in the reducer function.  Why?  No idea.  
        -Am I mutating state?  

    -This article has some clues:  https://dev.to/il3ven/common-error-accidentally-mutating-state-in-react-4ndg#:~:text=In%20simple%20terms%20it%20means,Here%20are%20two%20examples.

    -Assuming I comprehend correctly, this is telling me 2 important things.

        -First, consider: 
            const newState = oldState;
            newState += 1;

            According to this, modifying the newState will actually modify the old state.  It's definitely possible that I'm doing that somewhere.

        -Second, using the Spread operator should prevent this:

            const newState = {...oldState}.  Now, my new state should be a separate copy.

        -OK.  I have an idea.  I wonder if this is all happening because I am not spreading the Invoice Content into a new object.  If I am modifying the context, that might explain why the Invoice state is changing.  It pulls the details from the context, so if I make a change upstream then I might pull in the bad change later.  It would also explain why I'm getting less weird behavior from items, because although I made the same mistake, I'm not changing any values that are stored in the Item context.  Let me at least give it a shot.

            -Didn't work.  Still having the same error.

    4:45: did some Googling and took a walk and I think I have at least a partial answer.  

        const Alpha = {
            val1: 20
            val2: {
                a: 30;
                b: 40;
            }
        }

        const Beta = Alpha;

        Beta is not a copy of Alpha.  Beta is just a pointer to Alpha.  If I make a change to Beta, that change appears in Alpha, too.  If instead I try:

        const Beta = {...Alpha}

        I can change the value of val1 and val2 in Beta without affecting Alpha.  But if I change the values in   Beta.val2.a   those changes will actually appear in Alpha.  Level 1 and level 2 are now separate, but Level 3 is still pointing back to the original.

        This makes sense.  It explains why, despite all my redundant top-level spreading, I'm still modifying the quantity in the product-context store.  Unless I spread absolutely every level, I'm still pointing at the original value.

        That also explains why some of the guides I found encourage us to make states as flat as possible.

        So.  What to do.  

        -I could manually spread everything, but that seems like a huge pain in the dick.  Or is it?  I really just need to spread the Invoices, and I think I just have to do it once?

        -Related: I could try and flatten the invoices, but it could get kind of fucky with the products, since I never know in advance how many there are.
        
        -There is a workaround, which seems to involve converting the object to JSON and then parsing that JSON.  That apparently works because I've seen it suggested in a few spots.  It does seem kind of hacky and apparently doesn't work with methods or circular references.  Right now I don't THINK I have either, so this is the lowest-impact way to move forward.  

        -I'm sure I could find some kind of 3rd-party library that does deep copies.  Lodash CloneDeep appears to be pretty popular.

    That brings me to my second question, whether I should have multiple reducers (called 'slices'), each controlling one property of the state.  I like the idea, but it seems like I would have to do a lot of learning to make it work.  

        -OK.  It's almost 6:00 and I'm losing steam here.  I think what I am going to do is try to get the deepClone working and then call it a day.

        OK.  It's working.  I tried some tests and didn't find any unexpected result.  I think it is actually working.  Let's call it a day.

27 Nov 2022
    Sunday Fun Day!  A couple things I need to be able to do.  I need to:
        X-When a product LI is clicked, console.log its details
        -Create a side panel that displays product details when given a product number.
        X-figure out why TF my icons keep shrinking.
        -Add buttons that allow me to track disposition.
        -Store disposition in state
        -Validate disposition requirements.
        X-Get rid of Vertical Nav component.  It's not doing anything.
    
    For the side panel:  I think I need to change the ReturnsIndex file to accept two additional payload properties.  

    a little stuck.  Right now, the dispatch function of the ReturnsIndex container only accepts which panel to switch to.  It does not accept details.

    I think I could just have a payload.contents property in my state.  I actually don't think I need to maintain it at all.  I just need to get it up so I can pass it back down to the item details page.  

    2:45 - panel navigation is now working correctly. 

    3:25 - I was feeling a little disinterest before my break, but I'm feeling pretty good right now.  Engaged and ready to get back to it.

    4:15 - I no longer feel good.  I'm feeling high effort gravity and a low comprehension radius.  Gonna finish this session and call it a day.

28 Nov 2022

    Next, I think I need to add the disposition state.
        -There are 7 possible damaged dispositions plus one Didn't Want / Need.  
        -The sum of all dispositions cannot exceed the number of entered items.  
        -DW/DN can be calculated last, since it is just the total number minus sum of all DD dispositions.

        -When D/D is selected, there should be a default active state.  Either the first one in the list, or the last one selected.  

        -Selecting any disposition should display its current quantity in the input field.  Changing the input field should change both.

    
3 Dec 2022

    -Back to the real work! I need to remember that the 4 (and even the 20) are not time limits.  I think that for this, some extra writing could really save me some work. !coding !== !working.  Today I would really like to get Item Disposition done.  A few things I know I need:

        X -Disposition is going to live with the scanned items, so I know I need a way to store it there.  I also need a dispatch action to handle it.
            -Should the disposition include ALL categories, or just the ones that have a value?  
            -I think I'm going to have it track all values.  That will make the code a little cleaner.

        -How to incorporate disposition into the matching?  I don't know, but this only really affects the return price so it's not super urgent.  Another thing to keep in mind - AFAICT, I really only need to track the total quantity and the Defective quantity.  If I really want to shortcut the process, I could just track those.

        -The real action is going to be in the disposition 30 panel itself.

            In the 30 panel state, I need to store:
                -Which tab is active
                -If Defective, which disposition is active.
                -I need to track a dispoObj, since that part of the payload is what will be used to update the session Item disposition.  
                
                

            -I need a way to read the stored disposition from the Session items state.  
            - I need a way to get the sum of all item dispositions, and that sum cannot exceed the total item quantity.
            -Whenever a Defective disposition is selected, I need to:
                -read its current quantity from the Session Items Disposition object.
                -Display that quantity in the Sessions Disposition object.
                -Check that this dispo quantity + all others does not exceed scanned quantity for this item.
                -Update the item.disposition[whatever] property.
    
    -12:20 - not doing super great on time.  I'm definitely distracted by that Spinnaker Bradner watch I just found, plus the fact that Mom is waiting on me to make a Christmas request.

        -I think the thing to do next is to handle the Tabs and whichever Defective button is selected in the ItemDetails page.  I know I'm going to need that and it doesn't require me to make any hard decisions right now :)

    2:00 - I am kind of hitting a wall here and I suspect it's because I haven't been eating.  I think the actual most productive thing I could do is take a few minutes, slam some food, and take a SHORT walk.

    2:30 - back at it.  First little task will be to populate the dispo buttons and make them activate with a click.

        -Now, potentially the hardest task.
            - the thing I want to do is pull the quantity directly out of the session Item state, and have the input update it directly.  The reason I want to do this is because AFAICT I don't actually have a button to submit this form, and I think that would be frustrating to have to remember to submit or else your item is lost.   Can it be done?

        -If I can get it working, a QoL addition I want to add is to have the test reflect the qty scanned.  But that is later.

        -I might also move the Quantity input into the Condition Picker?  It's not like it can be interacted with elsewhere?

    5:55 - I have actually accomplished what I set out to do today.  I'm not sure how it happened except I kept doing the next thing and suddenly the problem was gone.  I'm also very proud of myself for identifying the fact that I was replacing the state with just the item and disposition.  I feel like I could go for another three hours, which experience has taught me means that I'm about 40 minutes from being sick of coding :P

    I also learned a new pattern.  You can real-time update an outside state just as easily as a state within the component.  No theoretical reason why it shouldn't work, I guess, but I'll be a lot more comfortable in the future because I know it works.  When I'm taking my walk and thinking about how to be a better coder, I should think about why this correct answer wasn't my initial thought.

    Maybe it's the Adderall but I'm legit feeling amazing right now.  I would have accepted partial progress as a good day, and I actually solved the whole thing.  Now I just need to decide which QoL improvements are my highest priority.  Options are:

        -Figure out the quantity validation.  This should probably be the choice as it is the only one that is actually necessary for the project to function right.

        -Show quantities on all the disposition buttons.  Might be worth putton off because it's not necessary but would be a GREAT get-into-flow starter for tomorrow.  Might need useEffect because I don't want appearance changing as the user is typing.  This will be the trickiest part for sure.

        -Figure out how to use refs.  There are a number of inputs that I would really like to autofocus given various conditions, but again, nice-to-have.

        -The buttons do need CSS, but it's tempting to leave it out since it doesn't affect anything else.  Necessary, but no dependencies.

        -I actually do still have a frog to eat, and that's figuring out where to put the input field.  I could definitely leave it.  I actually probably should leave it, because it reflects the app as it currently exists.  

        -I should also change the input so it's inactive when the Unwanted tab is selected.  Right now, any input there changes the current Reason quantity, which is not what I want.  Also, Didn't Want should never be adjustable.  It's just what's left over.

        -At some point I do need to go through ItemDetail30 and make sure it's well-commented.

    Gonna do the quantity validation.  It's the logical choice.  First, I think this validation can live in the Item Details component.

        -I will need to loop through the disposition array and get the sum.  But when?  Maybe prior to input?  I think I can set a max value to the input field, and that would be nice to know.

        -The other question is a UX question. 
            -First, how do I handle a situation where the user inputs a quantity larger than the undisposed quantity?  If I just set a max they can't screw it up, but there's no indication why they can't enter the number they want to.

            Also, I think I need to use the max?  The state is being updated as they type, so if they exceed the max, I can't have them just going ahead with that value in the input field.

            Finally, how do I show the number of undisposed items?  If you don't know that, you don't know the max you can enter.

        -Almost right on cue, I am sick of coding.  For tomorrow:  I want to start on some standardized text styles.  I think I will apply them to this work and MAYBE add them retroactively.
    
-4 Dec 2022

    Today might be a struggle.  I slept like absolute shit last night because I lost control of my mind and couldn't stop thinking about that Haikyuu point-buy-team building game.  I also need to not think about the game today.  It sounds funny to say that I have to avoid fantasy football like heroin and I do play it for laughs, but like, I legit lost control.  "Just a little more, I'm sure this next idea will crack the problem"  I genuinely wish I'd never found it.

    OK, on to the work.

    First things first.  I'm going to make a list of some important pages, check them for common text styles, and try to create a CSS file to capture the important ones.  This will not be fun, but I'm redoing a LOT of work with these damn text styles and I would really like to stop it.  This will not be fun, but if I don't do this now it's going to be re-work later and this task MUST be done at some point.  At the end of 20, I would like to have a list on the way.

        Just wrapped up the 20, and I think I have the list.  Honestly doesn't look as bad as I expected (although that's partially because I haven't built as much UI as I hoped.)

        Next thing to do is see if I can find some guidelines about how to name things, like what tags to use and such.

        -Looks like it's just <p>, <h*>, and possibly label.  

        -I think the next thing to do is to create some default elements in a CSS text style file and get after it from there.  I'll do one more 20-minute run and then start a longer one for the reassignment.

        -OK. Gotta go through the files and look for text fuckery. This task is going to suck, but I just need to dive in and make it happen.  One way out!

        -related to nothing, but I also need to remember that part of the reason the UI hasn't moved in a month is because I also had to solve the flexbox / table scrolling problem.  That involved a lot of knowledge-building and rework.  

    3:15 - back after it.  I'm proud of myself.  I kept my short break short, and I'm still feeling pretty good.

        -I'm gonna get the 3 completed 30-panels done, and then dig into the disposition setter.

        -Ok, all the cleanup is done.  I'm back at the starting line.  

    4:15 -Starting to feel a little loss of steam.  I'm gonna go until I'm not having fun but I already consider today a win.  Those app-wide styles were something that needed to happen.

    5:00 calling it a day.  Gonna take a walk and think about what to do next.  I can either add in validation or consider what would come next.

5 Dec 2022:  69-420 for work.  I'm planning to make sure my Figma screens for the SOS restocking fee are correct, then I will find an appropriate location and post them.  I need to confirm with Kristin that we can ask our outstanding questions in tomorrow's Returns team meetings.

At some point today I need to message my doctor and get the ball rolling on next steps for my knee.

The first coding thing I should do is box up the process for Github Pages,

I think if I really blaze, I could complete my work tasks in the 20 section :)



-7 Dec 2022.  
    Well, for some reason, I seem to have lost my styling changes in the Item Details section.  I'm not sure how, because they were present in the working protoype I showed Liz.  And also some but not all of my styling in RefundTotal?  And my notes from 7 Dec.
    
    I was at least able to roll back and address whatever the problem was with the ItemDetails.

    Next, I need to figure out what's wrong with the RefundTotal.

    Remember to change Returns reducer to make sure it re-evaluates if the disposition changes.

10 Dec, 2022

    69-420:  I think the DispoMatcher is actually in pretty good shape.  I got about halfway through it on Thursday and it was mostly doing what I expected.  The 'Watch' section in VS Code is really nice, and I need to find its equivalent in Chrome.  (Update:  the feature exists in Chrome.  I haven't used it yet, but the terminology is the same)

    I also feel slow, dumb, and heavy, so worried about today's outcome.

    -Get the matching module to account for dispositions.

    -Add a check to the Dispositions to make sure that total dispositions are always equal to items entered.
    
    -Figure out how to handle the Unwanted items.  I either recompute every time or else I need to store total items entered separately.  

    -Make sure that changes to dispositions are triggering the Matching process.  IIRC matching only happens when an item is added.
        -A side note to this process.  I might want to ditch having a separate Action for changing dispositions, and just handle it as an 'ADD_ITEM'

    -I think I'm going to start with the Quantity / Dispositions question.  It's not a HUGE change, but it will affect how I do the matching so I might as well do it first.

        -Right now, I'm kind of thinking I should track total quantity separately.  I need it for:
            -the display table.
            -I need to have a total to calculate Unwanted, since it's always the remainder.  If I don't store it, I have to re-derive it.
            -I need to store a total to calculate the upper limit.
            -In the MatchMaker, it would simplify the check if there are any items remaining.  

        -Looks pretty clear right now that I should store the total.

        -Next question is how to store Unwanted.  Options are:  

            -A method that, by hand, names all of the properties EXCEPT Unwanted and sets Unwanted to total - (result of the method)
                -This is pretty reliable but kind of crude?

            -Copy the object, delete Unwanted, sum all remaining, set that to index?

            -Put Unwanted in some notable position, like first.  Make object into array, delete first term FROM ARRAY, then assign Unwanted to that sum?

            -I was going to say that Unwanted is calculated only once, but I guess that isn't true.  It's also calculated when an object is created.  

            -The reason I am stalling is because I don't know how the object I plan to create will behave.  I suppose the correct thing to do would be make a test object and check on that.

    1:00.  If there is any easy way to set a property's value from within the function, I haven't found it.  What to do?

                -I don't technically have to set the value of Unwanted within the object.  I could create the empty Disposition object and then set the value of Unwanted from outside.  

                -It's also not a requirement to have Unwanted within the object, but it makes the Matching logic more complicated.  

            -Let me back up a step.  In the ItemEntry component, right now I am currently just adding a quantity.  I suppose that either here or in the actual ADD_Item action, I could just automatically add that quantity to Unwanted.  
                -but what does that solve?  
                -I guess that IF I want all changes to an item to be handled in the same action, I need some clean way of turning an item with one disposition into an item with another.
                -the reason that is good is because if all dispositioning is happening in the same place, I could do the Unwanted calculation there.

            -I also really could handle it in the Matching system.  Whenever matching is called for, I can just calculate Unwanted there.  
                -My feeling is 'I don't like it'.  Feels dirty somehow.  It feels like I should always have the state as complete as possible.  However, I don't really have a better answer and this gets me moving.  
                
                I suppose I could justify it by saying that 'Unwanted' isn't a real quantity.  It's not being used anywhere before the match.  
                It's not a duct-tape workaround of my limited knowledge of objects, it's a clever solution to simplify the logic of the Matchmaker :P

            -Also, potential problem:  what happens when I add new items to items that already have dispositions?  NVM, past-me already handled it :)  Preparation is a gift to your future self :)

    -3:15  You are stalling.  You don't know what problems you'll encounter and you're afraid you won't be able to figure out a solution.  Don't be scared.  We've got the debugger.  This is so much easier than how we used to debug.  Get in there and press that green arrow.

11 Dec 2022 - 
    69-420.  The past two weeks have taught me that the name is important.  Every time I'm tempted to skip, my inner 14-year-old says "yeah, but...hehe...69-420...heh..."
        The VERY first step is to get in there, cycle through the Matchmaker, and find out where it's all going wrong.  I feel like we're close.  I would not be surprised if I had enough time to get to something else this afternoon.

        -The next next step is going to be to look at the Disposition inputs.  It's very important that the total dispositions do not exceed the quantity entered.  
            -I think the way to do it is to use the Quantity as a maximum value.  The logic for how to handle a larger input is still TBD, but I've at least got the component set up to show an error messsage.
        -The last little feature would be to make the buttons show show the total number entered.  this is acutally not a great solution, but I'll have to live with it.
        

        -A small little morsel:  the Item Quantity input should have a minimum value of 1.  Nobody should be entering 0 or negative numbers.

    2:30.  OK.  Decision time.  Right now, the Matchmaker appears to be working, but it isn't 'squeezing the air' out of the disposition objects.  Right now, if I match all of the items in all invoices before going through all of an item's dispositions, there are going to be some dispositions with a value of zero.  I don't know what the downstream effects (if any) are goign to be, but it feels sloppy.  Options  are:

        +Do nothing.  I'm spending time and focus on something I don't even know will be an issue.
            -This feels sloppy.  In my mental style guide, each step in the process should do as much refining as is practical so as to not create problems down the road.
                +If we're doing the next option, this is fine.  In fact, this is fastest.

        +Change the input so that I don't put in empty dispositions in the first place.  If we're REALLY sticking to the aforementioned style guide, THIS is where that pre-fining should actually be happening.
            -This will happen at some point, but I just want to get this damn module working and if there's a problem I now have to chase it through three components and not 2.
            -I'm PRETTY sure I can do pre-finement in the Product Details section, but not 100%.

        +Squeeze in the module.  I think the place to put it is right at the top.  I have to loop through each dispo object anyways because I'm summing their values to get Unwanted.  I could add in a quick condition that deletes any properties with a value of zero.  That will save me quite a few loops AND it ensures that the squeezing happens even if there are NO invoices that have the product.
            -This is spending time on a feature we hope won't be in the final version.
                +Just do it and add a big old comment to take it out once the pre-finement is set up.  And maybe a note in the running To Do list so I don't forget.

    I'm gonna go for Option 3 and do the squeezing in the module.

    4:05:  Fuuuuuuuuck.  Edit: NVM, not fuck.  If the disposition quantity is greater than the invoice quantity, the program WILL loop and check the next dispo, but after that fails it will try to match dispositions from the top in the next invoice, and it will start with the disposition that wasn't fully matched previously.  That was scary.  I thought I was gonna have to do some deep rebuilding.

    4:55 - OK.  I put the new module into the app and tried a few things.  I still need to figure out how it is that I am going to call the Matchmaker when disposition changes, BUT!  The matchmaker is working!  I admittedly didn't put it completely through the ringer, but it did appear to be making its matches correctly!  Excellent!

17 Dec 2022
    I've been sick the last few days, hence the lack of progress.  But I'm feeling good enough to get back after it!  Now, the eternal question - what to do today?

    -One thing I think needs an answer is a plan for dealing with the Scanned Items state.  Options:

        -Have one reducer for all additions.  In every case, payloads to this reducer carry everything they need to re-assemble the new Item object and then replace the existing session item.  And remember, payloads are only coming from two places - Add Item or Item Disposition.

            -I think I'm kind of leaning this way right now.  I had this idea that separating the two would be a lighter operation because it was only updating the disposition, but that's not actually true.  In both cases, I have to clone and replace the entire item state.  

            -It's also a much simpler conceptual model.  In fact, I might even change the name to EDIT_ITEMS because that's what I'm actually doing.  

        -OK.  We've got a direction.  The next thing to do is figure out how to handle the incoming dispositions.  My cases are:
            -A new item is added:  Add a new, empty set of dispositions.
            -An existing item is added: The dispositions are whatever that item already had.

            -The other thing I should keep in mind.  I'm currently envisioning having a whole empty Dispo object that I squeeze later, but it would be cleaner to ONLY have dispositions for items with a value.
            Maybe the correct approach is to do it with the whole empty item for now?  I can already do squeezing in the Matchmaker so it's not like this will be a problem.

            -All incoming items have a Disposition payload.  If the payload is empty, use the existing payload.  Else, use the payload coming in.  
                -I have to remember that there will never be two payloads with values being added together.  Any payload with numbers will be coming from Item Details, in which case I am just cloning the existing dispositions, changing them, and sending them back.


            All items from the Add Item 30 panel will come in with an empty disposition.
                -That's not quite right because 

            -mind bouncing around a lot right now but at least I am not bored!\

            -If the incoming item has a disposition, use that disposition.  Otherwise, use the existing dispostion.  If there is no disposition, create the empty one.  

            This will work.  I just have this feeling there's a simpler logical approach.

            -If the payload contains a disposition, that is the new disposition.  Otherwise the disposition is the old disposition.

            OR - {... oldDispo, ...newDispo} ? I think if you call the spread operator on undefined, you just get an empty object?

        I did some tests and it works.  You can spread undefined into an object and it will just return an empty object.  OK.  So I think that's the new logic.

        More decisions.  I tried making a new Disposition Input with a fake name, and it actually did update the Returns state with the fake name and value, although I'm getting some 'Controlled State' errors.  (NVM, solved by providing a default value of 0)

        Here's what I think.  I guess we could do the squeezing here, but I don't see any problem doing it in the Matchmaker.  I still have to have the squeezing because even if I start with an empty Disposition object (i.e. NOT a full disposition object with all values set to 0), I can still have disposition categories with values of 0 - if I fill the field and then delete it.

        I think this might be time for a branch, since I think I understand this all but I could run into a disaster.

        OK.  Time to stop and reflect.  I think I now have the ADD_ITEM function working correctly.  I also learned some REALLY useful new tools:

        The first is the Nullish Coalescing Operator (  ??  ) It's similar to the || operator, but the Or operator returns the second term if the first term is ANY falsy value, while   ??  returns 2nd term ONLY if the first term is null or undefined.  If it's falsy, that gets returned.

            false || 13   -- returns 13
            false && 13   -- returns false

        The second thing I learned is about the TypeError.  I think I've unknowingly been running into this a lot.  TypeError occurs when you try to do an operation on an element that can't support it.

        const one = undefined
        one.two = abc

        I won't be able to read either of these because the program with throw a TypeError before I can even get to the end of my declarations.  the [ . ] operator means "the following property out of the proceeding object.  Well, undefined isn't an object!  There's no property to get,and so JS won't let me try to define it, even if it might become an object later.

        that brings me to the third thing I just learned, the Optional Chaining operator (  ?.  )  This checks if the preceeding term is defined before evaluating its following property.  So from the previous example, if I write
            const three = one?.two
        then   three   will be undefined instead of giving me an error.

        This could really clean up my code because I have SO MANY 'Do you even exist' checks before doing things.  Wow.  No matter what else happens, these three learnings have already made today a win :)

    4:50 - I'm now successfully updating the dispositions via ADD_ITEM.  I've now run into another problem.  No matter what defective reason I have selected, entries in the input field are just updating the default reason.  The defectiveReason state does change when I switch the tabs.  

    OK.  Sweet.  It's now working just like I wanted.  Maybe time to test some matching?

    Looks like we've got another problem.  My Unmatched invoices aren't totaling up correctly.  
        -When I add the first disposition, everything's fine.  Unmatched shows that disposition and quantity, and then whatever's left is recorded as Unwanted.
        -When I add a second disposition, it appears correctly along with the first, but Unwanted is now gone.
        -Adding additional dispostions also works as expected, but Unwanted still doesn't show up.

    My very first thought is to do the Unwanted check in the ADD_ITEM case.  I don't feel great about it because I haven't actually identified the problem, but I guess I should try it and see if it works.  I'm not hacking, just gathering a data point.

    It's still not working, but I have a hunch I know where it is and so I've got a good place to pick back up.

    Ha. Well, I changed the ItemDetails30 to make pass back integers and not strings and now it's working perfectly?

    Well, not perfectly.  Deleting an invoice isn't working, but that REALLY is a problem for tomorrow.

18 Dec 2022

    OK.  Did a little more work last night while the pizza was cooking and it appears that invoice deletion is working correctly.  I'm not 100% sure but it really does look like the Matching is working correctly.  

    Next two tasks on the menu.  First, I need to make it so that the total qty of dispositions does not exceed the qty of items scanned.  

    I also need to figure how how to handle the deletion of the item currently being shown in Item Details.  Ideal behavior would be that if the item is deleted, the 30 panel would then navigate to the Item Entry screen.  
        -Ha.  I legit expected to struggle with this one, maybe even taking the rest of the day, but it's done.  

    11:40 - I'm about an hour in and I feel really good.  I don't quite understand it because I slept like shit last night but I feel engaged and smart right now :)

    OK, I've been kind of fiddlefucking around with getting the display state to show empty instead of zero and not dispatch any falsy values but that's really not blocking any progress.  It's just not as clean as I would like.

    What I need to do is figure out the sum evaluation.  
        -After fiddling with the HTML max property, it appears that it doesn't actually restrict the user from entering the value.  So I could have a total of 20 items, and I'm actually not restricted from putting 21+ in the input field.  In a way this is good because it makes my decision for me.  I will have a check on the input field, and if it's out of range I will show an error message and not dispatch.  I think.

        I really do not like that there isn't a form submit button.  I can't really check and make sure everything is tight before I send it.  The problem is that each input is representing 2 things that aren't necessarily the same.  They're representing the user's input, and also the value in the system.  

        I wonder if I could separate them.  Like, every time the page is refreshed, I get the existing disposition object.  Whenever there is a change, I check the validity.  If everything is valid, I dispatch the update.  If it isn't, I do not.  So far, so good.  That lets me do everything I want.  

        Here's the one issue I see.  If the user inputs a bad value, they don't necessarily know they haven't changed the value in the system.  And if they navigate to any conditions that have values, those other conditions are going to show errors, too.  

        I also need to be careful not to over-solve this problem.  At this time, I've already departed from the live app, since that doesn't let you enter more than one disposition.  I hate this input style because I don't think it represents the business logic, so any work I put into this current version is work I am hoping to throw out later.  

        OK, absolute minimum:
            -Conditional dispatching.
            -Show an error if conditions are exceeded.
            -I need to create an invalid input field CSS style

    1:20  Definitely losing speed here.  I'm gonna make a quick mail run.  Maybe that will clear my head.   

    2:30 - Not exactly the break I was hoping for, but I'm back after it.  I think I'm gonna do one more session and then call it a day.  Let's re-evaluate.
        -I've got the sum-checker working (I think)  I need to figure out WHEN to check the sum, and my responses to the potential outcomes.
            -I think once an input is made, we check that input's value against the unassigned quantity.
            -If the unassigned quantity is smaller, we run our Error procedure.  We DO NOT dispatch, although since the values are linked I don't actually know what happens to the contents of the input field.
            -If the value is legit, we dispatch and proceed as normal.

        -OPTIONAL:  Prior to dispatch, I could also squeeze the upcoming dispositions object.
            -DOUBLE-OPTIONAL:  That would potentially allow me to go through and have 

    5:40.  Going to stop for the day.  Haven't tested hard but the ItemDetails disposition setting appears to be working.  It's adding to the total and not dispatching any input values that would push it over the total.  

    However, the inputs are behaving weird.  Like if I'm near the limit and I try to enter 12, it will accept the 1 but won't let me add the second character.

    For next time:  I think what I need to do is get the item dispostions from the session state.  I need to then CLONE that object in a local state, and do modifications to the local state.  Whenever the local state becomes valid, I dispatch to the session.  Until then, it stays local.  

    That's a pretty cool model.  I should probably remember that for other things.

    6:45.  My dispatches to the Returns Session object are one step behind the local state and I don't currently have the brainpower to figure this out.

    For tomorrow - try putting the dispatch to Returns outside of the onChange loop.  

20 Dec, 2022
    69-420 I know EXACTLY why I don't want to start today :)  I don't truly understand the relationship between state and re-rendering, which means I don't actually know why my app isn't working, and I don't truly understand the de-bugger, which is why I fear the frustration of it behaving unpredictably.

    That said, this does need to be solved, and if I can't do it the way I have in mind, I have plenty of dirtier alternatives.  IMO first move should be to do a littl reading about state and rendering and see what I can find.

        -OK, from the documentation:

        1. The dispatch function only updates the state variable for the next render. If you read the state variable after calling the dispatch function, you will still get the old value that was on the screen before your call.

        2. If the new value you provide is identical to the current state, as determined by an Object.is comparison, React will skip re-rendering the component and its children. This is an optimization. React may still need to call your component before ignoring the result, but it shouldn’t affect your code.

        3. React batches state updates. It updates the screen after all the event handlers have run and have called their set functions. This prevents multiple re-renders during a single event. In the rare case that you need to force React to update the screen earlier, for example to access the DOM, you can use flushSync.

    That...was not a waste at all.  That was actually really helpful.  I've learned a few things.  First, AFAICT it's OK for me to be batching multiple state updates together (#3).  I thought that was my problem but it looks like I was wrong.

    Second, AFAICT, the state variable doesn't actually change when it is dispatched.  Like, the dispatch will happen, but if there's any code after the dispatch, that code will run before the re-render.  I think that's why my global state was one step behind my local state.  I was updating the global state with the local state's value, and because state updates are batched, the local state didn't yet reflect the new values.  

    I think if I dispatch to the global state with the same dispos object variable I used for the local state it should work?  

    OK.  Working correctly now, but a slight snag.  For multi-digit characters,each subsequent digit is dispatched separately.  If I enter a multi digit number where the first digit is under the limit but the second digit is over, the first number gets dispatched and the second does not.  Options:

        -It's not the end of the world.  Going over will show the user an error and directions to correct it.  Remember, we want to get rid of this whole input pattern soon.  Don't fix something that's getting discarded anways.

            -My main objection to this is that it's doing something the user wouldn't expect, and it is happening out of sight.  If I'm typing 12 and the second digit makes it invalid, I do not expect that the first digit has already been applied.  

            -OK, here's another crazy thought.  What if: on every change to the input field, I evaluate the input contents.  On every content change, I dispatch contents to local state.  If qty is valid, I dispatch it to global state.  If not, I dispatch null?  

            Right now I think that's the least bad solution?  I think it's at least more in line with expected behavior.  If my input is wrong I wouldn't necessarily expect it to be dispatched.

                Here's the snag.  If I switch to any other input while I'm over the limit, that is also going to be wrong, and it's also going to be dispatched as 0.

                -What if.  On every Damaged button click, the local state dispos object gets set to the value of its global counterpart?  Like, as soon as the user clicks away from any field, the local dispos get reset?  Quantities only get submitted if they are valid, so every other quantity other than the one they just entered will be as it was.  



        -What I REALLY want is for the local state to handle all the state changes, and wait a while to dispatch to the global state if the local state is valid.  Basically, I want Submit without the Submit button.

            -I could do it when the Product Details component unmounts, I think.  The problem with that is that if any part of the form is valid, ALL dispositions would be lost, which is shitty.  

    It's annoyingly hilarious how much every problem keeps coming back to "none of this would be a problem if there was a Submit button" 

    I also can't escape the feeling that I am making this more complicated than it needs to be.  

21 Dec 2022 

    On the docket for today:
        -Need to figure out how to display the warning, probably with a side effect.  
        -I should look into how to use refs.  I want the input field to be focused every time someone clicks one of the disposition buttons.
        -Before I get farther, I should probably figure out how to handle tax.  Like, it's not going to be fun but if I don't handle it now that could legit bite me later.

        -First.  The display warning.  I THINK I can just handle it in the input change handler?  

    12:00 - I do know why I am stuck.  I feel like I am violating DRY because I'm doing similar operations in similar places, but I don't know what would be better.  Just right now I feel not smart enough to find the patterns.  

    I also just found out that the current app DOES use a Submit button, but since I think the local validation is important and I wouldn't want to have to re-create it in another prototype, I'm just going to keep it for the time being.

    Just really not feeling the magic today.  I think I'm going to skip the redose, but I will try to work up until the painting party - which I am also not at all sure I'm going to do.

    4:50 - Got the painting party going in the background, so glad I decided not to participate.  My intuition that the existing code was flabby and repetitive was totally correct(I think).  I had a cool new insight:  since we're treating each change in the input independently, I should delete the current property being evaluated from the local Dispos obj IN EVERY CASE.  If the value has changed, the old value is meaningless.   Now I am having fun :)

    Mostly working.  Bug to attack tommorrw - I get the error message when I backspace a formerly valid number to "" in the input field.  Otherwise appears to be working correctly!

    Today started out bad and I'm glad I stuck with it.  This turned out really well.

22 Dec.  I can't remember if I already took a pill this morning, so I am taking one now.  It's either going to be a good day or a REALLY good day.

    First thing to do:  I am going to use my new debugger tools to try and re-create the error in the Item Entry field.  

    -I also need to turn off the increment arrows

    -I also need to clear out all the commented code.  That SHOULD be it for item entry. 

    -OK, looks like the problem and solve are pretty clear.  Turns out the typeof NaN is ... "number" :/   Yes, kids, Not A Number is actually a number.  Any numbers added to NaN disappear in to the void, resulting in Nan.  So, the first condition acutally failed to separate the NaN conditions, allowing a non-number value into the system.  The larger or smaller evaluation included the inputQty, so that evaluates to NaN, and because we are checking relative sizes of NaN and a number, it always evaluates to false.  My returning objects are false by default and they are never modified, so the IsValid state returns false.  Hence the error.

    And I doubt I would have figured this out without the debugger. 

    Also, I want to record this because I think this is actually a turning point in my growth.  I think I needed two additional tips to use the debugger.  The first was to use custom break points.  Because I'm using a framework, Step Into (F11) would take me through a long and incomprehensible sequence of framework code any time I used React-specific methods (like useReducer) in my code.  And also you can't step back, so if I was frustration-clicking to get through all the boilerplate there was a decent chance I would blow past the code I actually wanted to see entirely.  By using custom breakpoints, I can make sure I'm stepping where I need to.
    
    The second, related change was to set the F5 key to be 'Unpause'.  I remember having all of these frustrating moments where I would be stepping through with F11, get frustrated, hit F5 to step ahead, and then find myself back at the beginning of the program.  Well, the connection that I failed to make was that the Unpause key is different in Chrome and VS Code.  Chrome wasn't behaving unpredictably - it was refreshing the page, which is what browsers are supposed to do when you hit F5.  I think that was also the source of a huge amount of frustration.

    Finally did it!  input validation is finally working just how I want it to :)

    -The next thing is to figure out how to handle tax.  I really do want to move on, but the RefundTotal component is used in other places and if I don't address it now, it could cause rework later.

        I am HOPING this shouldn't be too hard.  I THINK all I need to do is add a   tax   property to each invoice product's object, next to price and quantity.  I'm representing "How much you paid, and how much of that was tax"  When I am matching an object, that price and tax can just be copied together.  With quantity, I can calculate the total tax and total price.

        I don't want to go with a single rate because, like I saw in Connecticut, not all products have the same sales tax.  Like if a state has a sugar tax and the customer bought a soda, they would pay different from the normal sales tax.

        -I've also realized that the TRUE full form of this product would accept multiple payment methods on an invoice (like using up the last of a gift card and then paying the rest in credit) and might need to have multiple quantities per item, but I don't want to have to deal with that right now.

    -instead of thinking in my head, I suppose I could think on paper.  
        -I did what I needed for the matchmaker.
        -I'm now looking at it and I want to make 2 changes.  
            -First, I want to use the squeezer at the start.  I think this is actually what I cloned the squeezer from.  This one I should probably do.
                -I might also change the output names.  Right now, the squeezer is only used in 2 places.  Again, now would be the time.  

            -Second.  More dicey - I notice a lot of repetition in object values I'm referencing: like  one[two].three[four] which I could and probably should clean up with variables.  BUT.  Do I really want to spend even more time on the Matchmaker?  

            -If I'm going to do it, now would be the time.  I'll just be adding dependencies later and it will get harder to change.

    -Seems to be going OK, but I ran into a bug where an item matched and it had an empty dispos obj in its array.  The item was 200, qty was 4, and I had AAA, BBB, and CCC invoices scanned.

    -OK, got it.  Matchmaker is now working, I put it through a couple scenarios, and so far it is working as expected.  

    3:00 gonna have some Soylent and get back to it.  I feel pretty good but I also feel like if I lose momentum it could be hard to get back.  10 minute timer, go!

    UGH.  For fuck's sake.  Now something else is happening in the matchMaker.  

    OK, problem fixed.  
        A couple of takeaways.  First.  I am a little concerned about the fact that I still don't REALLY have a conceptual model for what the Matchmaker is doing.  I really wish I could conceive the fractal pattern.

        Second.  I REALLY need to remember to not do multiple changes between commits unless I am REALLY confident.  I took a LOT longer to solve that problem because I assumed the problem was truncating my object 'addresses' with variables, when it was actually that line that check if the invoice still contained any of the item in question.  

        Also.  You know what?  Good on you for noticing the problem!  You at least know enough to know that a matched item should NEVER have 2 of the same dispostion in two different arrays.  The Matchmaker clears out every disposition sequentially, so that can never happen if it's working right.
    
        -FINALLY for the Returns Total.  Feels weird to be looking at this again, like it was so long ago :/

            -I now think the Return value calculator should be a separate module.  

            -First, we need to get the Matched Items from the Returns state.
                Loop through each matched item
                    Loop through each item's array of matched objects.
                    For each object, apply the Adjuster()

                    For each Matched Item, we should get:
                        Total paid sum
                        Tax sum
                        Adjustments (if any)

    SessionItems: raw count of all the items scanned in.
    SessionInvoices: raw count of all invoices being considered.
    matched_items: a list of all items that have been matched.
    unmatched_items: a list of all items that have not been matched.
    
    returnTotal: {
        refunding: [
            {
                orignalTender: "cash"
                refundTender: "store credit"
                refundAmount: 123.45
            },
            {
                orignalTender: "Visa ****1234"
                refundTender: "Visa ****1234"
                refundAmount: 8.76
            },
            ...
        ],
        refundTotal: 98.13
        subTotal: 78.10
        tax: 10.03
        adjustment: -10.00
    }

    So.  

    MATCHED_ITEMS will take SESSION_ITEMS as its only input.

        RETURN_TOTAL will take MATCHED_ITEMS as its only input.

        Adjuster() will take accept an object of all MATCHED_ITEMS, go through them, calculate price Adjustments based on conditions, and return that list of items along with an Adjustment property for how much the return value is getting reduced.

    I think that means that any manager overrides need to happen at the level of SESSION_ITEMS.  BUUUUT.  Some of the declines can only happen after the item is matched, like if it's past 90 days.

    And the problem with making adjustment-adjustments at the level of MATCHED_ITEMS is that MATCHED_ITEMS isn't stored.  It's recomputed literally any time the state changes, so any overrides applied here wouldn't even be kept.

    How about this for a model?  AFAICT, there are no adjustments that interact with an invoice.  
    
    I think that Adjustments happen for an individual item, like the SOS restocking fee.  That should live on the item {actually, in the that item in the product-store}, and manager interaction just removes the adjustment from the item in SESSION_ITEMS.  Once it's gone, it's gone.  Since it happens in SESSION_ITEMS, I can recompute MATCHED_ITEMS as many times as I want and the MO will still be in effect.

    Meanwhile, for the outright rejections, manager override takes place in the derived states.  What I'm thinking is that that I'll have a separate OverRider() that accepts UNMATCHED_ITEMS, goes through, and generates a Magic Invoice for all legal (non-ARD) unmatched items in the cart, with the return tender set to Store Credit.  It then adds that invoice to the list and all remaining items get matched.

    Could also work well if customer is LVC.  If you are in the sytem, you just get the magic wand with no further input required.

    I like it.

    That still doesn't tell me what to do about ReturnTotal, though.  I also don't know what to do about ReturnTender types, or when those are computed.
        -Here would be my guess.  The unique key is the tender-in / tender-out pair.  Tender-in is always known.  I think that screen with the green circles is where tender-out is determined.  For any with no choice, it just grinds through automatically, and if there are any uncertainties, that's where the associate is asked to make a choice on screen.  I think that builds your complete list of return modes.

        -That's also good for me.  I think for right now, I can just calculate Total, Subtotal, Taxes, and Adjustment for the ReturnsTotal component.

    I'm also a little unsure what to do with the dispositions.  Like, if it's Defective then we don't apply the restocking fee.  When do I calculate that?
        -First of all, this should be a VERY limited case.  I actually only think it applies for an SOS item that has been damaged.  
        -I think the rule should be that if there is an adjustment it applies to all non-damaged items, unless there is a manager override in which case it is removed entirely.

    -I remember.  Receipt Date.  I mean, the easiest is to add a condition in the matchmaker that just doesn't count the receipt if it is older than 90 days.  The ONLY catch that I see is I think we have to show too-old-receipted returns separately.  I guess my tentative solution would be to have a separate function that goes through the Unmatched items after the Matchmaker, looks for matches with old receipts, and stores them somewhere else.  That's a simple-enough add later that I think I just ignore it.
    
    Now, for ReturnTotal.  We have some flexibility when to calculate adjustments.  Those could happen at any time ReturnTotal outputs.
        -What I'm thinking right now is I add a Special Conditions object to each item in the product catalog.  This will specifically hold things like ARD and SOS.  

        -Next, I have an Adjustments() method.  It will look for anything that changes the price, like SOS.  All adjustment percentages live in this tool so we don't have to change 50 billion entries if I decide to change the percentage.

        -Oh, fuck.  The percentage.  That could change too.  That is going to change, too.  We're going to give the manager the ability to adjust fees.  And I think it's per item.  OK, well, never mind.  

        -I mean, I guess the VERY easiest way would be to have an adjustment % on every item.  Maybe in my Special Conditions object, it looks like {SOS: 0.2}

        -Then, if there is a manager override, that percentage is changed on the SESSION_ITEMS.

        -If the adjustment percentage lives on the item, I also have the ability to display it, its percentage, and its reason code on the list of items, although I still have no idea what to do on price.

        -If there were ever a situation where multiple adjustments collided I could put the logic for it in the Adjuster.

        -No matter what, the end result of running MATCHED_ITEMS through the Adjuster() is going to be a modified version of MatchedItems where each object includes an Adjustment property along with price, tax, and quantity.  That will be the amount by which to reduce the return price.

        -Because of this, I'm now wondering if the Adjuster() should happen at the end of the Matchmaker.  Or maybe even in the middle?  Or, actually, I think it should be happening on ADD_ITEM?  Like, at that point we should already know everything we need.  Wait.  No.  We don't, because without the invoice we have no idea what price we should be adjusting.  OK, I think within the Matchmaker is correct.  

        -What if more of the same items are added later?  Adjustment percentage should be the lowest, I think?

        So then I think what we do is Adjuster(rate, matchedObj)=>{} in Matchmaker and ... and no.  Because we still don't have the dispositions. 

        -Crap.  Since the dispositions may be mixed, I can't just provide a flat value.  Like if I have 2 damaged and 3 unwanted, I can't specify one one number from which the Adjustment can be calculated.  Maybe I should calculate Total, TotalTax, and Adjustment in each object.  I mean, we're going to have to do it sooner or later.  

23 Dec 2022
    God, I wrote a fucking novel last night.  I also have only about an hour before  I need to head out to the doctor, but it's for my knee so that is also very important to enjoying life :)

    -Very first task in the queue today is figure out a plan of attack for how to handle the CostAdjuster().  

        -OK.  So.  Every loop through the dispositions will produce at least one property, and fill up the disposition: property until either all item dispositions or sold qty are exhausted.

    200:{
            specialConditions:{SOS: 0.2,}
            matches:[
            {
                price:44.00,
                tax:4.10,
                payment:"Check",
                disposition:{doesntWork: 8, unwanted: 4},
            },
            {
                ...
            },
            ...
        ]

    }    
        -I guess my first thought would be to calculate return value as I am looping through the items, but to do that I would need to know the special codes.  Although I guess I need special codes no matter where I loop from.

        -Rules:  SOS item - NEVER without a reciept, 20% with a receipt.
        -ARD: Never without a receipt.

        OK.  So I shouldn't have to worry about that here.  If they are matched then by definition they have a receipt. (that's what they're matching with.)  So the only think I need to be on the lookout for is adjustments.  

        I can either cumulatively calculate the total value as I go along, or I could do it after the full array of the item's matches are completed but before it is added to the MatchedItems object.  It might be more efficient to do it that way, but it would be much easier just to pass the whole object.  

        That's what I'm going to do.  Maybe it's more efficient but this way is easier to understand.

    After giving it some thought.  I think what I want to to is store cost inside each receipted item's > match array's > matchObj.
    That seems like a lot of extra data that I'm not going to use right now, but when it comes time to calculate how much money is being reimbursed to each tender method I think it will be really helpful.  

    Input/Matching:
        Revised Invoices:
            -How many items were returned from each invoice.
            -How much was paid per item, per invoice.

    Tenders/Refund:
        -Total sum paid for each item type per invoice.
        -Total sum being refunded per invoice
        -Tender type(s) per invoice.

    Remember, per receipted ItemNumber(200), each match array's > matchObj represents matches made from ONE invoice.  So as long as each matchObj also contains the invoice number from which it matched, having the cost already calculated and ready to go should make converting the MATCHED_ITEMS list into the Tenders/Refund list pretty easy.  Just cycle through the Items list and check if it came from the Invoice in question.  If so, add its costs to the total being refunded from that invoice.  AFAICT, I don't even need to know what the item is - item totals in MODIFIED_INVOICES has already been updated in the Matchmaker.  

    5:30 OK.  Hold up.  If that is the case, I might as well just handle it in the matchmaker, right?  For the time being, I'm just going to add a restockFee property to each item.  Calculating that can be the back end's problem.

24 Dec 2022 - Finally back after a morning power outage.  What a waste.  I couldn't get back to sleep after my CPAP was unpowered, and I legit think I could have been in this seat at 8:30 instead of like 12:30.  Nothing that can be done now.

    -What can be done now.  I need to get the Session state from Returns into RefundTotal via its parent.  I can't think of a time when I would be referencing anything else, so I don't think I need to accept the object as a separate prop.

    -After that, I need to figure out how and where to set the Continue buttons and have it track if there is anything in ScannedItem, and I legitimately think I will be ready to move on.

    2:40.  Well, that was pretty painless.  The ReturnTotal component is correctly showing totals calculated from Matched and AFAICT it's working just how I want it.

    Next question - what is next?  I supposed before anything I need to get the Continue buttons working.  I do like the idea of having Continue present from the ItemDetails state, but I think I will not.  First, for testing I might have to go back to having the Submit button here.  The other reason is that it's kind of an anti-pattern, because at L1 and L3 of the three the button in this spot continues, but at L2 it submits an item?  Not so sensible.  

    I swear I do want to move on, but I think I should add 2 QoL features.  First, hitting the Damaged / Defective button should set all dispositions to {}.  Otherwise it's not doing much.

    Also, I don't think it would be too hard to implement the Reason buttons showing their current quantity.  I just show the quantity from the global state.  That way, the user won't see the number change while they are typing?  Or should they see it?

    3:20.  OK.  40 minutes invested and both of those QoL features are working correctly!

    Now, to deal with the buttons and Continuation.

    5:10:  OK.  I'm doing OK today.  I finished up all the work for populating the ReturnTotal object and it's all working.  I've also got a new empty page with a new URL for the FirstReview component and navigation to and back is working correctly.  The next steps are going to be to make a couple of universal components - the in-page title and the Review LIs and honestly the thought of having to consider all of the use cases I need to consider to make then reusable in different configurations seems a little intimidating.  I think I'm gonna swalk, see how I feel, and only if I feel like it when I get back will I get after that next step.  I'm feeling a little down because I mostly did easy things today, but a lot of that easiness is familiarity and the fact that I have been working REALLY hard to apply the Robustness principle so that I don't make hard future steps for myself.

    Like... a lot of this stuff is smooth because of foresight.  Setting up Returns to hold universal state, and then having all the page displays on URLs so I can easily change pages while having unbroken access to the data?  That was preparation.  

25 Dec 2022
    Christmas calls are done and I need to wrap up and get on the road before too long.  However, I'm going to try to code one last little bit before I go.  Before I go, I would like to have:
        -A new, scrolling table
        -A new, custom ReviewDetailsLI component
        -Table populating from Unmatched and the new custom LI.

28 Dec 2022
    I'm really dragging ass today.  I could conceivably have started 90 minutes ago but my heart just isn't in it right now.

    -First thing for today.  I need to continue to build the list item for the non-receipted returns.

    -I also need to figure out what the hell was happening when the screen was at a shorter vertical height.  That was kind of ugly.

    -I need to create a container for the next phase, which is Lookup, and add a Continue button that leads to it.  

    12:30 - still not super engaged, still kind of going through the motions, but that is better than not going through anything :)

    -I've got most of the content added into the Review LI.  I just need the Rejection code.
        -Make list of areas where rejection codes are used.
            -Non-receipted review
            -Rejected Review
            -Sometimes in the raw Item List

            -OK.  So AFAICT, these codes are only used in relation to items, and I THINK they're all in relation to either Session Items or Unmatched Items which have the same structure.  I think what I am going to do is let the Rejection Code component accept a function, but also have a default function that works on the Item data structure.

        -Figure out how to display rejection codes.  Maybe the component accepts a function?  Or maybe there is a function in the component?
        -Create a Rejection Code component.

    3:30 - RejectionCode component is now working correctly.  I think I just need to do some CSS cleanup, add the button, and then move onto the next phase.

    4:30 - Fixed the CSS and took a short break.  
        -Next, I need to create two additional pages: a Total Review page and a Search page.  I also need to set up conditional navigation so that if there are no unmatched items, the user skips straight ahead to Total Review.  Then I can get cranking on the Search page.  I'm finally feeling good and engaged and ready to regret the 90 minutes I spent goofing around this morning :*)

    7:40 - Fuck.  I am really stuck with ReactRouter.  This reference has been pretty helpful so far: https://ui.dev/react-router-tutorial

29 Dec 2022
    9:40.  I'm already ahead here :)  First, it's before 10 and 69420 is already underway.  Second, I consciously made a decision not to do some web surfing, which is how I got into a stimulus cycle yesterday.  Also.  This was a little display of courage.  This is probably going to be an unhappy, frustrating experience and it would have been very easy to put it off.

        -So.  Task number 1 for today is to solve a mystery.  Why are my links to the other two pages not working?  

            -Remember what Harrison taught me.  Rather than guessing at one thing after another, try to cut the field in half as many times as possible.  Treat it like a game of Boticelli.

            -Try loading one of the pages in a URL link that I know is functional.  I assume the page contents themselves are working and I should verify that.

            -Try making one of the non-working pages the only URL at the same level.

            -Find out all you can about the Outlet component.  Not sure if they should be nested.  

            -Take a look at the Components tab in the browser.  AFAICT it lists available links.  

    10:10 - OK.  Already got something good.  I tried to use <ReceiptLookup> component in place of the very basic "Start Scanning" piece in the index component <StartScanning70>, and got the same error I got last night. I also got the same error in <TotalReview>.

    Just to be sure, I tried putting in the <FirstReview> component into <StartScanning70> and while it looked a little funky, there were no errors.

    This tells me there is a HIGH liklihood that something is wrong inside the components and not with my routing or links.  Here's the messaage I'm getting:

    ----

    Uncaught TypeError: Cannot destructure property 'to' of '_ref3' as it is undefined.
        at Navigate (components.tsx:176:1)
        at ReceiptLookup (ReceiptLookup.js:7:1)

    ----
    
    -The fact that the first error in code I've written is appearing in ReceiptLookup.js:7:1 is super suspicious because that's where I'm defining the Navigation hook.  

    GOT 'EM!  I was importing Navigate (a component) instead of useNavigate (the hook)  When I changed that, it worked perfectly.  Still gotta do some fiddling to get my routes to work right.

    -Route and Path:  From what I can tell:

         <Route path="/returns" element={<R/>}>
            <Route index element={<RI />} />
            <Route path="first-review" element={<FR />} />
            <Route path="receipt-lookup" element={<RL />} />

        Any path that has only 
            /returns/
        will render to the Returns index.  
        
        A link to    "first-review"     from that index will take you to:
            /returns/first-review

        Now here's here it gets tricky:  If there is a link in 
        /returns/first-review    with a path of   "receipt-lookup"   then it will take you to the URL of:
            /returns/first-review/receipt-lookup/
        
        even though they are siblings.  AFAICT, if you want to navigate to a sibling, you have to write that path as:   "../receipt-lookup"

        -One other thing to pay attention to.  Normally, ".." navigates one level up in the route, so if I am at:
            /returns/first-review/receipt-lookup/

        then I would go back to    /returns   because 
            <Route path="receipt-lookup"> is a child of 
            <Route path="/returns"> in the Route hierarchy.  

        If I change the <Link> component to include property 
            relative="path"   then I am taken to:
            /returns/first-review/
        Because of that extra property, I'm now going up one level in the URL, not one level in the route.  Apparently this is because URLs can include URL parameters and those can be conditional so you don't even necessarily know how many URL segments you will have at any given time.  Because of this, it's normally better for ".." to refer to the route rather than the path/URL, since relationships in the Route tree are always known.

    -11:20.  I'm feeling really good.  I've already solved my biggest problem of the day.  Like, I was legit prepared to spend all day on this, and I'm already done, and at this time yesterday I'm pretty sure I hadn't even started :)  Just want to get down some takeaways.

    -First.  I need to be REALLY aware of when I start scrolling, either on my phone or at the desktop, because once I do it that's a great recipe for an hour to slip away on nothing.  It would be helpful to come up with an approach or a mind tool like 69420 that would prevent that.

    -Second.  I wish I had taken this approach last night.  I was kind of on the right track when I came in from my swalk to check that the component path was right.  But I need to be very careful of syntax-guessing.  It's really appealing because it's always got the potential to make the problem go away on the very next swing, but I think it's dangerous.  

        -My first question should always be:  Am I 95+% sure I know WHERE the problem is occurring?  If the answer is yes, I can continue syntax guessing.  If the answer is no, I should immediately stop and start cutting the field until that number is back over 95%

        -With every wrong syntax guess, my confidence that I know the problem's location should be going down.  I think if I make 4-5 wrong syntax guesses in a row, I should probably stop and do some field cutting until that number is back over 95%.

        -Remember the number game.  I'm trying to FALSIFY my top guess, not confirm it.

    -11:30 OK.  Back to work.  Gotta remember that Adderall tends to make me typey and I'm here to write code, not this journal.

        X-First.  Need to go through and clean up the routes and make sure everything's going where I want.

        X-Need to add a conditional in Actions30.  If there are items in the cart but no Unmatched, we go straight to Total Review.

        X-I really do need to modify the SessionItems70 table so that if there is a restock fee it is visible.  

        -Do I want to do the Manager Login today?  Those two kind of go together and it ~shouldn’t~ be too hard, right?

        X-I need to fix the CSS for the button.

        X-Do I need to add a property into the TitleBar to optionally make the button a nav link? 
            -Right now, I think the answer is no.  The only reason I even considered it is because I read somewhere that useNavigation was bad in some way I don't actually understand, so I think I sit tight.

    2:20 - Everything is done except the fee waiver.  Right now, my inclination is to just leave it.  First, it's probably going to change.  Second, I feel like that's a pretty self-contained little chunk that would be good to hang onto for if I am having a bad day and want to put a win on the board.  I'm gonna move ahead.

    4:30.  OK, went down a bit of a rabbit hole with the borders but I think we're good now.  Literally just ran into a snag.  The Returned Items and the Mini Unmatched LIs are so similar that it seems like a waste to have both.

    7:00.  I think I'm actually gonna call it a night.  

30 Dec 2022 
    9:50 a.m.  I feel like I got out of the gate pretty well this morning, and yet here it is almost 10:00.  Anyways!

        -First, I need to make a decision on the Invoices LI.  I could either directly have a mode, or just have each condition not display unless it's explicitly got a value.
            -I've elected to conditionally display the values, just in case.  However, I've got another problem.  This component is going to get fed from both Unmatched Items and Matched Items and they both have different data structures.  I think maybe I should change this component to accept all values that it displays through props?

            Actually, no.  If I have a situation where the itemObj doesn't match, I can just reprocess the itemObj as necessary.  Let's at least optimize it for one scenario here.

        -I think I need to make either a component or a set of CSS properties for the message badges.  I should also check to see where else they are occurring in case I need multiple sizes.

        -After that, I should be able to get into the Search.  I'll need a title, buttons to select search modes, and then figure out how to conditionally render the input field collections 

        -I probably need to make icons :/  I might just bypass that because IIRC icons were a huge pain in the dick and they have no dependencies.  Although that might be a reason to do it, since I don't like doing it and if I don't I might never get back to it.

        That should be good enough for today.  I won't get through all of that and if I do I definitely deserve a swallk.  

    11:00 - Spinning wheels here, as I usually do when I am uncertain.  I think the thing to do is put a win on the board here, and I think a good one would be the message ribbon.  

    12:00 - Yup, kind of sucking right now.  I'm always most vulnerable when I'm not sure how to proceed.  I'm not getting pleasure from action=>result, so I seek it from time-wasters.

        -Let's buckle down here.  We know where to start looking.  The universal header isn't displaying space around the ribbon the way I want.  
            -First, I want a default size that grows with the contents.  I think I already have that.

            -OK.  I actually think I can just toss all the contents in there, justify-content to center, and let the browser deal with it.  


        -But first, let's check the inputs to the ribbon and make sure it's working as expected.

    1:40 -  I think I'm finally ready to get going on the Return Search.

        -The thing I least want to do at the moment is setting up the layout and CSS.  I guess that means that's what I should do first.

        -Two things to do next.  First, I think I need to make a function to produce the buttons.  Othwerise I expect to be doing a lot of copying.

        -Second, I need to figure out how the hell I am going to handle 8 different input types and texts.  My current thought is to just do it as an object, have the keys match the possible state names, and then in the JSX set it to {inputs[stateName]}

    3:00 - I'm making an executive decision and going rogue here.  Search button is going next to the search bar.  The current position is retarded and I refuse to be a part of it.

    4:20 - Well, I got kind of stuck and I didn't immediately stick to my problem-solving paradigm, but I eventually remembered it and figured out the solve pretty easy (I mis-ordered the state and action in my reducer definition)  

    5:20 - OK.  Potential problem on the horizon.  Some of the components have more than one input field.  I'm actually not super worried about the input state - I'll just make the payload an object instead of a string.  

        -I am potentially worried about how to conditionally render the input fields, as well as how to perform the search.  As long as it was a single search field and a label, I could generate it out of an object, and all I had to pass to the search function was a search term.

        -Christ.  So.  Each object I'm passing into the Search Input Renderer needs:

        key(a search type matching a button):

            -1 label

            - (n) input fields, possibly with custom CSS.  (realistically this is probably just a full custom component)

            - an empty object with properties corresponding to the input fields with which to  set the   fieldInput: ""   state.

            - A function() to validate those inputs.

            - a function() to run that returns whatever invoices meet the definition of a 'match' for this particular search type.

        OK.  Let's be cool here.  I think there's a decent list that I can do with one input field, which makes the task significantly easier.
            -Credit Cart
            -Phone Number
            -Order #
            -Pro ID
            -Commerical Account # (minus the lookup fields)
            -MyLowes #?

        I'm not sure about Checks or Vendor PO.  I just don't know enough.  But that still gets me to 5.5 of the 8 search fields I know of.

        So what I can do is have a standard function that makes all the one-liners.  I can fill the object with its contents and then if I need to make more, I can populate it by hand if necessary.  


    7:05 - Just got back from a swallk.  I am just flying right now.  I am so excited about the possibilities of this input field component that I'm gonna keep going.  Experience has also taught me this means I have about an hour left before I completely lose interest and am done for the day, so we will see.

        -it would be REALLY nice to have a standard Input component with inlcuded warning text.  I would want it to:
            -accept a validation function from above
            -allow use of useEffect and maybe a delay parameter to only validate after some amount of time.
            

        -The thing is, since I am going to be making so many input fields (and because I have so many already) this probably needs to happen pretty soon.  
        
31 Dec 2022 - 
    9:20 - Even with a weak start I'm still underway at a decent hour.  The big open question is the input fields.  I think the thing to do would be to commit an hour to it and re-evaluate.  I don't want to be here with it all day.  

    9:50 - At least at my skill level, I don't really know how to make an component that does everything I want through props.  
        -The primary problem I need to solve is that I do not like the error messages appearing when the user is typing or hasn't entered anything.

            -I think the VERY simplest way to do this would be onBlur.  
                -When the field loses focus, the validation function runs.  Actually, I will probably have the validation running as part of the input process.  The onBlur operation would just display the error or not based on the input's validity.

            -The other approach, closer to my ideal, would be to check after some time has expired.  

    10:30, wondering why the hell everything seems so much harder today, and then realized I haven't taken my pill -_-

    -So, like...I've done all this work on the input component and  it just doesn't look any easier than doing it by hand.  it saves a little typing and now I have less flexibilty.  On the plus side, I think I have my answer?

    11:50 - just feeling, like, really slow and dumb right now.  I wonder if I'm not making the problem harder than it needs to be.  

        -OK.  I do not want to be here all day.  What I really ought to to is just make the basic, one-line search field.  The problem is that I have resolved to do this like, four times this morning and every time I am about to make the decision, it comes back to: "Welllllll, if only it accepted a child then I could make it reusable.

            -Maybe I've got the wrong approach.  Maybe the basic form is JUST the input, the submit button, and the error.  But if that's the case I could just stick the damn title on and be done.         

        -Gotta think a little about the matching function.  Almost everything can be stored in the InvoiceDetails section.  
            -AFAICT, the payment info isn't used anywhere in the Matchmaker so I should be able to use it safely.
            -In that case, I think the correct play is: 

                invoiceDetails: {
                    payment: {
                        cash:{paid: 12.34}
                        credit:{
                            paid: 12.34
                            ccNum: 1111-2222-1111-2222
                        }
                        check:{
                            paid: 12.34
                            routing: 12341234
                            account: 43214321
                        }
                    }
        
            -Also need to remember - for Search, the amounts paid DO NOT MATTER.  All we are trying to do is find more invoices.  Amounts paid can be handled on the other end.

    4:35 and still feeling pretty dumb, like there's a much easier way to do this that is eluding me.  The RLsearchFielder at this point has shrunk down to nearly nothing and the only reason I have it at all is to make the code shorter.  Like...I think honestly I just eat the length and do it all in the ReceiptLookup component. 

    4:55 - OK, there's definitely some CSS fuckery I should take care of, but that's easy.  Top priorities:

        X-Get the text length validation working.
        X-Ensure that the submit button is properly calling the InvoiceMatcher and sending a string to it.
        X-Actually, that should be an object, since both the search type and the field value are necessary.
        -I need to get in there and actually populate the other 4 fields.
        X-Fix the CSS.
        X-Search button should hide or be inactive if the input isn't valid.
        -IF I want, the invoiceMatcher could return some info about what it found, since its main function will be to update the session items.
        -When  minumum effort === true, show the Continue button in the parent.
        X-Figure out how we want to display the in-page title.
        
        -I actually really would like for the component to accept a custom validation function but remember rule 1.

    -Not really related to the work, but I have been REALLY happy with the onBlur validation.  It seems to really work the way I want it to.  I wonder if I could package it.  
        -I would need to assume any input state with validation is going to have input, a validity state, and a ShowMessage state.  I THINK the handling for all three would have to occur outside the field.  Still, could I configure the field to expect those three states, and assign them to value/onChange, and onBlur?  Maybe?  

    -It's also occurred to me that since I am tracking the state in the individual search fields and not in the top level component, if Kristin wants me to put that button back where it came from it's going to be a lot of work. 
        OK, so I would have to:
        -make something, probably the 70 panel, into a form.
        -Track and handle state in the top-level component.
        -pass the state and dispatch to each child.
    -I'm just gonna do it.  This is probably what it should have been anyways.  And that will probably be it for me tonight.  

    8:55 - Damn, that went surprisingly well.  Got everything ported over and it's now working as expected.

    9:40 - I'm really in a groove and I could honestly keep going but if I don't point my mind at something else I won't be able to sleep tonight.

1 Jan 2023:
    9:55 - First entry of the year!  OK, today SHOULD be a decent start.  
    
    -Very first thing is to get to work on the invoiceMatcher.  Should just be some pretty straightforward Javascript.

    -Next is the SecondReview page where it shows all the rejected items.  Again, should be pretty easy.  After that, I have to make a decision.  
        -I COULD get into the Manager Override work.  Not the worst idea in the world, considering I have to prototype it pretty soon.

        -The other option, which I currently prefer if I had to pick right now, would be to skip the overrides and go right to the end.  AFAICT, the two last BIG challenges in this process is going to be the Total Review and then the Stepper-Refund walkthrough.  

    -Running into an issue with the Context.  I actually do not understand the problem but it seems like you cannot useContext inside something that isn't a React component?
        -I'm looking at the matchMaker and AFAICT it doesn't reference any external states.  Actually it gets passed two objects, which might be a mistake since those values never change?

        -OK.  I am going to try doing this as a non-UI component because 
            a. I don't know how to do that and should probably learn.
            b. That's probably what the matchMaker should be, and I should probably learn.

    -Side note.  I feel like I'm struggling here.  I know *A* way to do a lot of different things, but I don't know the *best* way to do anything and I feel like I'm mostly relying on familiarity rather than an actual understanding of what's happening.  I badly need a mentor :/

    -OK.  Turns out I didn't solve the problem at all.  The reason I'm not getting any errors is because my InvoiceMatcher appears not to be running at all :/

    -Well, I still don't understand the problem.  My best guess is that I am breaking the rule that hooks can only be called inside the top-level component, although I have no idea why that would be.  
        -I think what I need to do is just stop bucking, pass the state as a parameter, and move on.  I've spent waaaaay too much time on this already.

    1:50 - OK, let's keep this brief.  I'm struggling because I was in a situation with rules I didn't understand (Hooks needing to be called together at the same level) and I didn't build any momentum in the critical phase.  I now have an inelegant solve, and I should be able to move ahead.  Let's try to jam hard for 45 minutes and see if we can't get our mind  unconstipated.

    2:35 - And now I just found out that while I can't use a hook to get the context which never changes, I somehow can dispatch to the Returns state from within the InvoiceSearch function.  Fuck me, I guess.  God, I know so little about what is actually happening :/

    4:30 - and now the props aren't passing in correctly, and they were just a few minutes ago.  Sigh.  OK.  Let's un-fuck this.

    4:50 - OK, it's working again.  I HATE having to pass props in order, but I'm really having trouble making it work with an object and this is a stupid thing to be spending time on.
    
    5:00 - I think I'm going to call it a day.  I didn't make progress and I didn't handle the lack of progress very well.  Instead, I have a new mission for the day.  I'm going to walk and remember that I've had DOZENS of bad days like this in my past, and not one single one stopped me from being on a fucking roll the way I was this week.  

2 Jan, 2023:
    First day back at work.  I don't have any meetings today and I was thinking about slacking off, but I apparently have my 1:1 with Liz tomorrow and if I could get the matching to work, that would be sweet.  I actually think I have most of the logic sorted, so I just need to run through it in Chrome and see what I get.  

        -First, I need to figure out what to do once a match is found.

        -I think my VERY top priority should be to get it working.  If that means multiple dispatches, so be it.

        -Time allowing, I can set up the Returns reducer to accept an array, destructure it,  and put everything it contained into the new Scanned Arrays state.

    3:45.  Well, against all odds the InvoiceSearch is now working just fine.  I want to clean up the TotalReview page b/c it's an ugly shitstorm right now, and maybe add Rejected Items, which SHOULD be pretty much a clone of FirstReview.  In fact, maybe I should just modify FirstReview?

    5:30.  Well.  Would you look at that.  In spite of waking up dragging ass and STRUGGLING to get going, everything up to the second Item Review is now working as planned.  Talk about a come-from-behind victory!  I was sure this would never be a swallk, but I honestly think I've earned it.

3 Jan 2022.
    -First, I'm gonna push a build to my Github Pages account in case this goes horribly wrong because I'm gonna show it to Liz in about 4 hours.

    -Then, I'm going to move the contents of invoice-context into a variable and return that variable so I can do operations on it.  My understanding is that since it is not a state, the math operations should only happen once.  

    -BUG to fix:  If I have Item A visible in the ProductDetails30 panel and then select a different item, the panel doesn't update and show the dispositions of the new item.

6 Jan 2022
    12:40.  Honestly I'm not doing great today, but I am going to at least try to make some progress.  

    The BIGGEST thing that needs to be handled is the fact that when I change items in <ItemDetail30> the dispositions being shown are not from the new item.  There are two issues I need to clean up.  

        -First and most important - When I change items, the Reason buttons and their quantities need to reflect the current item.

        -Second: From what I heard yesterday, Didn't Want / Need is going to need its own buttons.  That means:
            -Buttons need to accept an argument for which object they read from / write to.
            -Clicking Didn't Want / Need should no longer clear all dispositions.  Actually, it probably shouldn't do that to begin with.

    -OK.  What I noticed is that the buttons are reading from the local state, when they ought to be reading from the global state.  It's reading from a prop, but any change to that prop SHOULD be triggering a re-render from a parent so I don't THINK this should be a problem?  

        -So.  The quantities are now correctly displaying, but when I change items, the input field doesn't change, and I've also noticed that the localDisposObj stays the same.  When a new item is clicked, the localDisposObj SHOULD become a clone of the Global dispos obj for that item.  

        -Here is my current best guess at what is happening.  When I click on a new item, I am changing a prop, not a state.  AFAICT, everything that does change correctly (picture, qty, etc. ) are all using that prop as part of their route.  so like the image is   image[itemNum]   and I THINK that if itemNum changes, anything references itemNum now points through its new value?

        I keep thinking to just put a local state in there that tracks the ActiveItem, but I already kind of have that.  That's what's set by clicking on any <LI> in SessionItems70, and that state's value gets passed as a prop into ItemDetail30.

        Here's where I'm stuck.  I THOUGHT that since every time I clicked on a new item, I was triggering a re-render.  My Reducer contains a function that sets the state initially, and so I thought that every time I triggered a re-render, that would get reset.

            -That's an assumption.  I don't actually know if it is the case.  I will put a console.log in there.  IF my understanding is correct, I should AT LEAST see it ping every time I select a different cart item.  
            
            -HA.  OK.  So that solves part of the mystery.  The logger pings ONCE, when the details are loaded.  If I interact with it or change anything, the details do not change.  Even if I change items, the inital state does not move.

            However, if I close the Item Details window and then re-open it, I do get a ping.  

        -befoe I do, potential solve.  I could track which item is active in a higher state.  brb.  

        -I was able to do it with UseEffect, and setting the local state to match the item's Returns disposition after every re-render.  A couple problems with this.

            -First, the input field behaves weirdly.  It doesn't leave the old value if I enter something invalid.  It just clears the whole field, although the error message does display what I should have done instead.  AFAICT this is because since I am referencing the session item's dispos when I set the local state, I have to include the session item as a dependency.  I don't understand why but that is the rule.

            -Second, React's docmentation recommends against this.  I'm setting the same state twice, once in the inital render and again once the render is complete.  

            -The third reason is that the only reason I have a local state tracking the input is so they can have an invalid number.  If I feel like I don't need that, I should get rid of tracking dispositions in the local state entirely and have the whole thing track the global state.  

        -Second partial solve: just do the whole thing in the global state, don't allow any invalid numbers.  Not the IDEAL user experience, but it's no worse than using UseEffect and the logic is simpler.

        -Third option:  If I provide each item with a unique Key prop (like if I was mapping from an array) then it will trigger a re-render each time.  The problem with THAT is that my state appears to get re-set every time I re-render, so I keep having to click on the "Damaged / Defective" button each time.  

            -If I hate this and need to solve it, I could store which tab is active on the item in the sessionItems.  I don't think it's technically even all that bad because it doesn't have to get stored in the database.  It's just a property I add to the item as I create it.

            +The other plus to doing it that way is that I get to keep the Local State.  I'm doing the real-time validation with no submit button because I think that's the most user-friendly way to do this, but I have a feeling they're going to want the submit button and if I have to change my approach to use a Submit button I will absolutely need a local state.

            -Alternatively, I could just store whichever ItemDetail30 tab is active in ReturnsIndex.  It won't be item-specific but I honestly don't think that's a big deal.

        -Fourth Option:
            -I create an Active Item state in ReturnsIndex.  I'm actually already kind of tracking this.  BUT.  Here's a huge problem.  I was assuming that changing the active item would trigger a re-render, but it doesn't right now.  OK, nvm this is nothing.  

    4:20.  OK.  That actually wasn't too bad.  I learned a few cool new tricks and got the dispositions displaying correctly.

        -I'm not really ready to dig into the Matching.  I think that's a task for tomorrow.  I think today would be better spent doing some other cleanup.

            -Moved to 9 Jan.

    5:00 - nvm, I think I'm actually done for the day.  Just don't feel very smart right now and it's probably because I haven't eaten.  Instead I'm going to think about how to handle unwanted dispositions.

        -Something I've been wondering for a while is if I even need to be tracking dispositions in matching.  The only quantities Matching cares about are Unwanted or Damaged.
            -Technically, some other process might care about how much we refunded a customer.  Maybe.  Or not?  Might be that all we care about is what invoice they came from?  
                -Actually, come to think of it, that shouldn't matter either because AFAICT we have no way of knowing what WE paid for a given unit.  If the SKU is the same, they're indistinguishable.  So the price Lowe's paid per item is meaningless.  

            -Someone in our process might still need a count of how many came in of each type, but I really can't see that mattering in Returns.

            -The other point is that from my POV, only the Unwanted and Damaged totals matter for the refund.  Like, I'm already capturing this info.  

            -Now, the other thing I have wondered:  Do I just jam all the dispositions into one Dispositions object, or do I keep them separate?

            -Jamming them all together makes it a little easier to loop through.

7 Jan 2023
    -11:00.  Got kind of a late start today although I don't recall wasting a lot of time.

    -First order of business:  Figure out what to do with the Unwanted vs Damaged dispositions.
        -I've realized that the reason I'm hesitant to commit to doing them all in one big object is because having them separate is more future-proof.  If I separate them it's hard to imagine a future scenario where I wish I'd done it different.

        -I still feel some doubt.  I'm very clearly doing this because it is easier.  However, this does keep the code simple-ish.  I'm already afraid to mess with Matching because of its complexity, although maybe I shouldn't be.  

    -I still think I'm going to use one big dispos object.  This is a VERY secondary feature, especially when it comes to matching.  Remember Rule 1.  With that said, I will need:
        -An object of Damaged conditions.  I'm going to check for Damaged conditions because I don't expect them to change and then adding future objects will be easier.  

        -Change the evaluation in the cost assignment portion.  Instead of just checking for Unwanted, I'm going to check for ALL Damaged types.  
    
    12:00 - OK, that went pretty smoothly.  
        -The next hard thing I need to do is to figure out what data I need to be consuming in the Process Payment phase.  Started doing this on the work Mac but I really prefer this keyboard.
        
        -Refunded Items:
            LI:
                -Item Details.  I guess I could get these from the context or from the ScannedItem list?
                -Per-Unit price: this will be in the MatchBite
                -Quantity: MatchBite, but may need further refined.

            Data Translation:
                -I could do it by MatchBite, which is basically the same as doing it by Invoice.
                -IF I wanted, I could loop through the list of MatchBites and combine any that share an itemNum and a price, although that might be overkill.
                -Alternatively, I could merge ONLY on the basis of itemNum and average the price, but is that good?  It won't be clear that the 'price' is a derivation and if the customer sees a price that isn't on any of the invoices they might assume fuckery.  I think if I'm gonna combine items I should either leave out the unit price or make it explicitly say "Mulitple Prices"

        -TotalReview:
            LI: 
                -Total Refunded per tender type
                -Original Tender
            
            Data Translation:

                -AFAICT I need to make a new structure for this.  I would need to loop through all the MatchBites, loop through each bite's payment method, see if it is unique, and then either add it to the list or to the type it matches.

                    -I'm thinking about changing the items in the database to include an Identifier property (replacing things like CCnum or check numbers).  If I do that, my loop gets a little simpler.

                    -The case against would be that I think I already need to do some payment-type-specific behavior to get the string I will use to describe it in the output, so I might as well just do it there?  And also the Refund to Tender type is gonna need some conditional logic?  Yeah, I don't think I need to change it.

        -Modified Invoices:
            -In each MatchBite, I am currently not handling payment.  Once I complete the Sum function for the invoices in the Store, each invoice will have a Payment object that reflects how much was paid for that type.  
            
            -Once I have calculated the total money for each Dispo, I should deduct that from the Prices.  

    2:15

        I've updated the MatchMaker to include a refundPerPayment{} object, to loop through the Invoice's payments and deduct the adjusted price of the matching disposition from those payments, and to include the amount deducted from each payment in the refundPerPayment{} object.  In theory, the rest of the Matchmaker hasn't changed so this should be OK?

            -It's now ocurring to me that there's no reason for this to be happening in the Dispositions loop.  This is per invoice, so I could easily do it in the Invoices loop but after this loop finishes.  In fact, I think that's what I will do.  However, I can't even test what I have until I get the function for total prices in the Invoice Context working.  From what price would I be deducting?

            -Still, I think this was a mistake.  It's computationally less efficient to be doing this operation for every match, and it's not even more readable. It ought to live with the Invoice it's happening to. When I swalk today I should give some thought to how I made this mistake and how it could be avoided.

        -I need to do the function that totals up the payments in the Invoices.  I guess I could just do it by hand, but that's bad if I ever change anything and also no real coder would choose that.

    -4:30.  A fun new twist.  Apparently, Javascript can't always represent decimals accurately, and I think I finally understand why.  Any integer is easy to represent in binary.  But decimals must be represented fractions of two binary integers, and sometimes those are decimals are really long, or even infinite, like how 1/3 = 0.33333∞ .  To solve this, JS will round a number off at some point.  This is also why this observations pops up so much when doing division - it's easy to accidentally make a recurring decimal with small integers.  

        -The solution I have found looks hacky, but I saw it recommended in several places so I think I'm gonna do it.  You represent money as the total of cents rather than the total of dollars, and then just n/100 right before you show it anywhere in the interface.

        -The other thing I could do is just Math.floor() any of my divisions, but I could still have problems since I still have decimals all over the app.  OK, guess that settles it.  Cents it is.

        -Ha.  No matter what, today is pretty cool.  I finally, clearly understand something that always confused me before :)

        -I guess I can still use the restock fee rate, but I have to remember to Math.floor whenever I do.  

    5:35
        Looks like there are some issues with the Invoice Adjuster although the rest of Matchmaker appears to have survived intact.  Instead of debugging them I am just going to move this loop out of the Dispositions loop like I was planning.

        OK, ran into another problem.  It looks like on the 200 / BBB match, the matchmaker looped a second time and added an empty matchbite, which shouldn't happen.  If there are no unmatched items of 200 left, the loop needs to go to the next item.

        Come to think of it, I think the second MatchBite was from a different invoice.

    6:45
        Well, I didn't do what I said I was going to do (eat) and now I'm feeling dumb and out of gas.

        I'm gonna swallk.  I have a good place to start tomorrow.  I kind of whiffed today but I actually think this went pretty well.  I'm happy with the decision to include everything needed for the last two hard screen in the MatchMaker.  When I start again, I need to:
            -Do BBB / 200 and see if I can reproduce the error.
            -No matter what I find, I need to come up with a more organized way to handle my conditions in MatchMaker, and I think it's having all my -continues- at the start of the loop and my -breaks- at the end. 
                -Continue means: Keep looping at this next level, but on the next item.
                -Break means: Stop looping at this level.

                Or, if we have:
                    for (const i in Array){}
                
                -Continue is: don't continue to process 'i'
                -Break is: Don't continue to process 'Array'

8 Dec 2023
    -OK.  I'm nervous but also excited.  If I can get this up and running, the road really should be clear ahead to make the rest of the app.
        -Find out what exactly the error was.
        -Step through the app and make predictions.  This was a pretty clear error and we should be able to identify where it's happening.
        -Now, the exiting part :)  I really liked my description of the Break / Continue Statements.  I'm hoping that with this better understanding, I can rationalize the app.  
        -I wouldn't mind seeing if I could get all Unwanted assignment happening in the ItemDetails30 panel.  
        -MatchMaker is just so complex that anything I can take out of it helps me.  

        -While looking up what to call Break and Continue (they are statements) I found something else cool.  AFAICT all statements can be given a label in the format of labelName : statement.  A Break statement can accept a label as a argument (?) by writing    break labelName  .  If you don't specify a label name, the break statement terminates execution of the current statement or loop and transfers control to whatever is next in the script.  However, you can break out of a higher loop as well.  Just specify the name, and break will break to that level. 

    11:30
        -Ok, the error looks like somehow we deducted the same amount from Check and Credit Card in the BBB invoice, even though Check alone had more than enough to cover it.  
        
        -I think I see at least part of the problem.  Every time I loop through, I'm comparing the TOTAL amount being refunded from the MatchBite to the TOTAL paid for each payment.  Well, that total in the MatchBite never changes!  
        
        
        I think I need to clone that number and decrement it on every pass.

        -OK.  It APPEARS to be working now?  
        
        -This thing is getting so complicated :(  And I think that's part of why I still haven't fully engaged, because I'm not sure how to make it better.  Or, actually, I think my problem is that at this point there is so much going on, I don't know how to test that it is working properly.  OK.  Two things I feel like I can do.  

            -I should make a map of the ideal fractal for the MatchMaker.

                loopLabel: (for i in Array){
                    - vars of routes to any data being processed. (1st b/c these can be handy when checking skip conditions)

                    - conditions for skipping this iterator

                    - Unfilled output that this cycle of the loop is building

                    - steps: (as many instances as needed)
                        -process, store key data into variables
                        -increment the output.
                        -decrement the inputs
                        -clean out empties.

                    - Send the now-fully-built output to its parent.

                    -Conditions for breaking from this loop.
                }

            -Go though Matchmaker and see what we could ditch.  
                -Do squeezing and Unwanted assignment within ItemEntry30?
                -I could ditch the disposition matching, but it's not a huge piece.
                -Would having all the refund details (tax, adjustments, etc.) life with the Refund-Per-Payment be worth anything?  

    1:45
        Still not super engaged.  I did eat, and I do need to remember to make commits as I go because if I make a lot of changes, it becomes harder to diagnose where  a problem is happening.
            X -Check and see if MatchMaker is working as-is.
            X -Finish re-organizing on the CoVID CDC pattern.
            X -See if I can't move those Break conditions to the end.
            -try to put all break checks into one If statement with || conditions.


            -Once that is all done, I need to figure out a way to have any payment-specific details (CCnum, Checking, etc.) included in the Match Bites because it's going to be needed.  
            -Look into doing all the squeezing in ItemDetail30.

    3:15: OK, found another error.  If there are multiple invoices containing the item and all the items are matched in the first invoice evaluated, the second invoice still gets evaluated and an empty MatchBite is pushed into the item's Array in Matched.
        -First, let me see if I can add a third invoice and see if that gets 2 empty MatchBites?
            -It does.  

        -My hypothesis is that my break condition of !cartItem is not evaluating as I expect and that's why it continues to loop after completing the match.
        -OK, hypothesis confirmed. the cartItem variable is showing a full clone of 100, with quantity set to 0.  The reason I am confused is that unmatched_items{} is showing an empty object.  I THOUGHT that the variable was a pointer to this item within unmatched_items, but it looks like it's a clone?

        OK!  Another breakthrough, I think.  I was operating on this seemingly-dumb but seems-to-work heuristic of: if I'm going to delete a property and I'm using a variable to store a path to it, MAKE SURE that I've got at least ONE additional segment to that property's route.  Well, I finally found out why that is!  I've been wondering for a while why, for this example:
 
            const test = {
                L1:{ 
                    L2:2
                }
            }

            const pointer = test.L1

            delete pointer.L2               // works fine
            delete pointer                  // don't do shit
            const eureka = delete pointer   // eureka = false;

        Here's the secret.  The 'delete' operator returns a boolean based on what it did.  If I delete an object property, even if that property doesn't exist in the object, 'delete' returns true.  Otherwise, it returns false.  

        And eureka holds the answer.  It's not working because JS sees me as trying to delete the VARIABLE, not the property the variable points to.  At some point I should probably play around and figure out all of the specifics, but that is a cool find, and it explains both my result and my rough heuristic perfectly!

        I would also predict that if I'm performing operations, like:

            pointer.L2B = 3

        then it should work like you'd expect.  That variable still contains a pointer that I can operate on.  It should ONLY be 'delete' that has problems.

    5:45.  Finally finished re-organizing the Matchmaker, I gave it some moderate testing, and it appears to be working correctly.  I am so relieved.  I am just about out of gas and I want to be done, but I'd feel obligated to continue if I were seeing problems.

        -I feel great.  Like, legit, really good.  This was probably the hardest day I've had since figuring out how to do the matches in the first place, and I feel so much better about the Matchmaker now.  Yes, I didn't complete the work on it, but I got the hardest part done.  I was good about using hypotheses to diagnose problems.  I was able to see the pattern in such a way that I was FINALLY able to come up with a fractal organization template for the MatchMaker.  AND, I this weekend I figured out TWO things that I didn't understand at all - weird decimals in JS, and why having an extra route-segment after my object paths stored in variables seemed to make a difference.  

        -I still need to figure out how to include identifiers as tender types are matched, but that SHOULDN'T disrupt anything that's already working so I'm less worried.  If ever a day deserved a swallk, this one does.  

9 Jan 2022
    -First thing I would like to do today is figure out how to handle the payment-specific information.  
        -My first thought was that for all the payment types with unique information (Credit, Debit, Check ??) into an Identifier object.  If I did that, I'd have to make sure I update Search because Search uses this info.

        -However.  There might be an easier, dirtier(?) solution.  For each invoiceNum.invoiceDetails.payment[thisTenderType], I could just spread the entire contents of the existing object into the refundPerPayment{} obj in the matchBite.  I think that would capture everything.

        -Like, it's kind of weird but I don't think it costs me anything.  When I'm processing these into the Return To Tender array, I'm going to need to do conditional logic based on the type anyways.  An extra layer of organization doesn't really save me anything.  

    10:00.  Sweet.  That was easy.

    Next question.  The prices are definitely bugging me.  Two approaches are possible.
        -I could keep everything as cents and then divide everything /100 before consumption.

        -I could go back to using dollars.  I'm realizing that the dollars weren't really my problem.  The problem is that I wasn't rounding when doing division.  
            -Well, I suppose that's not correct either.  I guess I can't really round decimals?

        -OK, so.  Costs are consumed in:
            X -The bottom RefundTotal component.
            X -The SessionItems70 LIs
            X -MiniItem LI
            X -FullReview LI?
            X -SessionInvoices70

    3:35: I've finished the updates.  I also didn't take anything today so my focus is not great.  Kicking around the idea of doing some detail work and hitting the Refund to Tenders tomorrow when I'm a little more dialed in?

        -I would like the Selected Item to display a little blue inditactor to show that it is active.  

        -Figure out a more logical way for Input validation red warning messages to appear when needed.  Right now they are visible at the start and only go away when the user is entering.

        -After entering an item, ItemEntry30 should focus on the itemNum field instead of staying on the Qty field. oo

        X - Add RefundTotal into the StartScanning page.


10 Jan 2023
    the note I left myself from last night:
        
    4 outputs from matchmaker. 

    Well, why not?  Wouldn't it be nice if I didn't have to do any additional processing in the TotalReview?  It also makes sense because I'm also going to need that information in the next step, so I actually SHOULDN'T be storing it in Total Review.

    Buuuut - a problem.  How to handle situations where the the refund tender isn't the same as the original tender?  
        -It wouldn't be too hard to add a dispatch function that lets me change this object, but if for some reason I were to go back and add another item or invoice to the session, the RefundTenders object would be re-derived an any changes I'd made would be lost.

            -That's not actually the end of the world.  First, it's VERY rare case.  Second, it's annoying but I don't think it would cause errors because when the user does eventually come back, the program will run them through the same steps.

12 Jan 2022
    OK, got a little over an hour before the staff meeting starts so I am gonna do SOMETHING.
        -I could try and solve the problem of how to uniquely identify payment types, but tomorrow is looking pretty clear for me and that might be a better time to do it.  There's a good chance that whatever approach I try first might not work, and if I have to stop then I have to re-load the context into memory when I start again.

        -I think that what I will do instead is figure out how to make the blue bar appear on a selected LI.
            -Very first thing is to figure out what 30 panel the user goes to when they leave ItemDetail30.  OK, so it looks like it's ItemEntry30 in both cases.

        -OK.  Program removes active item when the ItemEntry30 panel is dispatched 

        -Now, how to indicate it?
            -Got a partial solve.  I've currently got a class that sets the left border to a visible color, and logic the TR mapper in Items that applies that class if it is selected.
            -I also added the same border but transparent to the whole table, which appears to work OK because I have border-collapse on?  (don't actually understand this)

            -The problem is that anything that's not contained within the table, like the "Coming Soon" indicator, does not have that border.  So my choices appear to be:
                -Leave it like it is and then remember to also apply the border to anything that goes inside.
                -Alternatively, I could create some kind of border component, put it inside my TRs and my TH, and then have some logic that activates it?
            -I THINK I prefer the second one?  I really want everything to stand on its own to the greatest degree possible and not impose requirements on outside components that I have to remember to apply.
            Right now, I think that's the way to go?

13 Jan 2022
    10:30.  Struggling to get started, but 42069 is finally underway, Kristin and Anthony are in a store together, I've made good progress to show at my paid work, and Sorin appears to be on the verge of settling down for a nap next to the desk.  I SHOULD be in the clear for the rest of today :)

    First thing to do is to see if I can add the marker to my TH and TRs.  Once I get that, I can try it and see how I feel about this approach vs. the border change?
        -OK, we got a problem.  The standard table does not include the indicator.  

        -Man, this border is turning out to be way harder than I was hoping.  
            -I was just about to write a long complaint about how it was really hard to do it with a component, but I'm now wondering if I can actually do it with a CSS class that I just apply to an empty <th> and <tr>s.  

        -OK, sweet.  Worked like a charm, got me everything I wanted.  Trick was to just store the stared details in the CSS classes without a component, and just apply the CSS to the <tr> and <th> directly.  

        -I do kind of wonder about these earlier components.  I wonder how many of them could be simplified and made mostly through CSS.  Rule 1, though.

    1:55:  Going to try to steer into the hardest problem right now, and that is how to handle the Tenders output.
        -At the moment, the approach that seems easiest is to add some kind of tenderKey property to each transaction type.
            -I'm wondering about making the TenderKeys as the primary key, but I think that's a trap.  I need to do certain action like Lookup on the basis of a more general type, like Checking acct and routing, or Credit Card numbers.  

        -Alternatively, I've also thought about moving all the unique identifiers into an  'identifier' property and then deriving it into whatever I need when I'm consuming it, but I don't think that's great either.
            -It doesn't really make search easier, because I'm pretty sure I still need to specifically define how to search on the basis of the payment type (I can't search for a CCnum the same way I search for a checking account and routing number)

        -OK.  I think what's bothering me is that I'm using   tenderKey   as a primary key, and it's really not.  I think that this is probably just a Rule 1 and move on.

        -Got it all working and feeling zero push right now.  Gonna call it a day.  It was actually pretty productive in terms of "problems no longer on my plate" but I did not feel very engaged and I do not feel like I did my best :/

14 Jan 2023
    -10:30, 42069 underway.  I didn't do my best yesterday.  Today I would like to feel good when I wrap up.  I've done a good job dodging time-wasters.  Now, I just need to cultivate my sitzfleisch and get it done.

    -One other thing.  I'm hesitant to over-emphasize this because I don't want the work to become unpleasant.  I'm also bearing in mind that one draws quickly by the choice of marks made, not by the speed of mark-making.  That said, I would like to try and move a little faster.  If I'm not sure what approach to take, I should be in here writing.  If I'm not sure where an error is occurring, I should be in the debugger.  And if I'm not sure what to do next, I should my choice should be the work with dependencies that I am MOST confident will be in the final product.  The only distraction that is always acceptable is Sorin.  

    -Let's just gently, continuously make good decisions today.  It's important.  We're so close to having this thing on the run.

    -First task:  
        -I was going to say that I want to do the input validation, but maybe that's not a good decision.  I don't actually know how it works in the live app.  I'm not at all confident that we can do real-time validation the way I currently am, so any work I put into this might be moot.  

    -OK, let's list what needs to be accomplished, what the blockers are, and how to address them.

        -I need to populate the ReturnedItems30 panel.
            -Blockers:
                -I need to make a decision on if I am going to combine MatchBites.  
                    -No combination.  
                        + easiest to do right now.  Shouldn't actually have THAT many price mismatches?
                    -Combine if itemNum and price match:
                        + Easier to read, probably best matches mental model of Redvest and shopper 
                    -Combine ONLY on itemNum. 
                        -NVM, I think this is stupid.

                -If I am going to combine MatchBites, I need to decide if I am doing it within the 30 panel.  If I am not, then I might need to rethink the output of the Matchmaker.  
                
            
        -I need to populate the TotalReview70 panel.
            Blockers:
                -I think these objects need to contain more data than just the tender type.
                    - Refund tender type
                    - What alternatives, if any, to the refund tender type?
                    - Did refund fail? (for basically anything except cash or merch card)
                -Where should these additional types be added? 
                    - If I do it in the Matchmaker, where should it be?  In the loop where refunds_by_tender is being populated?  Not the most efficient but I think it's the most readable?  


        -I need to populate the TenderTypes30 stepper panel.
            Blockers:
                -I need to know how to handle the alternative types.  Will it be in-panel buttons?  Will it just be the 'refund to cash' button in the FooterContainer?
                
    12:05: OK.  I think the smart thing to do right now would be to tackle the tender types.  First, I can do this without any input from Dave.  Second, I think I generally know what I want to do.  

        -Do I need to have a separate process to determine what refund tender options are available?  Well, I guess I should list some types and see?

            -I THINK that for any process that fails, the default is in-store credit with the option to refund as cash?

            -Credit: Should always be credit unless the process fails.  Then standard failure?

            -Cash: Should always be cash.

            -Store Credit: I THOUGHT it should  always be Store Credit, but in some recent work looks like there is a cash option?

            -Check: Refund to account, with option for cash?

            -Apple / PayPal: in kind unless failure?

        -OK. Based on this, I think I should probably have some kind of function that generates these outputs.  The next question would be where to do it?  
            -I could technically do it in the invoice-context.  I know nothing about data, but my guess would be that in a database, you should only store UNIQUE data.  Like, I don't think it would make sense to store the product info with the invoice because, for a given product number, the product info is always the same.  You just store the product number and get that from a different table when you need it.

            -I suppose that means I could generate the tenderLabel dynamically as well?  Might be a Rule 1 skip.  

    1:00:
        So it looks like where this is going is a revision to the Matchmaker.  At this point the MatchBites aren't really doing much.  My outputs are going to be:
            -A Refund Money object with total price, adjustments, etc.
            -A Matched Items object, with itemNum, price, and quantity.  IF prices match, 
            -A RefundTenders object with tender type, didFail, and alternatives if there are any.   
            -Unmatched and modified_invoices adjusted respectively.

        I do realize from the outside that this kind of rat-fucking looks like time-wasting, but I really do think this is right.
            -According to Dave and also my own intuition, this is the right way to do it.  The MatchMaker is absolutely central to the function of this application.  Like, if I was going to lose this entire project and I could only keep 2 files, I would choose Returns.js and the Matchmaker.

            -I've been wanting to refactor Matchmaker for a while.  I think I can streamline this thing.

            -I like the idea of doing as much processing as possible in as few locations as possible.  I think my design pattern is to do as much processing as possible as highly and as centrally as is practical.

        -The first thing to decide.  Local data or app data?
            -Local data:  
                -probably easier to de-bug, and I can use my local debugger which I really do prefer.
                -Not sure how much re-wiring I would need to do if I do the other way.  For this, I am certain it is zero.

            -Real data:
                -Right now, my resolve is strong. At 6:00, it won't be.  If I get this thing running in-context, then when I am done, I am done.  I won't have to worry about chasing gremlins in the system because that part will already be done.

    2:00 - Switched Returns to use new ReturnsMatchMaker.  Everything is working normally, which should be the case because I haven't changed anything, but I did want to check.

        - Now, another decision.  Do I want to keep looping through the dispositions, or do I want to just group them into Damaged / Unwanted?

            - Right now, I'm kind of leaning towards keeping the dispositions.  When it comes time to add Unwanted Dispositions in the future, I can look at separating them and refactoring the Dispos loop, but I don't really think they're hurting anything for the time being and that's one less chunk of refactoring work for me to do.  

        - The first thing to do will be to put together a MoneyObj.  Once I've got that, then I will connect that to the ReturnTotal component.

        -Once I get the RefundMoney obj, then I will get rid of MatchBites.  I don't think anything else is using that, and the errors will guide me on what to fix.  

    3:30:
        - Got the money displaying correctly in the RefundTotal component.  

        -I now need to figure out how to handle refunds_by_tender without the MatchBite, because I think I'm currently referencing it?

        -Well, it looks like I'm at least going to need some kind of per InvoItem money accumulator

    5:10:
        I'm not doing well.  I'm not super focused on the work and I don't really want to be sitting here right now.  I'm going to try and catch one last wave and finish strong.  I'm actually not doing too bad, progress-wise.  Let's just make decisions we can be proud of for another 90 minutes and then if we want to stop we can stop.

        -First, I'm going to clean out anything related to MatchBites.  I shouldn't need it anymore.

        -Next, I'm going to populate the MatchedItems.  I need a few bits and bobs of date about the item, but I should be able to grab that from the unmatchedItems.

        -Finally, I should write an empty program to populate the refunds_by_tender.  It's OK if it isn't perfect.  It's actually OK if it doesn't do anything other than return the input because I can always fill more of it out later.

        -
15 Jan 2022:
    12:10.  IDK wht, but it always seems like a trip to the gym causes me to spend at least an hour screwing around before I start programming.  Here's where we sit for today.

        X - I feel like I'm most of the way through populating MatchedItems.  I just need to stop being a weener, deepClone each item object in the Items loop, and then spread its value into the new ItemObj.  

        X - Then I need to do some tests to make sure everything is working as planned.

        X -After that, I need to at least put in a function to populate refunds_by_tender.  I can either populate it or move on.  
            -spinning wheels because not sure what to do.  

            -OK.  The TenderTypes loop uses keys, which I would want anyways.  So I have a string of the key name, and if I want I could get the values out.  

            -I think the thing to do would be to write the Tenderizer to take 2 arguments, the key name and then the value of the object.  I'll use the key in a Switch statement and then any additional processing can use the value.

    1:50
        -OK.  Am I done?  The tenderizer() is now in the Matchmaker, and reading and outputting something.  

        -First, I'm going to eat.  That's an easy Good Decision.  Then I will figure out what to do next.

    2:40
        -Heh.  Let's try this again.  What next?

        -I could create the TotalReview page.  Like, that's the obvious answer.  I have the data to populate it, I KNOW it needs to happen, and it gets me one step closer to having something I can show.  Why am I hesitating?
            -I think there's some level of fear now that the end is in sight.  This has been basically my whole life since I broke up with Kim, and as long as I have this I don't have to answer the question of "What next?"
            -I guess I need to remind myself that there is still PLENTY to do in this app, and that as long as I am working in Returns there will always be new features to build.  
            -In fact, the sooner I can get this to MVP level, the sooner I can start openly working on it on company time.
            -Also remember the deal I made myself - if I complete this, I can buy a fancy watch :)
            
        X-First, it looks like we've got a bug.  If there are no items missing invoices, we should skip the second review.  

        -And a second bug: the FirstReview section should be scrollable for overflow.
            X -I'm just gonna do this before I forget about it.

    4:30
        OK, looks like another bug.  My ItemCoder seems to be having trouble picking out special categories.  It didn't come up before because AFAICT the very first condition it checks is if the status is 'preSearch' and that was always true.

        Fixed.  

    5:00
        Coming up on time right now.  I could actually REALLY go for a swalk, but I got a date in about 90 minutes and that's probably a bad idea.

        I think I'm going to try to just populate the cash totals and call it a day.

        Eh.  Found another bug.  Looks like the restocking fee isn't being applied to SOS items?  

        HA!  Got it.  Looks like the MatchMaker is working fine.  After all, the RefundTotal amounts are correct.  But I am populating the matched_items object with the price paid from the original invoice, which DOES NOT count the restocking fee.  OK, that fix is easy enough.  
        
        Well.  Or is it?  If some items are damaged and some are not, those fees could be different.  Shit.  OK, I might need to calculate this inside the Dispos loop?

17 Jan 2023
    -OK.  First, I need to create a function that creates list items to populate the Tenders list.

    -The next challenge after that is probably to figure out what to do for the final list screen and adjust the Tenderizer accordingly.  The Tenderizer needs to:

        -Provide a return tender type based on what the original tender was.
        -I need some kind of option to see All Smooth vs. All Fail.  ATM I think maybe a small or hidden button at some common catchpoint (RefundTotal?  Maybe back at Actions30?) because it would be kind of nice to use the existing cart contents and not make the tester populate the whole thing from scratch.  
        -In the case of failure, I need to specify what alternative refund tenders are provided based on the tender type

    -After that, I'll need to create a component for the stepper, which AFAICT doesn't contain anything I don't know how to do but will definitely take some doing.  

    -I will also need to create a 70-panel that presents different return types based on what alternatives are present in each refunds_by_tender type.

    -The FailMode is proving more challenging than I expected.
        -Right now, I think what I ought to do is create a global Scenarios state, probably in Actions.  I think I also want to make it changeable through the interface rather than the code because I won't necessarily be the only person running tests.  

        -Well.  I'm kind of spinning wheels right here but I am pretty confident that I'm going to need a different page and a link to get there.

        -Or maybe I don't.  Since I don't actually know that it is needed, I could just do it in code and save some time?

        -OK, so what I think I will do is specify WHAT to do in the case of failure within the Tenderizer, but store whether or not to do the failure scenario in the State.

18 Jan 2023
    Well, I've been performing like shit all day, but I've finally caught a burst of energy and, naturally, I don't want to spend it on my real job :p  Let's do this right.  69420 and then try and jam till about 7:00.  Damn, I'm like... fidgety right now...

    - I think the first thing is to at least get the Tenderizer returning the Original Tender and Return Tender types based on the input type. Actually, never mind.  I'm ONLY going to do the Refund Tender.  Creating the Original Tender string just from the Tender obj would be nice but it doesn't have any dependencies.  

    So the obj for each tender needs to include:
        - User's choice refund options.
        - A string describing refund options?
        - Options in case of failure (is this every anything besides cash + store credit?)
        - Maybe a canFail property?  Or maybe this just tracks if the failureOptions property is empty?

        -Part of me is wondering if I shouldn't just have absolutely everything relating to tenders in a big old object?  

        -OK, here's what I will do.  I'm going to at least try making a big tenderStandard object in Returns/Functions.  I will at least use it in the Tenderizer and maybe other places too?  
            -I guess the problem I am considering is that in the Invoices store, in some of the search functions, in the MatchMaker, and in the Tenderizer I am calling dealing with the same name in a bunch of different contexts, having the right name is necessary for this to work, and I worry maybe I am violating DRY?  

            -I don't think this is necessary to get to the end, so maybe I should drop it.  I just know so little about Javascript that I don't know if I'm doing bad.  

    Crap. Now that I'm thinking about it, I might need, or at least want, to do some backtracking.

20 Jan, 2023
    This 69420 might be more of a 69-24.  I need to write as clearly and specifically about what it is I plan to do and why because I could see big waste either  way.  Either I waste 2(+?) days on something that might be completely unnecessary or I move ahead, spending time on work that I later have to spend more time uprooting and working around.  

    -OK.  So can I even describe what problem I am trying to solve?  I guess my original complaint was that I have a bunch of references to different tender methods scattered around the app, but no SSoT.  
        -Transaction details [card specifics, amount spent in Store]
        -Description string doesn't yet have a home (either Tenderizer or central Tenders object?)
        -User options and error-handling options both still TBD.
        -Primary Key - currently being explicityly declared in the Store but it would be neater just to have it in one place.  

    -I think my original objection came from the fact that for the Lookup feature, I was having to copy/paste a bunch of invoice properties at once and that seemed clunky, but most of the lookup types are not payment properties so even if I did have some really clean, perfect reference object it would, at best, solve that problem partially.

    --Aaaaaand, Lina just told me she's moving to Pittsburgh.  Fuuuuuuuuuck.  Now I can't focus AND I'm sad :(
    -OK.  That decision is done and worrying about it changes nothing.  Let's at least try to power through and get something done today.

    -So if I do make a perfect factory function, what would I get?
        -I don't think the MatchMaker would change much?  I guess I would be making the tender-label in the factory function, so a little bit?  (NVM, that's the itemNum and price, no name is made for the tender)
        -I would probably be storing derivable information in the invoice, things like labels, truncated ccNums, etc. but if I want to have that information in a single place I am doing that anyways?  
        -I guess the other option would be to have ONLY unique info in the invoice (which is probably the 'correct' way) and then Tenderize it somewhere else.
    -The other thing I would like to do is to have unique payment types, like different credit card numbers and checking acct. numbers as the keys for payment types, although I don't actually have to do that.

    -The last factor to consider: factories appear to be pretty useful and it would be a good idea to get some practice with them, although it seems like classes are the thing I'm less familiar with and I don't think this would be a class?  

    -I guess the question of having the unique identifier as the key is a separate question.  What would have to change?
        -Maybe the lookup?  
            -OK, I think this could be done.  I would just change the search route to stop at the key, rather than a property.  
                -Or, actually, I think I would have the variable as part of the path, and I would just check to confirm that the number match is has the type of 'credit card'
            -Same for a check, AFAICT.
        
    -OK, now onto the real question - should I be working on any of this?
        -The EASIEST solution:
            -don't change anything with the primary keys.  At this moment, it isn't a problem that I only support one credit card num per invoice.

            -For the sake of practice, I probably should have a Tenderizer.  Some of the stuff, like 'what kinds of refund tenders do we offer' I shouldn't be assigning by hand anyways.

        -So then it sounds like the only real question is if I want to do the unique primary keys or not.  And I think the answer is yes?  I think I want that feature at some point, so I probably shouldn't be building dependencies on top of it.  Maybe not a huge amount of re-work, but probably for the best?

        -Not related to the work, but I just thought of a cool idea.  For fastest filtering, filters should be applied in order of "excludes the largest percentage of the search space"

        -So then I think I should create a separate branch, change the primary keys, confirm that everything is working, and then do the Tenderizer.  OK.  Let's make it happen.
            -I am expecting to make changes in:
                -The Invoices store
                -the InvoiceSearch function for any searches of a payment type
                -Confirm that the MatchMaker is working on the new types.
        -OK, the changes seem to be working.
            -First, check to see if I can get there with the shorter route.
        
        -Looks like we have a snag.  I don't know of an easy way to do a comparison to a property key (not value).  For all the other searches, I'm checking if a property matches the input, but for CC, debit, and check I don't have an easy way unless I also store the # as a property.  I thought about having a creditCard property that could have [n] potential numbers, but those also have to have unique keys so I'm really just moving the same problem one level deeper.

        -Unless I want to have a unique process for the unique property keys, I think I'm just kind of stuck duplicating the info.

        -Also.  For what I'm trying to do, this is really a non-problem.  It's an extra property.  It's fine.  Let's Rule 1 and move on.  

    -The next question is how to handle the Tenderizer.  I was previously doing it as a switch statement, but since I'm going to have to do comparison in addition to just the key name, maybe just some if statements is better.

    -OK, found another bug.  Looks like I'm not finding a proID number.  I'm gonna call it a day and pick up here tomorrow.  To Do:
        -Figure out why proID isn't working
        -Change Tenderizer to If statements and then get it working.

21 Jan 2023
    Got a  date at 7:00 so I can't go all day.  Need to try and be efficient with the time I have.  Also slept like shit last night :/  Let's try and make good decisions here.  Tasks for the day.

    X -Figure out why ProID isn't working (or, conversely, why LCA is working.  )  OK, got it.  In the searchRoutes object, I had a key that didn't match what the button was dispatching.
    X -A brief feline interruption
    - Fix the Continue button on the second Review screen.  Not stricly necessary but it's annoying and it comes up way too much when I am showing this to people.
        -For this to happen, I think I need a basic, blank screen in the shared components.  
    X - relocate most of the shared components into subfolders

    1:40
        Actually not sure how I am doing.  I've been working pretty well, but I've been doing mostly peripheral stuff.  I created some new button classes to control button width from the App CSS classes which will improve consistency, but that's not exactly critical.

        OK.  The next thing to get after is the Tenderizer.  Once I can correctly populate all my refund tenders with the appropriate data, I can make the stepper and hopefully it won't be too hard.

            -Now.  I'm contemplating doing something MAYBE stupid.  The Tenderizer will be pure Javascript.  However, I'm wondering if I could make it as a React component.

            -OK.  After doing a little bit of digging, it sounds like the way to do this is with a Custom Hook.  I don't really even understand non-custom hooks, so I'm not sure how to proceed.

            -Custom hooks appear to be the correct way to share logic between components.  AFAICT the other big advantage is that they don't violate the Rule of Hooks.  

            -The problem I ran into with the MatchMaker is that it is just a plain old regular function, so it can't use hooks inside of it.  

            -I tried making a custom test hook to put into the reducer and got an error for violating the Rule of Hooks.

        -Let's get some more thoughts down on paper.  
            -I don't need to have the Matchmaker in a separate component.  It's not being reused anywhere.  I just want it as a module so the code isn't super long.

            -I WANT to have access to the Returns state within the Tenderizer, although I don't actually think that's necessary.  Actually, I'm not even sure it's good.  The Tenderizer should control WHAT options are available in case of a failure.  Whether or not it has actually failed isn't determined until later.  The individual stepper LIs are going to get their failure status from somewhere else, probably the 30 panel that controls them, and it will be easy to have THAT component see the scenario state.

        -OK, let's take a quick swalk break.  When I get back, I need to start writing the Tenderizer with its conditions.  

    4:10 - feeling pretty good, although this ~2 hours after dose 2 is when I'm at peak Adderall effect :)  

        -OK, got another bug.  The InvoiceSearch isn't finding debit numbers because I don't have a route to search for debit.  
            -I THINK I can just use a ?? on the creditCard condition to get it to search for debit?  
        -OK, it's working now.
        -At some point I might need to handle a check that's too fresh, but that's probably a problem for Future Me.

    -Gotta think here.  In the no-failure scenario, what has multiple refund options?
        -Debit: Original Debit or cash
        -Check: Original Checking acct. or cash.

    And in the case of failure:
        -Debit: SC or cash
        -Credit: SC or cash
        -Check: SC or cash
        -Digital: SC or cash

    AFAIK, store credit and cash can't fail?  I don't think I will ever need the 

    So I think the logic goes:
        If no user option, no Ask 1.
            If failure, Ask 1 (Fail Choice)
        If user option, ask for choice on 70-panel
            If failure, get user input before proceeding to next.

        -This also means that in the Tenderizer I need to create properties that hold user choices?  


    -It's getting near the end of the day.  I'm probably not going to program any more, but I do feel like trying to plan out some of the logic for the stepper.

    -Since both panels are referring to a shared state, I'll either want to track that state in the page instead of the components.  
    -Actually, I can probably just handle all the state changes in 
    session.refunds_by_tender.
        -If I do that, I'll definitely need a dispatch type to handle it.  My plan before was to have lots of logic in the state setter, 
    -I'll probably need some sort of logic to order the states.  I think I want the auto-complete options done first, followed by the ones with user input, followed by check.  
        -I was thinking I'd like that in the Matchmaker, but it's an object and I want it to be an object.

    -I also need some way of adding new tender types to the queue, specifically cash and store credit.  THAT means I probably need access to the Tenderizer here, too?  

22 Jan, 2023
    12:00:
        It feels like a very simple effort to get started but I tried to start 20 minutes ago and failed.  OK.  Let's get after it, and as a show of seriousness, we will start with the full 69420.

    - Probably going to start with some more writing.  I feel like there's a much neater, cleaner version of the structure I have in mind.

    - Actually, for my 20, I might start with the blank page, along with a dummy data object.  I DO NOT want to test this by going through all the steps I would need to to get 5+ matched tender types into this thing.  I'll get all the visuals and then confirm that it is working.  
        -IDK why, but I like this approach.  I know you're 'supposed' to have a plan before you build, but I want to have something on the screen to look at and I also think this will be a nice launch in to the work.  

    1:40
        I'm slowly getting into the work.  Still not super focused, but I want to try an experiment where I just jam as hard as I can for an hour.  Like, really try to drive through and be intentional with my focus.

        -I do think I at least have the skeleton I need to proceed with the work.  

        -I need to come up with a plan for the LIs.  They are going to have quite a few different states.  Active, inactive, complete, whether or not to display the second option, etc.  There are a few tricky things about this situation.  
            -First, the status of the LIs is going to be handled entirely through logic coming from somewhere else.
            -Also, they are going to be handled sequentially.  
        -OK.  So what I think needs to happen is that all the conditional display will happen within the LI, but the condition-setting will happen in the parent?
            -I don't even think I need a state in the LIs?  I think I probably just track all potential conditions in the new object returned by the Tenderizer?
        -In the FinalizeRefund component, I am also not sure I need a separate state?  My goal should be to handle everything from the session.refunds_by_tender state.  So let's think about what states to track in each tender obj. returned by the Tenderizer.

            For all:

                -processStatus:
                    "notStarted"
                    "inProgress"
                    "Complete"
                    "Failure"

                -secondChoice:
                    true/false?

            For potential failures: Check, Credit, Debit?

                -backup modes:
                    "cash"
                    "store credit"

            For tenders with initial user choice: Check, Debit?
                
                -refund original: true or false? 

            And I need to track the 70-panel content, although maybe that logic belongs in FinalizeRefund?

        And I gotta make these as universal as possible because the LI isn't going to know what it's dealing with in advance.  

        -I think I want to start by building Debit and Check, because their Sad Path is the hardest.  Once I've got those the others are easy.

        -I also need to think about how I'm going to handle the dispatches in Returns.  IDK if I can just have the dispatcher overrwrite the old content with new.  I guess what I could do is handle ALL the processing in Finalize Refund and then dispatch fully-prepared tender types to the Returns.session state?  Right now that seems like the best.

    2:50: 
        -small wrench in the plans.  There actually is at least one scenario where the LI hasn't failed but still needs to show 2 lines.  That is when there is a cash return, because we run them through a confirmation screen.  

        -Before I can verify that any of this is working, I think I need to have the LI component.  I'm gonna take the next 90 minutes to build the thing and then re-assess the rest of the day's plans after that.  

    4:00:
        -OK, kinda losing steam. If I can put up one last good session I will call it done for the day.  Let's go!

    5:00:
        -I just don't have much push right now.  I think I'm gonna take a a swallk and if I'm not feeling it when I get back, I'm done for the day.  

23 Jan 2023:
    2:50, just getting started.  I haven't pushed very well for a while.  The best result would have been to start a few hours ago, but the second best result is to make something out of the day I have left, so I will dangle a swalk in front of myself - if I honestly earn it.  That's going to include working until 6:00.
        -I will give myself a bit of grace here.  The stepper is a hard, complicated problem and just like the Matchmaker, I might have to pass through a rebus stage before I really grasp it.

        -I think a good rule of thumb is - data and logic should be stored in the lowest-possible parent of ALL processes that do (or will) consume it?  

        -So what that says to me is I want to keep the refunds_by_tender objects as lean as possible, and have as much of the logic as possible in the LI?  I probably could.  Tender-specific information needs to be stored in there, obviously.  I also think stuff like the String Name should be in the state because it's used in more than 1 place.  And I should track status, because I think the LI is only going to render based on what it sees?  

            -So I definitely need to track process status.  

            -The Level1 refund tender should never change, I don't think.  Like, if it's a debit card, what happens JUST to the L1 label?
                -If they confirm Debit:     No change
                -If they select Cash:       No change, add a Cash node.
                -If debit fails:            No change, add Cash/SC node.
            
            Yeah, I think that's right.  Now, for the second node: 
                -If failure:                No change, add Cash/SC node.
 
            And for L2 label, user selection:
                -If confirmed debit         No L2 at all.
                -If cash:                   Only shows cash.

            ALSO!  AFAICT, I think that only In-Progress and Warning states could ever have two lines.  Everything else should only be a one-liner.

            So the stepper should be able to figure out everything for itself if it can pull the following from Session state:
                -TenderType (determines what's available)
                -stepStatus: (determines most of what to render)
                -failureStatus: (also determines what to render)

        -So I think if I add in a tenderType: property in the invoices, I can get that from a single route into each refunds_by_tender{} object, and I can use it as a key to get specifics out of all the other objects? 
        
        -And where I'm leaning is to having some interlocking set of objects and using those three main properties as keys to get all the specifics.  Like, if there's a failure, there's a single choice: store credit or cash.

    -I do want to get started on this.  But I see an issue on the horizon, and that is the ordering of the tender types.  
        -Ok.  So I can't order the state, because it's an object and it should stay as an object because that makes it easier to add payment types.
        -I don't need to order it in the Review section because it doesn't matter.
        -So when I make the tendersArr in FinalizeRefund, maybe I just stick in a function that orders the array the way I want it and sticks Store Credit and Cash at the end?
            -So like every time the page re-renders (including state changes, since that's when I would be adding Cash or SC tenders) I'd get a fresh array where each element has identical properties to the state object they came from.
            -Sounds good, my only question is whether the array's order could change.  I don't think so, but if it did, that would be pretty bad.  I don't think it would (and Rule 1) but could be a problem.

    4:45
        Well, against all odds I am kind of in a groove.  I really ought to refactor the Tenderizer but I'm not planning to go much later than 6:00.  That work *should* be easy so I'm gonna postpone it to get more focus time on the TenderTypesLI.
    5:30
        OK, crunch time.  I am on track to earn a swalk but I've got to finish strong.  I actually think the correct play is to do those Tenderizer changes I was thinking about earlier because then I won't have to context-change to do it some other time.

    6:00 Aaaaaand, I did it!  Wrapped up with just seconds to spare on my timer.  I should remember today.  Even with a bad start, this kind of finish is possible.  Swalk earned :)

24 Jan 2022
    12:20
        The reason we got into trouble yesteray was because we didn't turn into the work as early as possible.  My work for today is done.  I'm clear until Design & Conquer at 3:00.  

        The first thing I need to do is make sure I've got everything I need downloaded for the remote doctor call today.  That's the single most important thing on my plate and I don't want to be scrambling at the last minute.  

    12:50
        OK, I'm in the clear.  Still did a little time-wasting but I'm in the game and ready to play.

        -I can start 69420 by adding in the second rows and creating the rest of the icons.  

        -I think I need to also store some kind of property related to the second row.  AFAICT it's only ever going to be Cash or Store Credit, but I don't think it can be purely derived because the user can make a choice.

        -I need to start thinking about the objects that will store all my status-related properties and how I want to organize them.  The goal should be to populate the whole LI just based on the tender object's properties.  I'd really like to have as little logic as possible.

        -I'm also going to have to figure out how to do the text styling in the stepper.  I really don't want to have a lot of different branching conditions for when to display boldness and black vs. grey text.  I'm thinking either constant weights and only vary color, or else Active is black and bold, and anything else is grey and regular weight.  I think probably the first option since the different weights do help tell everything apart?

    1:50:
        A little bit stuck here.  IF I hand-code the second row I'm kind of violating DRY, but I just don't want to deal with it.

    2:50:
        TenderType row is now correctly showing and I think I might be done for the day.  DAS is in ten minutes, then I have my surgeon call, then I have UX Refinement, and I don't think I'm getting back into the groove afterwards.

25 Jan 2023:
    12:10
        I was actually planning not to program today, looking at a drug holiday to reset my tolerance.  However, the rest of today is completely clear and with my upcoming surgery it's not like I'm going to be doing a lot of programming the next few days.

        -Also got a haircut and a vehicle inspection and registered Tango today so I'm actually kind of kicking ass.   

        -intersecting objects

        -That's what I wrote before I started 69420 because that's what I think the solution is. The heart of this is going to be states that track status, and for statuses shared in more than one they will pull in statuses.  

            -I need to build objects for each of the main statuses.  
            -I actually don't think I need to track Failure in the objects?  All dispatching is going to occurr in FinalizeRefund, so I don't think the LI needs to be aware of failure?

        -I think what I will do in FinalizeRefund is to have a state that tracks index.  It will cycle through each tender type (by index) and dispatch state changes to the session.refunds_by_tender object based on conditions and inputs.  
            -and I think the index of the key is the only thing I need to track to get through the list?  The cycle in FinalizeRefund will not directly affect the UI in any way.  It's just making changes to tender objects and TenderTypesLI is conditionally rendering.  

        -Spinning wheels a little bit, but I know no matter what I'm going to need a Condition object, so that's where I'll start.

        -Actually, got a better place to start.  First, of the tender objects are going to need some common properties, so I will add the ability to add those.  
    
    3:30.  Got interrupted by a surprise meeting.  I will set a goal of 60 and 90 more minutes and if I can pull it off I earn a swalk.  

        -OK, so where are we?  I think I'm tracking all the props I need to in the Tenderizer, so I should get started on the status objects.

    4:30:
        A few more delays, mostly related to my real job -_- but I'm still pretty dialed in and finally making progress! Two new tasks for the day:

        -I need to make a decision on how I am going to display the Active item and figure out how to conditionally apply the CSS in a way that isn't an incomprehensible hairball.
            -Yesterday I was thinking about having all the font weights stay constant and only vary the colors.  So what I will do is create 2 different classes, store the name of the class to apply in the Conditions object, and then have each element reference whatever style is associated with its condition.  SHOULD be pretty easy?

        -There's a third factor here, which is new from today.  When the tender type is changing or has changed, I need to strike through the discarded number (Looks like we shouldn't zero it out)

        -I need to figure out how tenderType and the status object interact.

    5:45:
        -Didn't get to the status/tenderType interaction, but the Conditions are working well in the TenderTypesLI and I'm gonna call it a day a little early.  Swalk has been earned and it's probably my only walk of any kind for a while :/

2 Feb 2023

    3:50 * First time back here afer my knee surgery.  Gonna try and get this back into memory.  I was kind of hoping to clear out all my real work today and do this tomorrow but I'm still waiting on a ticket.  I mean, I guess I could try and do it anyways, but I'm not super clear on what needs to happen.  I'm also frustrated and angry because I think the direction we chose just blows and I don't want to do it.  Just gonna write for a bit to jog my memory.

    -IIRC, I had all the different statuses.  

    4:30

    Got a bit of minor cleanup in.  Gonna try and jam for 90 minutes and then call it a day.  And it's OK if there's a lot more word writing than code writing.

    -OK.  So what do I need to do before I can proceed?  The LIs now display appropriately based on statuses.  I have a dummy list of tenders because until this thing is working I'm not going to spend the 5 minutes to add real invoice matches every time.

    -In my dummy list, I'm using the Tenderizer so everything is starting with the condition of Not Started.

    -IIRC, I'm going to be reading EVERYTHING from the session.refunds_by_tender state.  I THINK I don't even need a local state for this.  Everything I see in both the 30 and 70 panels should be dicatated purely by the status of refunds_by_tender.  
    
    -So maybe the first thing I should do is populate that state with the dummy tenders and read from there now?  It will save me some re-wiring later.  Plus, I need to be dispatching changes and as a static dumb object, that can't happen.

    -Maybe that will be my goal for the day.  Populate the state, read from the state, have a dispatch switch case to change the state, and call it a day?

        X -First I need to check the Matchmaker and verify I'm not screwing anything up.  
            -I don't think I'll screw anything up.

        X - Read the refunds_by_tender state from Returns and populate Tender Types 30 panel with it.

        X-Figure out how to handle the dispatcher
            -I'm leaning towards a really simple function where I just replace ALL of refunds_by_tender with a new state for each modification.  That should allow me to keep the logic simple 

    5:40
        Not the best day I've ever had but despite a late start I managed to get some valuable work in.

3 Feb 2023

    4:00 --
    
    Been kind of time-wasty today but trying to have a nice strong finish like yesterday.  Gonna go till 6:00 plus however long I feel like after that.
    
    OK, where do we stand?  
        -I need a way to get all of the tender types in the correct sequence.  I would like the automatic transactions to happen first, but I NEED the last two to be Store Credit and Cash, respectively.  

        -The other key factor is whatever order I sort the non SC+$ properties into, I NEED to make sure it's the same every time.  
        
            -What I wish is for them to be ordered within the object at which point I could just turn it into an array (since AFAICT for strings the array order is the insertion order)

            -I actually can't quite articulate why I want this.  I'm afraid of the order getting messed up if I add $ or SC in the process, which I am VERY likely to be doing.
    
        -The other option is to just sort the array.  I guess that isn't terrible, as long as I make sure that if I add SC + $ to the state and not just the array.  
            -Right now, I think that's what I should do.  I don't have an easy way to control the order the refund tenders are placed into the object, since they're being matched in the order they are found.

            -I think that no matter what, I need to write a function that sorts an array.  Even if I do want the object sorted, the only way that could happen is to turn it into an array, sort the array, and then turn it back into an object so there's basically no chance this function is a waste.  OK.  Looks like we have a direction.

4 Feb 2023
    9:55 IDK why it's ALWAYS so tempting to skip 69420, but I rarely regret it.

    -This 20 might be mostly writing.  

        X -The container for the steppers needs to scroll.  Probably a low priority, but also easy?

        X-I need a state to track the active index in FinalizeRefund.  

        X-I specifically need to figure out how I am going to handle the L2 steps.  
            -I think what needs to happen is that for any tender type that can display an L2, I need to have at least one property to store its value.

    I am now wondering if there is EVER a choice that needs to be made for a refund failure?  Like, if a credit card fails, we're not giving them cash, right?  

        -I think the thing to do is build the capability.  It will be easier for me to design for it and take it out than to not design it and put it in later, and I have at least one example of a choice being required on failure (Apple Pay)

    OK.  A thought here.  Maybe this is crazy, but I think my sorted array should contain keys, not values, and I think I should be populating everything from the refunds_by_tender[key] 
        X -The reason is that my UI should be reading from the session state, and my dispatches should be modifying the session state.  It does me no good to interact with the tenders array because that is strictly local.
        -This is cool.  I mean, I'm sure I would have come to this conclusion eventually but I feel like I anticpated it.

    Now, how to handle the loop?
        -For the 70 panel.  Should I have a local state property to control this?  I kind of hope not?  My ideal would be to just have an object that contains the options, and display those options PURELY based on the status of the current index.

        -OK.  Do I want to have a local state?  Let me think about the alternatives.
            -If I don't:
                I think I just have an object for the 70 panel, and I render that 70 panel as: {70_Options[panelStatus]}

            -If I do:
                I dispatch the active panels by hand.  This is more by-hand logic so more opportunities for me to make dumb mistakes.  BUT if I encounter ANY scenario where the 70 panel can't be derived from the index, I think I have to do this anyways?  

    12:50:
        Had lunch, did some house chores, ready to get back to it.  I do have some simple tasks that need to be done, like creating the Cash Back page and the Send Receipt page.  I was actually planning to put these off and try to eat the frog, but I think it might actually be better to do them now.  I will need them no matter what, and it would be helpful to get some cheap wins to build momentum.

    2:20:
        OK. Let's do this.  How to handle the loop, which might not even be a loop.  Ideally, I want this sequence to run without any reference to the tender type.  That will make the logic so much longer.  

        Automatic Logic:
            
            If Active Tender status = Not Started {
                If there's a user choice, dispatch Active2line, else...
                If there's a failure, dispatch Failure, else...
                dispatch Complete
            }

            If ActiveTender status = Active2line {
                display UserChoice 70 panel
            }

            If ActiveTender status = Failure {
                display Failure 70 panel
            }

            If ActiveTender status = Complete or Swapped {
                dispatch Increment counter
            }

    Stepping out of the details for a moment.  I feel like this is where a better logician would be able to breeze through.  I have this sense that there's some really clean abstraction out there for this problem but I am having trouble finding it :/

        -OK, here's an idea.  What if every tender item contains a UI property, even Cash and Store Credit?  The 70 panel just displays whatever is the current UI property of the active item, and that can be altered by dispatching to the refunds_by_tender state, mostly through other UIs?  

        -This feel like the way, although I'm not sure exactly how to do it.  


    The other way to do it:
        -I could have a property in each LI that contains a sort of Primary Key status, and from that the 70 panel could be derived, but that seems like just a more abstracted version of the previous solution, and also less flexible if I have to change something, which I very likely will.

        OK, so how to do this?
            -I'm definitely going to need an object with an interface for all possible states.
            -I might want an object just with the state names?  They will be used in:
                -the Tenderizer, because each refund tender needs one to start.
                -Finalize Refund
                    OK, so not actually that many.  Can probably skip.
            -Ideally each state is abstracted as much as possible.  
                -For instance, the Failure Screens and the User Choice screens are so similar that it would really be a shame to make a bunch of copies by hand.
            -If I do that, I will need either some logic to derive the states from limited information, or more properties in the Tenderizer.  

        I think I might just need to dive in here.  If what I'm about to do is a rebus stage then I'm not confident I can abstract my way past, and if there isn't then I'm just wasting time.  

            I think I can actually abstract this down to 2 screens, one of which I already have.

        Now got another concern which is itching at me, and that is if the two of these should be separate components.  I think the answer is No, because in terms of both reading and writing to the state it's kind of helpful to have them all at hand.  But it still feel like A Lot Of JSX All At Once.  IDK.  If someone challenged me I could make the case for why it's all together.  None of this is reused anywhere.  

    5:00
        Got another concern / itch.  I feel like the options I'm going to display are the product of the tender's Type and Status and I feel like there's got to be a systematic way to derive them.

            -Intuition is sort of:  Type behavior changes a lot more than Status.  So I think that means more of my inputs should live on the Type (so I should put it in the tenderizer? )

        It's a question of what should live where.  OK.  Since I am already doing Type-dependent assignment in the Tenderizer, maybe that's the place?  

    5:45
        Copied from the TR:
        -OK.  Breakthrough.  I had two key insights: First, that behaviors based on tender Type vary a lot more than behaviors based on tender Status, which means ... something important?  
            -Do my definitions in Type and my logic in status?
            -Easier define how Status responds to Type than vice versa?
            -Easier to hold status constant and vary types?  
            -Arguments live in Type, functions live in Status?  
            -I actually still have yet to find a great explanation the pattern to the pattern, but it means I'm defining almost all behavior specifics in Type. 
        The other breakthrough is that I'm already doing some Type-based definition in the Tenderizer function, so that is the natural place to handle all of the Type-specific defining.  I had type-specific logic in three places and that was itching, although at the time I didn't realize why.

    6:15
        Should I be defining button behavior in here?  Like, get it ALL in the Tenderizer?  Not sure.

        -I've also noticed that I'm kind of losing speed.  For some reason this feels like a decent stopping point, like I should let that decision mellow for a bit.

        However, I still feel pretty motivated, so I'm thinking about switching to something easy, like maybe the Icons.  I feel like that's something I'll definitely need at some point, and it shouldn't be too hard for me to just pump out with some music on.  Let's see how we do!

        If I REALLY want to go to OT I could finish up the Select Receipt screen, but that thing is so unimportant that I'm probably better off just stopping.

    6:50:
        I think I'm done for the day.  Can't swallk, but siit definitely earned.  Gonna ponder takeways for notes-tr and record after.
    

5 Feb 2023
    -9:55:
        Found myself looking up the SR-71 and realize I need to work.  I think my first move is actually going to be working on that tender icon component.  I do need it and it would be a nice, satisfying way to get into the work.  

        -After that: I need to think about how to arrange the button/dispatch logic in FinalizeRefund and where it should live.  I am really, really close to turning the corner on this final boss.  

    -Not related to anything in the current workstream, but I am kind of liking having an object with the shared names.  It's already kind of convenient for consistency, and I just realized there's another benefit, too.  If I have something used in a lot of places (like tenderTypes) and I need to do something different, like adding an ApplePay tender, having it as a single reference object lets me find EVERY place where I might need to incorporate the new thing.

    12:20:
        TenderBadges took longer than I was expecting and the icons will need to be replaced because they are inconsistent and look like ass, but I'm ready to move ahead.  The first thing I should do is to set a 10-minute timer to eat all the food at my desk or else I'm gonna crash later. And no time wasters or this break will turn into 110 minutes :/

    12:30:
        Back at it.  OK, time for the main event today: to get all this working.  What do I need to resolve?

            -I think this is where I'm getting hung up: AFAICT the UI in the 70 panel can be determined by Type or by Status.  
                -User Choice: Type
                -Failure Choice: Status
                -Confirm Cash: Status (I think the only time the progress2line status appears is when you are confirming cash?)
                -Refund SC: Type
                -Refund Cash: Type

            -And AFAICT, a type that's in the queue should never actually change.  
        
            -I THINK that the model is:

                -Status determines what screen to display
                -Type determines how to populate it? And populating includes 'What your status becomes when you click this button'
                
        So, for a Debit card: 
                    -In Progress:  70 = UserChoice
                        If they choose Debit:
                    -Failure: 70 = Failure Choice
                    -Success: 70 = 
                        If they choose Cash: 
                    -progress2Line = Confirm Cash:

        -One choice is becoming clear.  I think the logic and state-setting needs to live in the FinalizeRefund section, although it should definitely be reading a lot of props from the objects.
            -First, I would generally expect to find 'Logic to determine what this component shows' in the component itself, especially if that logic isn't shared.
            -Second, the logic affects the local state in FinalizeRefund and setting that local state anywhere else just makes less sense.

        -OK, pause.  I'm getting an error about a 'dataName' prop and if I add more shit it will just be harder to find later.  
            -I don't get the error on the Returns homepage, so I don't think it's related to that reportWebVitals I deleted earlier.
            -So let's take stuff out of the file and see where it resolves.
                -It does.
            -As long as I am not rendering the Check icon, it seems OK.  
            -I tried hand-inputting the props and got the same error, so I think it's just a bad component?  Still sucks because that one was hard to find.  Well, let's see if an alternative solves it?
            -Used a different icon and it's OK now.  Still looks like ass.

    2:25
        Debugged and re-grocered.  I think I just gotta try writing this logic so I can get something to refer to.  I am leaning more towards putting the different screens in components, but is that good?  

        -I've said this before but I think the logic should JUST set the state?  I also think the point of this logic is JUST to get the user to the point where they make a choice.  

        What even handlers do I need, and how am I going to assign them?
            -In Kind: refund to original tender?  Or does this happen unless they choose something else?
            -Cash: change global status, 

        -OK, a thought.  I think I might need to have an object of Status.  All the Types will be in standard formats so they are easy to plug into the Status Object, but the Status Object is the intermediary between the State and the UI.  

        -It's either that or I include everything status-related in the Tenderizer?  Like a   [type].[status].property   kind of deal?  

    4:40:
        -Looks like I've run face-first into a wall.  From what I understand: I don't think I can set the Returns state until rendering of the child (FinalizeRefund) is complete.  

        OK, that makes sense.  I did have the feeling that this code was kind of sketch.  My options are:
            -Handle the initial state-setting with useEffect()

            -Figure out some way to calculate Status before it gets to FinalizeRefund.  

    -I think useEffect() is the easy way out.  My sense is that unless I am handling asnychronous operations, wanting to useEffect() is sort of a yellow flag that I should be looking for a better way to code it.  So I should cross-examine this argument.

        + I need to evaulate the queue tenders sequentially, starting with the top.  Until I sort the tenders in FinalizeRefund, I don't even know what that order is or which is first.
            - We need them as an object in the MatchMaker, but AFAICT after that all we need is the array.  Why not sort the object in the Matchmaker and just have that be the state?  Or, maybe just do the whole thing as an array and skip the object phase entirely?
                + Logic is more complex (or at least not as fast) 
                    -For the scale we're working on, speed is basically meaningless.
                + It also feels kind of hacky. We're performing operations based on primary keys.  Objects just seem like a natural fit.

        + Well, OK, then what?  We still have to process them sequentially.
            -Suppose we've got 

        + You said earlier speed probably doesn't matter at this scale.  Well, what are a few extra re-renders to us?  

    5:50
        OK, screw all this.  I'm just going to try it as a useEffect.  There isn't a clearly-better solution apparent to me and this gets me moving again.

        Got it working, although getting a warning message that I can disable by clicking the lightbulb.  I think I'm done for the night.  I'm pretty worn out right now.

10 Feb 2023
    2:50
    I think I have done enough that I can safely claim to have 'worked' today if anyone asks me.
        
    X -First, I want to try running the effect on every re-load and see what happens.  
        -This works.  However, I did notice a LOT of extra cycles.  Looked like maybe 3 cycles per list item?  

    X -Then, I think I should do a ride-along with this code.  Just follow through it step by step because I don't actually know what's happening.

    -Then I want to do some thinking and see if there's a better way to handle this.

    Man.  This itches.  This itches and I am stalling here.  OK, stream of consciousness: 
        -in my experience, useEffect usually means I should be doing something different.  I feel like there's got to be an easier way to handle this.  
        - OK. If I KNEW that the correct answer didn't use useEffect, what would I guess next?
        
            -IF I had to, my activeTenderSort() function would probably be a good place.  But this does not and cannot dispatch, and I need to dispatch.

        -If there's an easier way, it's not coming to mind.  And where that brings me back to is something like the traffic cop scenario in UseEffect that I'm looking at now.  SOMETHING needs to:
            - check the next Not Started item in the queue
            - Resolve + increment if possible
            - If not, figure out what user input is required and set to that state.

    -OK.  Where do I keep getting looped out?  I don't understand why my ActiveIndex is 1.  It should be zero or 2, right?  
        -Well, I found one small bug that was having a big effect.  When using a number in a variable for assigning the value of a new variable, ++ !== + 1.  Oops.  Now, I'm looping through the WHOLE array, but that's good, right?  My Failure cases and my User Input cases don't actually have the status the Traffic Cop is checking for, so this should just buzz through them all?

    5:20: Gonna swalk (finally!) To start tomorrow:
        * copied to tomorrow's work *

22 Feb 2023
    11:10
    Yes, late start, but other than ~20 minutes of time-wasting I was doing chores and girl-proofing the house so I don't feel bad.  

    -Computing the display text (credit card ****1234, etc.) would be a nice little starter project.
        -I think this can actually be smaller than I expected.  AFAICT all the account numbers can be obscured in the same way.  Just **** plus the last 4 of the string.
            -At some point I could make it more sophisticated and get the card issuer from the number but I don't need it for demos.  Rule 1.
            -OK.  I have labels in there.  Is this stupid?  Or, more specifically, is this a case for "Leave it and move on?"
            -I'm thinking yes?  The person I want to be would leave it and move on.  I'm gonna be like him.
    X - All the tender types need corresponding labels.  Right now they are all hard-coded to Not Started.

    -OK.  I think the 70 panel is the next big ogre we have to slay.  I vaguely have the sense that I'll be using an object and keys, but this isn't actually finalized.  
        -First, going to look back through the record and see what I already have.  
        -This wasn't really resolved.  The model I have in my mind is:
            -Status determines the 70 panel.
            -Type determines the contents of the 70 panel.
        -For this approach to work, there needs to be a 1:1 relationship between status and 70 panel.  So I think it goes like: Type determines the possible Statuses you can change to.
        -Is there a 1:1 relationship?  IF NOT: I can either figure out a way to derive the 70 panel from both Type and Status (but then what will I use for my key if I'm displaying the 70 panel from the key?) or in a pinch I could just create more Statuses.  I think the second one might be better.  After all, nothing says that the UI of a different status has to appear different.  Like if somehow a Debit Card and a Check CANNOT share the same 2-line, I could make a debit2Line status and check2Line status but use the same icons, text, etc. 

        -I guess I should list statuses and see if ALL the Types can use the same 70 panel.

            .notStarted {
                all:           NA
            }

            .inProgress {
                credit:         NA
                check:          UserChoice
                debit:          UserChoice
                storeCredit:    SwipeCard
                cash:           Close Register
            }

            .progress2Line {

                // AFAICT, only Debit and Check could ever get here, and only if they decline In-Kind payment. So: 

                credit:         /
                check:          /
                debit:          Confirm Cash
                storeCredit:    Confirm Cash
                cash:           /
            }

            .failure {
                credit:         SC or Cash
                check:          SC or Cash
                debit:          SC or Cash
                storeCredit:    NA?
                cash:           NA
            }

            .failureCash{

            }

            .complete {                
                All:            NA

            .swapped {
                All:            NA
            }
        
        So from this list, the only time we need a 70-panel at all is if we are asking the user to make some choice:
            -Choosing In-Kind or Cash for Check or Debit
            -Choosing Cash or Store Credit for the Failures
            -Confirmation of completed action for SC or Cash.
        
        Another thought:
            -I think The Failures are going to need an additional state, a failureCash state, where the associate has selected Cash and is confirming it.

        So then, here's where I think we go with this.  In the FinalizeRefund file, I make a  paths70{} object.  For each status that requires user input, I define a route.  If there's no variablity, it's just a path to the 70 panel.  Where there is variablity, it's activeItem[type].status, and the specifics live on the refund according to type?  

        OK.  I think that's the route.  It feels like the missing piece. I feel good about it.  And when I swalk today I need to do some hard thinking about how I didn't figure this out sooner.  Like, it might be worthwhile to do a workout tomorrow morning and then spend the afternoon analyzing this.

        What to do with the 70 panels?  What do I definitely need?

            X -A Warning component (configurable to userChoice)
            X -A ConfirmCash component
            X -A SwipeCard component (If too hard to configure ConfirmCash)
        
        -I think it will be easier to have each one be a full 70 panel, since some of them are going to depent on buttons.
        X -I also think I'm just going to bite the bullet and just make them all separate components.  That should be a lot more readable.  Doing that should get me into a good groove.  Let's go.

    4:10
        I've got the three 70 panels I need.  Things I need that I don't have:
            -a Paths70 object that tells what 70-panel to display based on Type and Status
            -a universal format for UserInput70 so that no matter what's populating it, all variable fields are getting what they need.
                -Ideally, this won't need its own internal object pathing although that might be too much to ask for?
                    -I'm now wondering if this was a mistake for the Payouts?  Like, I could technically have all of this live in the Tenderizer?  
                    -I'm kind of doing conditional logic though objects.  Is this a good thing to do?
                -Ideally, all relevant info lives in a single place although again, maybe too much to ask for?  
            -Any information that's going to live in the Tenderizer needs to be populated there.  
                -Maybe I should be applying my lowest-level heuristic here.  If information is consumed in more than one place (like the displayPrice or the Status) it's assigned in the Tenderizer, but otherwise it just lives in the same place it's consumed.  
                    -So actually I think what I did with Payouts70 is correct.  I don't need those text strings anywhere else.
            -I need to figure out how I'm going to handle the Dispatch functions and where is the best place for them to live.
        
        I think I should do the first two in order because that will give me something to look at.

        However, since my velocity is not amazing and I'll need some time to get the smoke-taste off my tongue I think I might have a swalk now.

    5:30.
    -Got another choice to make.  I was originally planning to have per-state pathing live on the tenders as: 
    [tenderType].[status] ) 
    but now I'm considering reversing it. In FinalizeRefund I would route as:
    [status].[tenderType]  
    
    My reasons are:
        -AFAICT I'm not consuming type/status-specific information anywhere else, so putting that information in the refunds_by_tender violates the Lowest-Shared principle.
        -It should let me do my populating extra prop-drilling since I can populate directly into the components I'm using
        -I think it makes it easier for me to define and consume all of my dispatch functions in the FinalizeRefund component.

    6:20:
    I think I'm gonna call it for the day.  I'm sure I will have to do a bunch of detailed fuckery to get this working, but I finally think I've got a clear conceptual model.  What did I figure out today?
        
        -I knew the Lowest-Shared principle but I didn't actually grok how to apply it to this problem until today.  Now I have a good idea of what should live where.

        -No, seriously: I think that tiny little revelation of using the ?? Nullish Coalescing Operator to apply Type-specific conditions where necessary and Status-specify conditions otherwise was what really broke me through.  Looking back, the fact that the 70 panel could be determined by either was what was slowing me down.  

        Also, it's funny.  When I went for my swalk, my sentiment was "Whatever pattern I identify, it seems like it should be repeatable on an infinite number of levels, not just two.  Well, this is a pattern I could use infinitely.  
        For n levels of nested conditions:
            active = [Most Specific] ?? [...] ?? [Least Specific]

        Of course, that does leave me the task of sorting like conditions together, but I think that's more doable.  I need a heuristic for how to decide which parents go to which children.  That pattern should work in any order, but some orders are probably a lot better than others.
            -I think it has something to do with shared values.  Like, if I were to do it in reverse order: [tenderType].[status], I would have been writing tType.xxx.failure   A LOT.  

        -I don't know if it's actually good, but something about the object-path pattern seems very clean to me.  

        -I'm also not sure I understood that I was solving a problem at the time, but having more Status options helped a lot.  If I didn't have that I would have to conditionally alter the statuses, and that sounds pretty hard.

        -Looking at this, it's kind of underwhelming.  I wish I could compare the understanding from this morning to the understanding from tonight to see what changed.  

12 Feb 2023
    10:10
        -Got in a workout and I'm mostly here, butt in seat, the way I want to be.  I don't feel good right now.  I'm tired and I don't really want to be programming, but nothing else sounds more appealing so here I am.  

        -One other point of emphasis today: I'm tentatively naming the pattern of "Make the choice the person you want to be would make" as One Weird Trick.  (Failures HATE him!)  I want that to be the first thing I try.

        -I need to dive into the work of getting the 70 panels to populate, and for that to happen I need to start by turning on the Failure scenario.
        I also need to make sure that I've got canFail and userChoice scenarios in the Tenderizer for all Types that require them.

        -I don't WANT to do this, but I feel like I should do a ride-along to see how my useEffect loop is working?  



    -OK.  Another thought.  One of the reasons I've avoided storing the refunds_by_tender in an array rather than an object is because I didn't know how to make sure StoreCredit and Cash ended up at the end like I wanted.  Well, I've actually already solved that problem.  As long as I run the Sorter each time before I change the state I can be sure they'll end up where I want them.  

        -I'm here again because what I'm doing (using useEffect) still itches.  I'm pretty sure I can get it working with the UseEffect.  if I change later I'll have to uproot some, but not all, since AFAICT most of what I have is already expecting an array.  Let's set a timer for 20 and see if we can't make some headway. 

            Q: Why are we even doing this?  AFAICT it's working right now.  This looks like a Rule 3 violation.
                A:  I don't care about the extra cycles.  I care that I don't know why they are happening, and the program seems to be acting in a non-linear way.  We're veering very close to "It works but I don't understand why" and that's how we get stuck forever.  

            Q: Sketch out the ideal solution.
                A: After the refunds_by_tender array is complete and ordered but before it is dispatched to the Session state, we use basically the same logic we're currently using in useEffect.  

                "Can we resolve [currentIndex] automatically?  
                    Yes?  Do it, increment [currentIndex], shoot again.
                    No? Set to In Progress and wait for the user to choose.
                
                Q: Consider a scenario where there are two CC tenders.  The first fails and the user makes their choice.  The second does not fail.  How does 2 get auto-resolved?
                    A: First, probably a Rule 1 violation. But Rule 2 might also apply here.  I think the correct approach would be to try for auto-resolution on EVERY item.  

        Time's up but I feel like I'm making headway.  OK, so here's a slightly nutty idea.  Just get it down - What's on screen doesn't have to be the main state.  Dispatch in batches, not in singletons.  
            FinalizeRefund loads.  I clone Refunds by Tender.  Auto-process as many as I can until I either get to the end of the list or I get a user input.  Dispatch that to the global state.  Start again.  But I'm not sure what that gets me.  

        OK.  So I am actually wondering if the AutoResolver couldn't just live in the refunds_by_tender switch case itself.  So any time a request for a change to that state comes in (including when it is created, since that's also a dispatch? Or is it?) UPDATE_TENDERS:
            1. sorts the list, 
            2. processess as many as it can
            3. updates the activeIndex counter (exact approach tbd)

        Thinking about it, I'm not sold.  First, AFAICT the original creation isn't a dispatch, so I'd have to change a lot of stuff to get it to happen.  Nor is my test case, and since I'm not actually communicating with an outside system, the test case is the only way I can see a failure state.

        Another idea.  How about a shared function that sorts and then processes as far as it can in the array and returns both the list and the index for as far as it got?  I can fire it once on creation, and then again every time I change the array state?  That seems like it could work.  And I can also use it on my sample case if I need to.  OK.  I'm liking this.  I need to:

            X - Make a branch because these are major changes.  
            X - Write the Sort + Process function
            X - Update the Session State to reflect this.
            X - Update Tenderizer.
            X - Update default state in Session to an array w/ correct format.
            X - Clear out all the useEffect-specific stuff from FinalizeRefund.
            X - A Plan for how to handle activeIndex

            - Sort the output of Matchmaker.

        That looks like a lot but I'm legit feeling exited.  Let's go!  Also, I'm really happy that it's only 1:40.  I would have guessed it was like 3:00.

        I need to stop and think about the activeIndex.  Since refunds_by_tender is a derived state it's going to be recalculated a lot.  While matches are being added IDGAF, it can (and should) be recaluclated every time.  Also, every time I use the Tenderizer, every component starts with status of Not Started. But once we start taking user input, I need to make sure I'm not asking for the same user input repeatedly.  My options are:
            -Store or process ActiveIndex separately from the TendersArr. (but then I need a redundant process to get it again :/ )
            -The Matchmaker doesn't preserve any part of any of the derived states when it runs.  The input sortNprocess is getting from the Matchmaker will always have a starting index of 0.
            -So I should be good.  I just need to make sure that later on as I modify the derived states, I'm running sortNprocess on the old state, not an empty state.  

    3:15
        I think what I will do is get the dummy stuff working correctly and then move onto the Matchmaker because otherwise I won't know if my new structure and processing are working and I do not want to debug this shit twice.

    4:50
    Losing steam.  Gonna try to wire together what I have into FinalizeRefund and then probably call it a day.

    5:20
    After a full day of diligent effort and hard thinking, I am... back to where I started this morning.  Seriously though, I'm happy about this work.  I think this is finally what it ought to be.  No more useEffect, no more local state, one simple loop on setup.  Swallk has been earned.  Still got a damn mountain to climb, though.
    
        -Incorporate this work into the Matchmaker
        -Remember that when Matchmaker is done processing all the refunds_by_tender it needs to produce an array and run that array through sortNprocess().
        -Figure out where in the Session dispatch process we're going to run sortNprocess (probably in the Returns case?  Maybe locally?)
        -Check if there is any value to having the 70 panel assigned by the Tenderizer (probably not?)
        -Then I need to figure out my dispatching, where it will live, and how I will get it to the components.
        -I also want to try something different for writing the dispatching.  Instead of just navel-gazing about it, I'm going to start by writing some code.  Given the limits of my working memory, I've found that I tend to get unstuck when I have something to see and compare.

13 Feb 2023
    10:00
    -I know I am getting interrupted in an hour with the staff meeting. 
    
    -I think I'm going to start by writing the dispatch functions.  It's something important that I can't test without.

    -Actually, maybe the first thing I should do is work on the TenderTypesLI.  I think the FailureCase needs to be resolved.

    2:45
    -2nd 69420 because I bought Monster Train and started playing it over lunch and ooooooh boy is it fun and addictive.  I want to try and grind out at least 3 hours of coding today, so let's get after it.  

        -I THINK (I hope?) I shouldn't have to track or hand-modify the ActiveIndex at all?  
        -Slight update: I should be fresh-calculating the activeIndex every time.  It should never need to be an INPUT into sortNprocess.
            -I HOPE the order never gets mixed up, but if it does, this should prevent it.  

    - I might need to make a more legible Resolver function.  My approach for how to resolve the statuses is more case-by-case than systematic which is usually a recipe for shit behaving unpredictably.  OK.  Rule 4 here.  Let's get some dispatches working and then we can see where we stand on the Resolver.

    X - I'm wondering if I should call the Tenderizer function somewhere inside of the sortNprocess?  
        -First, SnP depends on status so it's assuming that its inputs have already been Tenderized.  I might as well just do it inside, right?  That way I'm sure the inputs are correct, AND I only have to call a single function.
        -Also, sometimes I'll be changing the tender.  Like if there is store credit or cash, I'll be changing it.  I might also be adding SC+$ tenders.
        
    6:00
    Coded a little longer than I expected.  Considering I have a brand new and obssessable game, I feel good.
        -This was a good day.  I am VERY happy with ditching activeIndex tracking, and that's really only possible because of the decision I made yesterday.  
        -I was comforting myself for how long it took me to figure out the multi-criteria pattern for displaying the appropriate 70 panel by thinking of patterns that I AM familiar and comfortable with.

        Well, one of those patterns I am becoming familiar with is: if you have important data that is derivable from inputs, like my Derived States from Matchmaker or the Active Key for the refund tenders queue, it's usually better not to make changes to the derived data.  Better
        to just keep re-deriving it whenever the inputs change.  2 reasons:
            -Because you need to derive it for the first instance, you've already solved the hardest puzzle.  If you're going to maintain it by hand, you now need a second, separate process to do that.  If you make your original process able to handle all contingencies on re-derivation, it also makes your original process more watertight.
            -Creating and de-bugging that second process is frequently just as taxing as your first process.  
            -A really good mind tool would be to figure out a thought process that determines what MUST be tracked by hand and what is safe to rederive.  

15 Feb 2023
    -9:30
    Considering I have a new game I am obssessed with, a 9:30 start is pretty good.  I'm going to start by working on the Swapper.  The scenarios where I need it are:
        -Failure: We will definitely be swapping.
            -OK.  However.  If the choice is Store Credit we are swapping directly.  
            -If it isn't, we are changing status to failureCash.
        -Cashables: One of the buttons will swap to cash.
        -I also need a function that just changes states.  The Swapper is special because it's doing additional modifications.  
        -OK.  Let's start with the failure screens.  I know I need them, and that will be where the 

    -If I wanted: I could include the old value in the Swapped description (probably as an object property) and then zero it out.  So like if it was a credit card, once it was swapped the value would be 0, and then the description would say "Refunding $13.24 as cash"?  IDK, better but probably not a great use of my time.  

    -OK, and it looks like we are starting off the morning with a full application failure.  Let's see what we can identify during this conference call.
        -First, the failure occurred when I navigated to finalize-refund so it's probably not in returns.
        -Second, in the console I'm seeing 'DING' but not 'dong'.  We need more dong, goddammit.  But that suggests it's happening somewhere between the beginning and end of FinalizeRefund.
        -OK, so it looks like cloneDeep was the problem.  It also looks like most methods for cloning arrays are shallow clones, and that shallow clones of arrays can have the same nesting error problems that deeper clones have.  
            -Right now, I'm OK.  Each tenderObj is only one level deep, so a shallow clone would be fine.  I do not like this.  First, if I forget, it's going to be beastly to find those bugs.  Second, I don't like the idea of this dictating design decisions.
            -AFAICT it's OK to use CloneDeep on arrays because I'm doing it in the sortNprocess function.  
    11:55
    69420 again because I got distacted.  I feel like the improved pattern recognition makes me especially vulnerable to wanting to write in my journals.  That's actually where I've found myself going off the rails the most.  
        -I've identified the failure, although I have no idea what was the cause of the problem.  I hate leaving it but the answer isn't going to make a difference and I gotta make some headway here.
        -Let's get the Failure screen on the page.  Rule 4.  

        -Got a problem.  I'm getting errors when I specify a function to the button's onClick property.  I don't know, but it looks like one of my state-setters is somehow being called instead of assigned?  

        -OK. I tested with a non-state-setting function and it appears this is the case.  The non-state-setting function is getting called instead of assigned.  

        -What a mess.  I'm somehow triggering an infinite loop.  If nothing else, this is evidence for another suspicion I had earlier, that the lodash CloneDeep was just a symptom of some other problem because I've used it without trouble in other places.
            -Let me try putting in some stops in the broswer and seeing if I can find where the loop is being triggered?
            -First, I noticed that I am mutating the state, and the reason it's happening is because I am shallow-cloning the tendersArr, which I suspected would be a problem, and it is a problem because...I can't use CloneDeep -_-.  
            -Also, it's right at the dispatch where all the shit hits the fan.  
            -I tried putting a stop in the Returns dispatcher for the items, and I didn't even make it there.
            -I think I might be at the point of "Pull it all apart and add things back until we find the break" but there's one last thing I want to try.  Somehow I am mutating the existing state.  Let me just go above and beyond to make SURE I've got everything separated.
            -Wait.  I just had an idea.  I'm spreading the current active state, but not sure I am doing the same with the state I am updating?
            -OK.  That fixed the teeny little problem of mutation that we shouldn't even have.  Everything else is the same clusterfuck.
    2:15.
        OK.  Let's tear it down.  I want to start by using CloneDeep right at the start because I don't want to have to look for every stupid little mutation.
            -I can cloneDeep Session.items just fine, although it is empty.  
            -I can also cloneDeep the derived states just fine, so it's not that.
            -In the top-level Returns app, I tried CloneDeep on Items.  All good.  I also tried it on Unmatched, both at the start and also when an invoice matched.  No problems.  I then tried it on refunds_by_tender and got all kinds of problems.  Even in Returns, even before doing anything.
            -I am now wondering if the fact that it's generated by a function is the problem?  
    2:45
        I GOT IT!  Literally seconds before I started copypasting the content, I decided to take one more look through and see if there wasn't any property in a tender {obj} that seemed like it might be the source of the trouble.  Scanning, the first thing I noticed was an old <MessageRibbon> property left over from when I was still planning to have it all live in the tender objects.  I took it out and now Returns CloneDeeps and prints it perfectly!

    4:15
        OK, still not working.  I feel like I am really close because as I'm looping through in the debugger, I am seeing the correct array in the debugger in sortNprocess.  It's right there!  But I seem to be looping through lots of extra times.
            One of the issues is that I keep seeing Returns:29 in the call stack.  That's where I'm calling sortNprocess to generate the default state.  As far as Returns is concerned, .session is just a local state.  Changes to local state trigger a re-render, and my hunch is that each of those re-renders triggers this function again.  
                -Option 1 is just to move it outside the state entirely.  Not sure but I think that only the actions within the Component function itself are re-run on re-render.
                -If that doesn't work I could just try doing it off-world.
                -Or I could just copy the processed data and not process it.  

    4:55
    Got it ~kind of working.  It looks like the state is correct when it gets dispatched to Returns, but Returns then runs it through the sortNprocessTenders, which sets its state back to "failure" because we are only checking for canFail.  
        -Just FYI, I am super glad I new to look for this because it's not an 'error' in the sense that it breaks the machine.  It's just not what I want.  
        -OK, so we knew we had work to do on the Sort of sortNprocess.  I think that's the next big obstacle.

            notStarted: "notStarted",
            inProgress: "inProgress",
            progress2Line: "progress2Line",
            complete: "complete",
            failure: "failure",
            failureCash: "failureCash",
            swapped: "swapped",

        If it's Swapped or Complete: 
            Continue, change nothing.
        Else:{
            ...
            break
        }

        -Look at changing the true/false userInput status.  that simplifies this a lot.

21 Feb 2023
    5:10
    I want to smoke and this is how I'm gonna earn it.  Gonna jam in a quick session after work :)
    -I think the thing to do is try the same set of conditions but with the expectation that UserInput can be set to False.  
    -The other thing I could do.  I could store *something* in the userInput property of each TenderType that determines which 70-panel to display.  I could probably get rid of most/all props/logic related to failure, since that would just be a designated 70-panel like anything else.  
        -I would hope to replace the routes70 object.  I'm not sure I can, and I'm not sure if I should.
            -Can't: I don't know exactly how I was triggering an infinite loop but it had something to do with storing a React object in a state.  If I don't do that, I'll need the tenderizer to assign some sort of keys, at which point I'm nearly back to Routes70.
            -Shouldn't:  I kind of like having a nice clear map that shows what's being displayed when.
        I already know I shouldn't do this, at least not now.  
    5:50
    I think I know what's itching here.  I don't have a clear understanding of what is happening where.  So I think my system is: 
        - sortNprocess handles automatic resolutions.  It's between the dispatch and the setting of the new state.
        - FinalizeRefund handles resolution of user inputs.  
    -Another way to describe it is that I feel like there's a simpler pattern that I am not seeing.  
        
    For each:
        If resolved, continue.
        If user input needed, change to the appropriate state and stop looping.
            -But what is the appropriate state?  
        
    OK, crazy idea: what if the *something* I'm storing is just the next state this tender can become to (first assigned in the Tenderizer?) and every user step just sets Current to Next and then assigns the Next?

        The loop logic is super easy: if there's a nextStatus, set it and break.  If not, continue.

        Debit: {
            status: notStarted
            nextStatus: inProgress
        }

        So then we have the question of: where and how is nextStatus determined?  Because sometimes the nextStatus is going to depend on a user choice.  

22 Feb 2023
    5:05
    Today feels like reaching into the mystery bag.  Could be a complete waste, could be the most productive day I have all week.

    -At some point I should try and describe in writing the pattern of 'use middleman logic en route to completing a state change instead of changing state multiple times' because I think it's useful.

    The thing that is holding me up is that I still haven't found the pattern.  What do I have that I am satisfied with?
        -I like the heuristic of:
            sortNprocessTenders => all logic-determined state setting.
            FinalizeRefund => all user-determined state setting.

            I think it works especially well because I'm not actually setting the state in sortNprocessTenders.  I'm doing logic that changes what the upcoming state is set TO.

        -I like the idea of a path object for the 70-panel that lives in FinalizeRefund.  The outputs have to live in a Reach component, as do the different dispatch funtions, and I think it makes sense to have them all together?  Like, it itches a little bit because this is logic that should be resolved automatically and auto-resolve logic SHOULD live in SnP but I just don't know how to get there.  

        -I also like the idea of having a single true/false condition being checked in sortNprocessTenders.  I really think this is a binary I just haven't conceptualized clearly.  So I need to understand the purpose of SnP. What is the best way to describe SnP?  I actually think the 'Sort' part is clear - I want to make sure all list items are sorted in a business-logic-determined order.  So I really just need to understand Process.  Maybe I just try some descriptions?  For every tender, the purpose of Process is to:
            -get it as close to complete as possible
            -Either resolve it or get the next user input required for resolution.

        So that's the first part of the loop.  Resolved?  Continue, else change state. The harder part is: how should I dictate the next state to change to?  
            -I could probably do a state.type{} object, similar to what I'm doing with the 70 panels, although I'm going to need to account for failure as well.  Also kind of itches because being as close as I am to the 70 panels it feels like those two ought to be combined.  
                -If I go this route I could do ALL processing in FinalizeRefund, and just do sorting in Sort?
                -So maybe I get the specifics like:
                    [status].[tenderType].next
                    [status].[tenderType].panel70?
                and then I just have a .next property on each tender that I re-populate with each user input.

                -But then how to I set the inital values of the .next properties?  I think it's got to happen in the Tenderizer?  Feels bad to have such similar processes separate, but I can't do everything in FinalizeRefund because I need it before the first render.  

23 Feb 2023
    1:55
    I THINK I'm clear on real work for the day.  I also think I'm fairly close to cracking this puzzle.  I'm gonna go through my writing from yesterday, but here's where I think I've landed:
        -Simple loop in SnP checks if each Tender is unresolved.  If it is unresolved, advance it to the next stage.
        -the Advancer could be handled either conditionally or by addresses into an object.  This might depend on where it lives.

    
    -Between TotalReview and Finalize refund, I have really got a fuckload of type- and status-specific assignment going on in this app.  It would be nice to have all of that in as few places as possible.  
        -All type-related assignment (Tenderizer)
        -All status-related assignment (currently TenderTypesLI?)
        -And then a third for all Joint assignment.  

    Also remember - Not everything has to be global.  
        -Lowest-level common parent principle is valid.
        -But also, if multiple actions are based on a shared condition, doesn't it make sense to do those actions together?  

    I feel like I'm seeking a MegaTenderizer that at least does all Type- and Both-based assignment, and maybe all Status-based assignment, in one function.  OK.  I'm on board with that.  I would then have a second function that does nothing but Sort the array of Tenders and then get the Active index, and it could call Tenderizer on each option.  Any time the Tenders array changes, either from inital value, in MatchMaker, or dispatches to refunds_by_tender state, I run  the Sort on it again.  
        -The real open question: I can think of at least 2 properties that are components - the Status icons in TenderTypesLI and then my 70 panels in FinalizeRefund.  These did not play well with CloneDeep.  How do I handle this?  I don't think I can skip CloneDeep because I think I would be mutating the state.
            -In the appropriate parent components (TenderTypesLI and FinalizeRefund), just have an object with Values of the respective React components we plan to use in some shared property, and then assign the appropriate Keys in MegaTenderizer.  I'm certain this will work.
                -Slightly inelegant as this is technically checking the same condition twice.  
            -Finally learn how to write custom hooks and just make MegaTenderizer a custom hook instead of a plain old function.
                -This will take more time.
                -I'm not sure it actually solves the problem.  
        OK.  So then in that case, I think Option 1 is the clear choice.  The only cost is some slight inelegance.  Let's make it happen.

    4:25
    I'm wondering if I'm thinking about this wrong.  AFAICT, don't I only need to auto-set the initial status?  Every other status is going to be determined by user input.  

    OK.  Another snag.  I have to resolve all these in order.  I can't just zip through the list and change the status of everything.  Anything before the ActiveIndex needs to be Resolved and anything after needs to be NotStarted.  
        -If I do want to keep max logic in the Tenderizer, I can store a nextStatus property in each tender, assign it based on status/type, and just tell SnP for each Tender if there is a nextStatus, set that?
        -I do have to figure out how I'm going to handle situations where there could be >1 status changes, like Debit.  

    5:50.  I'm liking the MegaTenderizer less.  'What state to make this tender' also majorly depends on 'Are you the Active Tender?'  I need to process the data sequentially.  That means the most logical place to do it is somewhere that has access to the ordered array.  Tenderizer does not.  Now, that doesn't sink the idea of assigning 'Next Allowable Step' in here.  But is that clear?  I've found myself making mistakes understanding it.  It's certainly less clear than "Here's the branching logic as this is being processed" OK.  I need to step away and clear my head.  

    6:25
    Having gotten some steps in, I think the correct place for the Status changes is SnP.  So...we're back to where I was 5 hours ago :/

24 Feb 2022

    10:10
    2-hour staff meeting in progress.  I might need to pay attention so I can't really give the deep focus I need for programming.  However, I could tackle the task I fear the most, and that is paying my medical bill for the surgery :/  This has to be done and it doesn't get better by waiting, so the best time is right now.

        -Find out how much I owe for surgery.
            -Check the UNC MyChart page.  
            -If that doesn't work, maybe check my BCBS Alabama website?
            -If not, call the doctor.
        -Find out how much I owe for PT.
        -If the bill looks like BCBS-AL isn't covering something they should:

    12:40
    -Programming!  Yesterday was kind of a bust in terms of code written, but I think I have a clearer conceptual model.  I didn't have a reason for putting the code where it was.  Now I do, and the correct answer just happened to be "Mostly where it was" 

    Ah, crap.  I also forgot that I need to make a decision on where 'next screen' is going to be chosen.  
        -I guess I COULD do it via the Paths{} object in SnP.  But not really. Like, for the debit tenders.  The next stage isn't predetermined, it's going to depend on what option the user clicks.

    -Biggest task is to figure out how, in the loop, I am going to determine what state to set each tender to.
        If completable, complete and keep looping.
        If not, set next state and break.

            OR

        it actually looks like there's three conditions: 
        If complete     =>      no change, keep looping.
        If completable  =>      complete, keep looping.
        Else            =>      change, break.


    -I feel like I am getting stuck because I'm trying to be clever.  'Clever' is frequently 'Hard To Read'  Remember, at some point I am going to have to come back and understand this shit.
        -OK, another way to think about this.  AFAICT the ONLY time I need to auto-change values is if the tenderType = notStarted, right?  I think all other changes are coming from the outside?
    
    -I also need to figure out how I am going to assign 70 panels, although I currently like just using a string key.

    3:30.
    Well, I've got something.  No idea if it's good, but I really just need to move ahead here.  Let's fire this bitch up and see where she breaks.

    4:30.
    Seems to be working.  I'm sure there's a cleaner way to do this but for now it's doing what I need.  

25 Feb, 2023
    9:35
    Assuming I don't goof this, not a bad start time!
    -OK.  I need to decide how I want to set the 70 panel in FinalizeRefund.
        -Right now, my plan is to determine 70 panel via a tStatus.tType object in FinalizeRefund.  
        -Maybe it's a little more flexible to explicitly state the 70 panel if I ever needed a 70 panel that couldn't be determined from status and type, but it just seems like an extra layer over the logic I am using right now.  
    -I need to figure out how to conditionally get to the Receipt screen.
    -Once it is all working I need to clear out the demo piece and make sure it's still working on receipts I add for real.
    
    10:30
    I'm still not really driving through the work.  I have so many things to do that I should really be using the 'What do I KNOW needs to be done?'
        -Right now, I'm thinking that I'm going to do nearly all of the 70 panel population as props rather than content in the 70 panels.  My thinking is that since props are going to depend on status and type, I might as well just do it all at once?  

    12:10:
    Got a small but minor question here.  For UserChoice options, I need to deal with the fact that state set by choosing the in-kind is going to depend on the Failure scenario.  
        The easiest thing to do would be to just check for failure on the button click, in FinalizeRefund.  

        But my dumb ass is wondering if I could just do all logical auto-resolution in SnP because I never learn.

        OK.  We're gonna be smart here.  I'm gonna resolve this in the obvious way, and then deal with other cases later.  I'm also going to put this in my Backlog so I'm not tempted to do it now.

    1:20.
    I ate, did laundry, and wondered why I'm not knocking this out like I should be.  I'm gonna take 30 minutes and see if I can't just get it done the fancy way.

    2:55
    Well, my stupid bet appears to have paid off.  So far, everything is working correctly for the failure scenarios, and I am able to reach the end of the index.  My next problem is that FinalizeRefund isn't auto-navigating to Receipt the way it should.  Gonna take a lap through the debugger and see if I can't figure it out. 
        -It looks like a couple things are happening that I didn't expect.  First, looks like we are looping through both SnP and FinalizeRefund at least once more than expected.
        -Second, the 'for' loop in SnP never gets past 6.  I don't know if my length check => navigate condition is even right, but it's never being reached.  
        -Third.  It doesn't look like I'm Cloning the Returns state.  Don't know if this has an effect or not but it's definitely unsafe.  

    The second problem is one I can address.  I think I'm gonna do it with a While loop so I can increment before the next check.  
    Or.  Hold on a second.  Here's my problem.  The last index is length -1.  So in my six-item array, the last index is 5, not 6.  I should be checking if index === length.  

    4:40.
    Well, I think that was it.  I've still got some extra re-renders in there that I don't know where they came from, but to my eyes everything is happening instantly and I'm not going to fiddle with it.  Rule 3.  

    My next challenge is going to be getting it to work with the Matchmaker.  I'm actually really not feeling like doing some more work, but my main obstacle is just the fear of having to load a whole new set of facts into memory.

    Here's the deal I will make myself.  Let's go as hard as we can for 30 minutes.  If we still feel like stopping we can call it a day.  

    5:20.
    I'm at time and I don't feel like stopping now, so I'll move on ahead.  The issue I am running into is that downstream of SnP expects the tenders to be in a sorted array, but they're coming into the matchMaker from invoice-context as objects.  That's fine. That's probably what I would expect, and transforming them isn't going to be hard.  I think the two issues I will run into are:

        -First, AFAICT I am using the labels as the way I look for matches, and I probably shouldn't. For one, no guarantee they are unique. I also don't even want them to have labels in the invoice-context, since that will be coming from the tenderizer.  I should probably check by primary key instead.

        -I also need to add the primary key as a property since there's really no other point at which that will happen before this gets fed into SnP.  

        -I need to check to make Matchmaker isn't using any other values from Tenderizer, because I'm taking out the Tenderizer.

        -Now, the real sticker.  Right now everything is being handled as an object, because that's what it all was before I ripped it all up.  I could deal with that.  I could just do Object.keys at the very end and feed the resulting array into SnP before returning.  That might be the smartest move for the time being because I'm changing a lot and that's yet another variable to de-bug.  

        Since we eventually want the output as an array it seems neater to turn it into an array as I go, but then I need to search the array for property matches.  

        OK, I'm just leaving it as it is and making an array at the end.  

    6:20.
    Whew.  We got some problems for sure.  Total Review isn't correctly mapped, I'm not sure the disposition quantities are correct, and I've got multiple red errors in the console from what I bet is due to the fact that I'm trying to re-render FinalizeRefund at the same time I'm navigating away from it, but SOMEHOW I processed all the tenders and got to the end.

    Reminder for myself the next time I start: I don't think the first two problems are terrible.  We don't have to start with something hopeless.  Also, I could have sworn I've handled this problem somewhere else, I think with the 'missing invoices' flow.  I BELIEVE that's a 'render this or conditionally navigate to that' flow.  

26 Feb 2023
    11:50.
    Being honest, I don't really want to be here.  I'm afraid.  I'm afraid that I won't be able to solve this problem, or that the solution will require a cascade of rework that blows up everything I've done.  I just have to remind myself that I've been in bad situations before.  All my work with the Matchmaker was a struggle, and so was all my work with routing, and CSS / flex boxes.  I also know that every day I don't face this problem, it becomes scarier.
        -I'm going to leave aside the issues in Matchmaker and TotalReview.  I don't think they have any downstream effects so I can put them off.
        -First, did I get the same re-rendering failures when I was using the dummy data?  
            -OK.  It does.  That's good, because it means I can work with the dummy data, which is faster.  It also means that the problem is occuring in the general area I expect.  
    So now I believe I have two issues to confront.  

        1. Cannot update a component (`BrowserRouter`) while rendering a different component (`FinalizeRefund`).
            -My understanding is that this is because I'm calling for different route, trigginering a re-render, while the current render is still in flight.  

        2. Cannot read properties of undefined (reading 'status')
            This is a lot of words to explain a key part, marked with ***
            -My For() loop in SnP cycles while Count is less that the array length.  Now, on the last cycle, the Count increments, it is no longer less-than the array length, and the cycle terminates -   
            ***    but the count remains what it was    ***  
            That count becomes the new ActiveIndex dispatched to the Returns.Session state, which triggers a re-render of all children, and when FinalizeRefund uses that ActiveIndex, it always comes back as 'undefined' b/c the index of the last element in an array is not [.length] but [.length - 1]

        OK.  I think #2 should come first because it needs a solve no matter what the solution to #1 is.  Or does it?  Pretty sure?  
            -Even if I were to change it to a custom hook, I don't think I want to dispatch a new route from SnP.  I still want the Returns state updated and I don't know how those two would interact.
            -To me, the first solution that comes to mind is 
                -Don't increment activeIndex past the end of the array.  That's what's causing the 'undefined' errors
                -Store completion status separate from activeIndex. Since the last activeIndex won't change even when the final Tender is resolved, we can no longer use that as our Completion condition (and we probably shouldn't anways?)
                -With those two changes, FinalizeRefund should correctly render even once the last condition is complete.  
                -I THINK I can conditionally use <Navigate> on the basis of Completion to solve #1, but not sure.  

        I don't see any obvious flaws and since it's the first thing I thought of it should be easy to remember.  Rule 5.  

    1:35.
    OK!  #2 is resolved.  Successfully resolved all tenders in the array including the last one, no 'undefined' errors because I'm not incrementing past the end of the array, and the new allComplete property being tracked swapped from 'false' to 'true' when it was supposed to.  

    Now to tackle #1.  If my first idea works, this could be really quick.  Or I could be here all afternoon.  

    1:50.
    Well.  That was anticlimactic.  It's all working now.  Fuck yeah.  Nice!  I deserve to feel good.  I quickly and correctly identified the problems basically on the first pass and solved them.  I should remember this feeling.  

    Ok, I want to keep moving so I don't lose momentum.  I am also afraid of the next problem just because the Matchmaker is so complex.  But I want to dive in because I don't want to lose velocity.  Once I'm through here, the remaining problems today should be fun and satisfying?

    First, I need to de-activate the dummy data, then I need to make some matches and confirm that I'm having the Dispos issues I think I am.

    Problem.  SnP fails if given an empty array so I need to account for that.  Going to re-activate the dummy tenders to make sure it's all working.  

    OK, back to the dispositions.  I notice two things.  
        1. I'm not seeing any dispositions on items I've created.  Don't remember but I thought everything was supposed to be 'unwanted' unless otherwise specified.
        2. When I do apply a disposition, I don't see it on the corresponding Matched item.  

    I took a quick look through my notes and I didn't see anything about intentionally leaving out the Unwanted dispositions so that's probably not on purpose.
        -Ideally, I would like to have the *unwanted* dispositions assigned outside of the Matchmaker, which would mean assigning them during AddItem and then re-calculating them in ItemDetails.  

        However, the way Lowe's handles this right now is crappy.  I don't know that spending time to streamline this is good.  The smart move would be just to go through the process, see if I can find where it is breaking, and then just try to get it working.  

        OK.  I think I see at least part of the problem.  At around Line 100 in the MatchMaker, I check if the item/price combo exists in MatchMaker.  If not, I clone the old value, and set all the relevant props to zero.  But I'm not telling it to do anything with the dispositions, so it looks like I'm just copying those values.  Still no idea how those values get to zero, but I know this is a problem and I can fix it.

    4:10.
    I think I fixed the problem but now the matched_items object is empty?  Why?

    4:25.
    I added in a few consts for conditions so I could check to see what they were before they resolved, and now it is working perfectly.  Gonna see if I can win the eBay auction for this watch.  Then maybe try and resolve the issue in TotalReview, and then I think it's swallk time.  

    OK, cool!  I won the watch and I was able to get to the end of the process.  
        -Two more things to do: first, still got those mapping errors.  Second, when I create a new entry it needs to have a unique primary key.  These *should* be easy and I'm kind of feeling like leaving them for some other time.

27 Feb, 2023
    4:20
    Back at it.  I want to get to the easy stuff, but I am noticing a problem.  TotalRefund price doesn't match the price total in the List Item.
    -OK, after further review I think it's  working correctly.  The item price is: current price * scanned qty, which is actually unrelated to how much the refund is for.  It also looks like the item, some flowers, is about $44/unit in the invoices, which isn't intuitive. 

    X -Change flower prices to something more reasonable
    X -Clean out all the console logs.
    X -Get the Confirm Cash screens working.
    X -Fix the mapping problems in TotalReview.
    X -See if I need the failureCash status.  I think not?
    X -update Tenderizer to use obj paths instead of switch statement.
    X -Try it without the TotalFailure case.  Should still work.

    Tried updating the Tenderizer and got a new bug.  The first tender resolves to failure, which is right.  But then when I resolve it, the second tender, also a credit card, which should fail, instead gets set to Complete.  
        -OK, I found the bug.  SnP isn't reading the failure status from the Scenarios when it is called the MatchMaker (so it uses the Default) but it IS reading it when called in the Returns dispatcher. They were different values, and that's why it's behaving differently.  OK, it's fixed.

    Another potential issue.  Right now, in the Tenderizer, only null tStatus gets assigned to notStarted.  I fear this is a potential issue because if a credit card gets set to index[0] it will be assigned a status of failure.  If another credit card or failable replaces it in the 0 index, I THINK that failure status won't get reset to notStarted. 

1 Mar 2023
    OK, finally got the green light to work on some Lowe's-related work!  I want to make sure this is all squared away first and then I can go get after it.

    -My previous issue about the status and the index shouldn't be an issue.  All derived states, including refunds_by_tender, are re-created from scratch with every change to Session Invoices or Items.  I don't have to worry about any consequences from the old state because it's destroyed every time the new state is created.  

    -Going to try and get Confirm Cash working.  *Shouldn't* be too hard?  

    3:45.
    OK!  That's it for all of my cleanup of the FinalizeRefund screens.
    Next, I'm going to get cracking on the Generic SOS function for testing.  Let's start by laying out what I need.

    -First, let's lay out general structure.
        -Invoice.  I THINK this should be fairly easy?  I'll just add some kind of check in the Invoice lookup field.  If no generic SOS, it proceeds and dispatches normally.  If there is one, I instead display the pop-up.
            -Once they have at least one valid item, I dispatch that item to Items and dispatch the Invoice to Invoices.  Should be OK?

        -Orders.  Not sure how to handle this from the Add Invoice screen.  I guess I could update the lookup function to check for an OrderNum property?  Probably put this on the back burner for testing.  

        -The real sticker.  What to do about order lookup?  
            OK.  I loop through all the invoices before I loop through all the items.  So I can add a condition to check for it having generic SOS.  But then what?  InvoiceSearch isn't a React component, I don't think?  It is capitalized, and it's also calling a UseReducer function which I didn't think was possible for non-React components?

            OK.  Here's the plan.  I THINK I need the action to be happening in FinalizeRefund?  IF that is true, I can change the InvoiceSearch function to just return the output instead of dispatching it.  In either Invoice Search or ReceiptLookup, I can check if it is generic SOS.  If it isn't, I dispatch as normal.  If it is, I don't dispatch and instead display the dialog.

        -One last issue, hopefully not too complicated.  Right now, I don't have the ability to add multiple items at once.  I should probably change ADD_ITEM to expect an array, and then change ItemEntry30 to dispatch an array of 1.  

        -This is all conditional on the dialog not being too hard to set up.  If it has to happen in the top-level App component I'm gonna have trouble.  
            -OK.  After a bit of YouTubing it doesn't look too bad?
        
    5:40.
    It's not 'working' in the sense of having any functionality but I have got a component with a scrim and a centered element floating over the top of my page, blocking all interaction below, and that was the part I was most afraid of.  SO FAR this has been surprisingly easy, and I'll deal with the rest of it later.  

2 Mar 2023
    2:40.
    Not my fastest "getting into gear" but better now than later.  I think the first thing I need today is an invoice in the invoice-context with a generic SOS item.  I needs:
        X -A No Image image. 20 mins or else I could be here waaay too long.
        -An item in product-context with multiple sub-items and a plan to display them.
        -Some way if determining that the Invoice is for a Generic SOS number.  
        -Refactor item-adding to accept an array and not just a singleton.  

    4:30
    I am just really not feeling it right now, and I'm also not feeling like pushing through.  It's a nice overcast day.  I think I'm gonna knock off and take a walk.  

3 Mar 2023
    3:55
    I really would like to get a full 90 mins in and I don't feel like working so I will tempt myself with a swalk.  The thing that knocked me off course was seeing the Item Entry 30 panel and the realization that it's really not very good.  I think that is a mistake.  Other than the validation, there is nothing wrong with it from a user's perspective.  I'm only on the hook for Generic SOS, so I think I should just add that refactor to the backlog and only work on Generic SOS.  So with that said, my task list now looks like:

        - Get the Returns Items reducer to accept an object of item Objects.  
            - Refactor so everything EXCEPT the dispositions is working.
            - Check that Add Items is working.
            - Check if Dispositions is working.
                -If it is, we should probably stop.
                -If not, we can refactor.  

        X - Get the Items30 panel to deliver single items as an object.

    At that point I think I'm in the clear to start working on the action itself.  First, I need to decide if the items are being passed as an array or as an object.  I'm kind of waffling but I think right now I'm going with an object.  I still need to run the Matchmaker on these items and this invoice, so if I can use the exact same format I don't have to treat these any differently and given how complicated the Matchmaker already is, that's a good reason.

    Also!  While I'm not happy about the work of refactoring the ItemEntry30 panel, it's cool that just on my own I have learned enough to really want it different :)  Looking at old work and thinking 'Yup, wouldn't change anything' should be more alarming than 'I want to change everything' because that means I'm learning.  

    4:55
    I'm tempted to do some refactoring here.  I think what I will do is just do everything EXCEPT the dispositions.  I will probably end up doing dispositions too because I've already got this in RAM so might as well?  

        In theory, I shouldn't have to do much with the dispositions? It looks like the issue is that in ItemDetails30 I'm cloning the whole Dispositions object for the item, making an updated and correct Dispositions object, and then passing that whole thing along.  I think that's the right play.  

        I think I ought to take a similar approach with AddItems30.  I think I should check if the existing item exists in the state.  

        TO DO: This handling of the dispositions - should probably be its own reusable function.  Wondering if I could use the function I am using in Set Dispositions or if that is overkill?  

    6:30
    On the dot, and it is WORKING!  Got some work to do on the encapsulation tomorrow, but it is 6:30 on the nose and I can now populate returns with an object of products.  I'm sure I will struggle with de-bugging in the future, but I've noticed that my de-bugging sessions are going a lot smoother than they used to be.  

4 Mar 2023
    9:20.
    First, today's Special Rule.  Goal is to get Generic SOS # working.  We MUST prove to Kristin that prototyping doesn't take forever if we want to be able to do it more.  Prototyping is ALWAYS going to be time-crunched.  We're often crunched just getting the designs out ahead of Dev.  If we're prototyping we need to design, prototype, test, and redesign within the same time frame so I need to HUSTLE.  

    I'm in the chair pretty early.  I don't remember feeling this excited to get started in a while.  This is the dividend of ditching out early on Thursday. So my starting list looks like:

    -a BIT of code cleanup in AddItems30.  No heavy refactoring.
    -I NEED to make the stringMaker because I am going to start showing this to people and I can't have the fake strings.

    -After that, check ItemDetail30, specifically the dispositions. 

        -First, we need to see if we think it's going to work with our new structure in the Returns Items reducer.  It will need at least a little tweaking.  


        X -Evaluate whether it is PRACTICAL to use all or part of the Dispositions function in ItemEntry30.  If, in our best judgement, our future selves aren't going to understand why we are using such a complex function, it's OK to use the simpler function in AddItems30.
            * OK, for the time being I think we go with 2 different functions.  Other than 'fill in the gaps with Unwanted' they're doing two very different things.  
            
        -Whichever function we choose, put it into a separate function and then incorporate into ItemEntry30.  We will also use it later in Generic SOS.

        X -Bonus goal - Can I get rid of dispoSqueezer entirely?  
        
        X -Test.  At each point, make predictions and look for unexpected surprises.  We will probably be averse to doing this, so be prepared to bribe with treats or cool songs.  
            -Add 2 different itemNums.  
            -Change their dispositions. 
            -Match item 1 from 2 different invoices
            -Add more items of the same item types to items 1 and 2.
            -Match Item 2 from an invoice that also includes Item 1.
            -Change dispositions.  
            -I didn't actually test all of these but I'm gonna leave it for now.

        OK, maybe this is stupid but I'm going to do some refactoring in ItemDetails30.  I think I can make this cleaner, and also conditions have changed.  I need to account for:

            -Returns Items reducer no longer adds item details.  That's fine - those will have been added in creation.  But I need to make sure they are preserved.
            -Reducer is now expecting an object of named items.  
            -I'm trying to get rid of the dispoSqueezer, so I should make sure that no 'air bubble' dispositions get into the dispos object.
            -Any unspoken-for quantity is assigned as Unwanted.

            ---
            -In general, I've been pleased with pattern of:
                Make basic output => 
                Conditionally alter output => 
                Return Output

            -Need to think about how I am going to Unwanted at local and session level.
            
            The input is valid if the sum of ALL dispositions <= total item number.

            Unwanted = TotalItemQty - Sum of all Dispositions

            Not organized, just getting thoughts on page:
                -If EITHER the input quantity OR the unwanted quantity is zero, we don't add them to either the local or the global state.
                -How to handle the input messaging?  The Max Allowable input is different from Unwanted in at least one case - if Unwanted is null, Max Allowable is 0.  

            My sense is that before, there were only a few simple modifications necessary to transform the case:Invalid outputs into the case:Valid outputs and now that is no longer the case.  Or, another way to track my confusion, there are four 'variations' I need to account for:
                Valid or Invalid
                Local State and Session State.

            If they are valid, Local and Session are the same.  So I think what I should do is populate assuming a Valid state, make changes conditional on Invalid, and then proceed?  Something feels wrong.  Or, something feels harder to change?  
                
            Maybe I should start at the end, with the Outputs.  Then I will at least know what properties I should conditionally alter.

                -I think the big one is going to be the quantity of the current item.  As far as the Dispositions object, that should be the only difference between Local and Global, right?  
                    -All the unchanged remain unchanged.  
                    -The Unwanted qty for both is ItemTotal - UnchangedQty
                    -But for this Item, local can exceed?
                        -I think this is correct.  An invalid quantity is never dispatched to Global, and whenever another button or tab is clicked, the local dispositions are re-set from the global state.
                    -I'm now wondering if I should only dispatch Global if correct?
                
                So the only potential difference between Global and Local is the quantity of the current disposition.

                And I THINK the only difference between Valid and Invalid is how Unwanted is calculated. It's ItemTotal minus (oldDispos + inputQty ) unless that's negative, in which case it's just ItemTotal minus OldDispos.  

                So.  We calculate Unwanted, and record the validity.  
                    If it's valid, we assign the newDispo to Global output.
                    If not, Unwanted (oldDispos + inputQty )

                Unconditionally:
                    -assign Unwanted to Global and Local
                    -assign inputQty to Local obj.
    
    4:05:
        Yikes, that was a lot of clock cycles.  Time to test and see what's up.
        OK.  Initial tests were surprisingly well.  Everything looks fine until I exceed the item qty.
            -I fail to get any kind of alert
            -Sometimes the Unwanted qty gets included, even if the Damaged qty alone should be over the limit.  OK.  To the debugger.
        -OK.  Fixed the main issue (I was still checking if Unwanted >=0 despite conditionally altering it earlier) and now I've found another issue.  Somehow I'm getting Unwanted: 0 dispositions in my Matched items.  

        OK.  Is this a good thing for me to be spending my time on?  Absolutely not.  But I've got some clues and I'm gonna get it while I'm thinking.  

        -It looks like the issue is that the Break check at the end of the Dispos loop is failing somehow.

    5:25:
    Turns out my suspicions were correct.  It was indeed the break check and then end and MAN, do I struggle with a bunch of ! && || checks :/

    It is late, and I haven't done any of the thing I set out to do.  However, I don't feel like the last run was a waste of my time.  Any problem in Matchmaker is going to be a problem everywhere because EVERYTHING relies on it.

    -Get the local AddItem process into a function because we're going to use it again when adding Generic SOS.  

    -Come up with a plan for checking Generic SOS in AddInvoice.  Probably just a single property in the G-SOS invoice.  
        -For the time being, I'm skipping this.  It's taking so much from its context (and it's so simple) that I just don't see the need.  Maybe if it's a custom hook it's worth it but otherwise I'm really not seeing it.  

    -Come up with a plan for dispatching Generic SOS.  I think I'm gonna try a custom hook.  I also think that's gonna happen tomorrow.  I'm tired and sad and I want out of this chair.

5 Mar 2023
    10:55.
    Worked out, but doinked around and took a long time to get butt in chair.  I am noticing that holy Fuck, my focus is slippery as hell today. I have to read sentences two or three times because the words just aren't registering.  For today:

    -First, try to get Add Item function into UseEffect.  I don't think we dispatch to the global state.  We just return an object of new Items to be spread into the Items state.  The main processing is going to be 
        -checking for / adding to items that already exist
        -adding item details from items-context.
        -making sure that as an input it can handle an object of side 1+n.  
    -I was starting to question if the item-adding even should be its own file instead of just sticking it in Returns Items reducer where it was :/
        -For the time being, I think the dispositioning is sufficiently different from the item-adding that I will do them separately.
    -OK.  Custom hooks don't look too bad.  Unless I'm mistaking something, they actually look really easy.  This is like a little mind-quake.  I bet I am going to find so much code that was shaped around the assumption of 'Reusable functions can't use state or hooks'  
        -Later homework.  If I earn a swalk today, I need to think about how I missed this.  Why didn't I learn this earlier?  I definitely judged this book by its cover.

    OK. Just hit another snag.  Apparently I can't call a custom hook in ANY function that isn't also a hook.  I've just moved the problem one level deeper :/  It's rules of hooks all the way down :/  What to do?
        -First let me check and see the lowest level at which I can use the reducer.  
        OK, this is kind of a shitshow in here.  I would have to refactor damn near the entire application.  We're not doing that.  I do not need 2 days in a row of re-paving old work.  What we are doing instead:
            X-Revert AddItems30 to previous state.
            X-add 'Refactor AddItems30' to the backlog.
            -design the Generic SOS setup to deal with useAddItem.  
    
    Alternatively.  Does this thing truly need to be a hook at all?
        -after some brief skimming on Reddit and Google, it looks like a lot of people use custom hooks for damn near everything.  So I should probably start using them?  

    12:55.
    Going has been slow, but it's still fairly early.  Feels like it should be at least 2 hours later.  I'm really lucky.  I can still turn this into a great day.  

    2:30.
    OK, I am least making some progress.  Currently kicking around the idea of having all modals live in Returns at the top level?  
        I think it kind of makes sense?  Like, that's the container for EVERYTHING in Returns.  I think it also makes it pretty easy to get information up and down.  Like, if a Generic SOS invoice is added, I just dispatch that invoice, followed by a second dispatch for the Active Modal.

    2:55.
    To my somewhat-surprise, it appears to be working.  I think the next test I need to do is to make sure I can do multiple dispatches to Session.  If not that's kind of a show-stopper.  OK.  That was pretty easy.  I really feel like a swalk right now.  Not having a great time and maybe I can clear my head?.

    3:35.
    OK.  Feeling better.  Did some good thinking about what to do for the Generic SOS and I have (pretty) clear plan.  The only remaining question is, once I add the items, how do I show the Items panel?
        -This is firing from InvoiceEntry30, which is a child of ReturnsIndex, so it has access to SetActivePanels, so I COULD dispatch the activePanels to be ISessionItems70 and AddItems30.  I think that's actually what I'm going to do.  But if they don't add any items and close the panel they are in a different place than where they left, which sucks.  

        -OK.  This looks like kind of a hacky work-around, but that's what whe want.  So.  I am planning to make the activeModal state as an object, so I can pass other goodies besides just the modal name.  I THINK I might be able to pass the function up as a property of that object?  This should be a low priority.  And really I need to re-factor how the ActivePanels work because right now I actually have no idea what's happening.  

    4:25.
    So far so good.  I've successfully gotten a list of products to the Modal.  

    5:30.
    OK.  Let's have a power hour to finish up the day.  I am going to avoid temptation to fuck around trying to set the ReturnsIndex panels.  That should be the very last thing I do.  

    What I do need, for sure, is a TR.  

    6:30.
    I'd say that was a pretty powerful hour.  I've earned a second swalk.  Today I got:
        -A system to handle this and all future modals.
        -A system that easily lets me get session data to where I need it.
        -A condition that adds the modal when a generic SOS item is added.
        -A semi-configured modal. 
        -A semi-configured TR.

    To think about on the swalk:
        -What was so damn slippery about this morning.  
        -relationship of focus and momentum and how to start faster.  
        -How to strike a balance between "We're so much faster when we're getting shit on the screen" and "Solving details problems before system problems usually means the small problem's solution ends up invalid.
        -the problem with 'Start with a slam dunk' is that it does very little for the more serious problem of 'getting my head around today's hardest problem'
    
6 Mar 2023
    We're in a good spot.  We've got GSOS on the run and I just need to tear this thing apart.  I was having fun at the end of the day yesterday.  Let's try to hustle and knock this out.

        X -We need to get the item details from somewhere.  I think I can just get the product-context?

        - Need a state in the GSOS modal.  State will track:
            -items obj: { //NOT the same as the items Obj from the invoice.
                -itemNum: quantity
                ...
            }
            -form validity
            ...and then I think that's it?  I'm planning on limiting each field to the qty of its parent, so I don't think I need to check the validity of each field.

        -Now.  How to handle the dispatch to session.items?  I think it's probably best to keep the productsObj from the invoice and the output separate.  
            
    4:15
    useAddItem isn't working and I don't know why.  I think, for the time being, I'm just going to do addItems as a regular function.  

    5:10
    OK.  FINALLY I've got it working right. Since this is no longer in the Hooks chain, I don't see any reason why I shouldn't just put this at the end.  I guess I still don't understand custom hooks.  I thought it was just a quick fix that let me run functions with global context wherever I wanted, but apparently not.  

    So let's get back on track.  I will tempt myself with a swalk if I can make it to ~6:30.  It looks like ass and I have a bunch of CSS work to do, but that is pretty satisfying and I have a ~90min window between meetings tomorrow morning, so this would be perfect to do there.  
        -The next thing I need for sure is an input with a limit in each of the <tr>s.  
        -After that, I need a Handle Input change function to work in the clever way I have in my mind.  
    6:30
        I'm in pretty good shape for tomorrow.  Things are mostly working how I want.  

7 Mar 2023
    Starting this morning with a puzzler.  
    One thing I'm pretty confident of: I think it's something to do with the 'value' property of the input field. 

    9:40
    OK, I cracked the code!  It was indeed the value property, and I was getting the error because I was telling the child GSOSmodalRow to read the value of the parent object, not the specific quantity.  I also THINK I have a more general understanding of what causes [Object object] errors, and it's usually a missing object path segment.  So we're in the clear.  
    
    The last thing I should need for input change handling is a loop that checks the values of all inputs.  If any are non-zero, it sets the Valid state to True.  

    12:40.
    Back from PT.  I think the very best thing I can do right now is try to jam hard for the next 2 hours.  I would LOVE to wrap this up.  What I need is:
        X-Add the button
        X-Dispatch the object to items state.
        X-Clear the Modal
        X-Bonus: set panels in ReturnsIndex.  

    4:30.
    Done with meetings, InstaCart, and a little bit of time-wasting.  Gonna go to either 6:00 or the CSS being done, whichever comes first.

8 Mar 2023
    OK.  Goal today is to get the CSS right for Returns.  Once that's done I should switch to the real-job screen design for Exchanges.  
    -The issue I am running into is that styling for a particular TD seems to have no effect.  
        -I've noticed that the TD is the only actual container.  I am going to try filling the TD with a <div> and see what happens.  

BUG - cash refund finalization screen is displaying as store credit.  

11 Mar 2023,
    10:15:
    Not the start I could have had but considering the fuckarounding I've done since I woke up, this isn't bad.  

    -The main fight is won.  Returns works.  It actually works to the point where I'm kicking around the idea of starting on Exchanges.  But I should try and bag this up.  

    X-Very first, I should fix that bug where cash refunds are showing up as Store Credit.

    -Cart Items widget.  Will probably need later.

    -Refactor Item Entry 30
        -State instead of reducer?
        -Cleaner version 
        -On submit, focus on Item Entry field
        -validation
            -can this be universal?
            -maybe a custom hook?

    -have a state for ActivePanels in Session.  Will probably need this for manager override.  If not, figure out a clean approach to handle this.  

    -We are going to need a version of ItemDetails30 that works like the production design.  Hopefully easier to make?

    X -I need to write the function that generates names in the Tenderizer.

    -Figure out how to handle MO in 30 panel, universalizable if possible.  

    12:05.
    Honestly, not doing my best.  I really need to catch a wave here.  I think I need to come up with a plan for how to handle the active panels.  It's actually not even a plan.  I'm pretty sure I know what I need to do.  I just need to know at what level to put it.  

    First, a little context to make myself sure I understand what I'm doing.  

        RETURNS SESSION:
        +Aren't we pretty confident this will work?  There's basically no logic at all.  I can add fancies in there if I want but it's basically just going to be an object with a 30 panel and a 70 panel.  

    1:00.
    OK, I'm spinning in circles here.  Let's grind down and see what the issue is.

    I like the idea of having a top-level place to store Active Panels.  That seems to make sense.  I actually don't have clear definition, but it's something like:
        -1 URL per cluster.  Clusters are pages that can appear together.  So the Scanning Screen, item details, Actions30, etc can all appear together in different combinations, so they are all conditionally rendered within the Index URL.  
        -Something like the Review screens are never going to appear with those Index parts, so the Review screens get their own URL.
        -It might also have something to do with data?
        -It might also have something to do with Step In The Process, although that might be more of an emergent property.

    AFAICT I really only have 2 big multi-display clusters - those being Index at the start and then Finalize_Refund at the end.  Storing the ActivePanels in some State seems like a pretty good option for Index, and it does not seem like a very good option for Finalize_Refund.  Part of the reason I am getting hung up is that it feels strange to handle the same problem in different ways.  So it seems like one of my two intuitions is incorrect.  Either:
        -They are different in a way I don't quite grok and my intuition to use the same approach is incorrect.
        -My intuition that they are different is incorrect.

    -I think I should start with FinalizeRefund because that is the most recent.  The most salient property of that (to me) is that the component chooses what 70 panel to display based on a combination of TenderType and TenderStatus, with interactions and possibilities defined by business logic.  
        -Generally doesn't have a lot of user interaction.  
        -Most of the decisions are being made programmatically, not by the user.
        -I feel like there are a lot more permutations.  

    -I feel like with ReturnsIndex, it's mostly based on responses to user action.  There's not a lot in the way of logic.  
        -Feels less dependent on stored values, more dependent on things like "Was the most recent add an invoice or an item?"

    -One other thought that popped into my mind:  Why is the modal displaying in the top-level component?  I mean, there's nothing wrong with it being there that I can tell, but since that modal is only in response to an item entry, couldn't it live in ReturnsIndex component?

    4:15
    This happens waaaay too much.  I find myself having accomplished nothing and unable to get traction.  I can still make something out of today.  I'm gonna do a straight 20, then try to go a full 90.  If I can do that then I can have a swalk.  

    I also want to be aware of the fact that the thing really itching at me hasn't been anything with the 30-70 display clusters.  It's been my frustration with useEffect and not knowing how it works.  I still don't really get the use-case or why I would want to deal with all of the restrictions.  
        -My best guess right now is that my regular functions have to remain outside the Hooks process.  I can't read in (like useContext) or set external state.  I think(?) that custom hooks let me break that rule.  

    A thought I had in the shower.  I believe a function can return a function?  So I am wondering if I can call a custom hook by another, non-hook name and then call it wherever the hell I want?  
        -This is not progress but for science I'm gonna try anyways.  
        -OK, so calling the function directly via a different name did not work.  
        -How about a function that returns a function?  
            That did work.  Returning a closure rather than calling the function itself let me call it within the loop.
        -How about variables?
            -Looks like I can pass in user-defined variables, both to the parent and to the child.  
        -Final test - can I dispatch?
            YES.  OK.  This is the part I was most worried about, and it looks like I can do it.  
        -Final final test - can I import context and use that too?  
            Looks like it!  Now, one caveat - for the use case that started me on the useContext path, being able to call the Matchmaker without having  to pass all the context as variables, I'm not 100% sure I could grab all that from context, just because I don't think that in Returns itself it has the Context as a parent, but that barely matters.  I have to call the function one time to provide the closure.  If I have to pass the context one time as a variable I'm not too upset.  
    6:10.
        OK.  Against all odds I pulled something really valuable out of today.  I THINK (?) I can finally use custom hooks the way I wanted, which is to break all the Rules of Hooks, get context without arguments, and set states all willy-nilly.  I'm not going to work any more today.  I am going to swalk and think about what this means.  I've designed so much of this app around the constraints on normal functions that I don't even know what's possible right now.  Damn.  I guess I didn't realize it, but that one article saying 'Hooks suck' really delivered on Cunningham's Law.  OK.  Go take a swalk and think about what you've done.  

12 Mar 2023
    1:05
    Considering the time change and my workout, I've actually been pretty good about avoiding time-wasters all day.

    I need to make two decisions.  Where to store the modal, and where to store the on-screen information.  And even if it takes the full 20, I should stay on this task until I've got a conclusion because the next two things I want to do - the in-production dispositions and the auto-request manager override - are both going to shake out differently based on what I choose.  I also need to keep in mind that AFAICT the choices aren't relevant for this app.  This is more about understanding patterns for building something else.  

    First.  I'm no longer worried about the inconsistency of hand-setting active panels in Index vs. auto-setting active panels in FinalizeRefund.  I'm going to do what's easiest for each task.  If I do have a global hand-setting capability that doesn't mean I have to use it for everything.  I only need it if it makes the work easier, and I don't know an easier way to handle the panels in Finalize_Refund.
        -Although... Looking at Finalize_Refund, I guess it could get a little simpler if I was actively specifying the 30-panels?  I should probably stop thinking about this because this is the kind of thing that causes me to spend 3 days re-working the system to eliminate 10 lines of code and the final result works exactly the same.  
            -Although... if I did it, I think the paths70{} object in Finalize Refunds would move into SnP.  OK.  Stop this.  

    OK.  First, the modal.  Do I even have a strong preference where it lives?  I feel like - not really?  I guess it makes a little more sense to have the modals live within their clusters?  I can imagine scenarios where a modal:
        1. Navigates to a different URL cluster
        2. Changes the Session state
        3. Changes the panels in the cluster
        4. Potentially all three at once
        5. The same modal, but triggered from different URLs (e.g. unsaved data?)
    -1 and 2, it definitely makes no difference.  These are both Returns-level functions that are accessible anywhere.  In fact, they're available through OutletContext, so they are available LITERALLY anywhere in Returns with no prop drilling. 
    -3 also doesn't matter.  That might be a little easier if it's done within the URL cluster because if I'm using local state, like I am for GSOS, I can access and modify it directly.
    -What about 4?  IF I am navigating to a different URL and the panels to display at that URL depend on my actions in the modal?  IF activePanels is stored in Returns, there's no problem.  If it's not, there potentially is a problem.

    -The only other potential situation is if I have the same modal being triggered from different URLs.  Then it's definitely better to have it in the Session state.  But how likely is that?  

    -I think where this leaves me is that I'm gonna leave it in the Session state for now.  This also requires no re-work.

    Active Panels.
    -This one I'm feeling more confident should live in Session.  Like, if I want to navigate to a different URL and I need to specify "X and Y on the screen" I don't really have a clean way of doing that.  Now.  That said.  I still feel like I don't have a great answer for a situation like Finalize Refund, where:
        1. I want to run some process on a series of targets
        2. For some reason (like 'I need some user input') I can't just auto-process the whole list.
        3. I want the first element processed on render.  
        ~ Basically, I want what I would get from useEffect without triggering a re-render.  
    I'm sure there's a way to do this.  I'm pretty sure it's doable with tools I already know.  I just haven't put the pieces together.  This is another thing where I probably shouldn't think about it right now because I want a swalk and watch bands.  But I also feel like if I could figure this out, there would be far less of a need to store the activePanels in the Returns state.

    2:45.
    So let's focus here.  It's been nearly 2 hours and I still haven't written any new code today.  I haven't wasted time, but I do need to get moving.  
    
    First, I'm going to need an initial state and a dispatcher function.  Actually, I'm kicking around the idea of having this as a custom hook so that I have a SSoT for arguments to expect.  I'm now wondering how to make this universalizable. 
        I'm thinking something like:
            return {
                p1: null
                p1Details: null
                p2: null
                p2Details: null
                p3: null
                p3Details: null
            }
        and then in the output:

        output: {  // object of all possible components
            abc: <Comp1 actIndex={state.panelDetails.abc.index}/>,
            def: <Comp2/>
        }

        <section className={classes.container}>
            {output[p1]}
            {output[p2]}
            {output[p3]}
        </section>

    I would handle all sizing within the components themselves.  So I wouldn't have a 30 container and a 70 container.  I would just assign each component a class, like thirty_panel.  

    Now.  How do I get panel-specific information into the components, when I don't know their position in advance? Maybe something like: 

            return {
                p1: 'abc'
                p2: 'def'
                p3: null
                panelDetails:{
                    abc{
                        index: 1,
                    }
                }
            }

    I think that will work.  Why do I not feel good about this?  (is it because we're oversolving a non-major-problem?)  OK.  Well, if I don't have a more specific objection then Rule 4 kind of implies I should get moving on this.  

    Looking at this, I'm also feeling like there's no special reason for it to be a state?  I guess it would be kind of handy to not have to explicitly request the existing state (because I can get it through useOutletContext) and I suppose I could auto-dispatch, which is nice?  
        -But then I have to set the initial state by hand, which I suppose is not the end of the world?
            -And for God's sake, why can't that just be done in the child?  I'll be changing the parent state every other damn time I make a change.  Why can't I do it automatically on initialization?

    OK.  Let's just do it as a function.  Or is that even necessary?  This is exactly the kind of shit that caught me up yesterday.  I have no experience so I have no idea what is good and bad when making decisions.  I just really need a mentor :(  

    5:15.
    One interesting little tidbit.  Just on a whim, I fired the new useSetLocalPanels from the inital state-setting function in ReturnsIndex.  It didn't work, in the sense that AFAICT the session state didn't change and it also prevented the inital local state from resolving... but it didn't cause an error, either.  I'm going to run it through the debugger and see what I can find. 

    -Eh. NVM.  Turns out I wasn't running the function at all because it was the second argument, not the third.  I tried to run in in the 3rd position and it crapped the bed like I expected.  


25 Mar 2023
    10:06.
    

    OK, next 420.
    -It looks like when I left off, I was looking to be able to store the Active Panels in the Session state.  That is fine.  I like it, and it is a pattern I will use in future work.  But what is the most valuable thing to do today?  
        -I need Returns up and running this weekend because Anthony and Reshma are going to test it.  
            -For my own sake it's probably nice to put a bow on this for now and move on.  
        -I REALLY WANT to get started on Exchanges.  The thought of getting to play 'New Game +' with everything I learned is really exciting.  
            -This might be a waste, especially since the project hasn't started and Tejas is going to make a storybook for the  components.
    OK.  I'm going to TRY to get it all done in 90 minutes (har, har, har)
        I THINK the only place I really need to do this is in the Index.  I think that with this I should be good.  

    Nvm.  Change of plan.  It's working fine.  Prior to starting on Exchanges cleaning this up was a good use of my time.  However, now that I have a (potoentially) higher priority to be working on, I think that's more important.  The closer I can come to keeping pace with the development, the more useful the too will be.  

    12:10.
    OK, so now what?  


    2:05.
    Struggling to get the page to display on Github Pages.  Right now it's just a blank, empty HTML page.  The crazy thing is that all of my files are in there.  In:
        
    Chrome > Sources > Page > top > thomasmitchellzero.github.io > static > js

    I can see all of my files.  I also think I see a part of the problem - in my oldest hosted project, delivery_sidesheet, if I navigate in Chrome:
        -Sources
            -Page
                -top
                    
    then in there is a file next to a cloud icon called 'delivery_sidesheet', while in the new mrv file that is still called returns.
        -OK, that is not the case.  

    -Another clue.  In my main App file, I added in a small <p>test</p> element.  That showed up.  So AFAICT gh-pages is rendering the correct component, but for some reason it's not interacting with my React Router components.  I re-installed them and in the Source Control they both showed up as changed, so...

    -Turns out I installed the wrong thing.  

    -OK, another clue.  Just out of curiosity, I tried running it locally.
    For route:
        http://localhost:3000/mrv
    I saw the exact same thing I saw on Github pages - an empty page except for my new <p> tag, along with an error message saying: `No routes matched location "/mrv" `

    So I tried taking out the mrv/ segment, and then everything worked fine, (plus my test <p> tag)  

    This is pretty strong evidence in support of the hypothesis that it's something to do with my route.  

    3:15.
    OK. This is turning into a shitshow.  

    3:25.
    I'm glad I didn't give up, although I really need to find a good rule for when giving up is the right move.  I actually think it's solved now?  I changed the base route path from / to mrv.  I also changed all the main routes from absolute to relative (I think?) and it now seems to be working, both locally and on the web.  I'm actually wondering why the hell it worked before.  Jesus, that was a mess.  OK.  I'm gonna swalk and then get back after it.

    3:50.
    OK.  Let's FINALLY get started on the real deal for today.  I need:
        -Investigate ImmerReducer.  20 mins tops, with option to go longer if productive.  
            -OK.  I don't quite understand it, but that's probably because I haven't used it.  This looks pretty cool, it's officially recommended, and I want to learn something new. 
            -The inherent immutability means I should be able to use this with Maps, and I think I can?  My biggest fear is not having access to .? and ?? but I think they might still work? 
        X -A folder for Exchanges
        -A plan for how to handle styles.  
        X -A folder to hold my MRV styles.  
        X -A new route for Orders.  I don't know where it's actually supposed to live, but for now I'm sticking with this.
        -A placeholder + subroute for the Exchanges start.  Right now I'm gonna just have a default order.  Selection isn't super important at this point.
        -A subroute for Exchange Selection.
        -A component for Exchange Selection.
        -An Exchanges main component with an Outlet.
            -State and state-setter.

    5:00
    Honestly, atm I'm not feeling super into it.  I think the best solution is going to be to get some shit on paper.

    Since I'm going to need different CSS for the MRV components, I need an easy way to make that happen.  I THINK if I import all of my MRV CSS files into the top level of Exchanges, any duplicate names will be overwritten, since their assignment is happening closer in the hierarchy.  But if for some reason I do work on another Post-Purchase product it would be pretty nice to have an easy way to share them all.

    https://www.geeksforgeeks.org/how-to-include-one-css-file-in-another/

    Derp.  That answer should have been obvious.  Apparently you can import multiple CSS files together, so all I need to do is have one CSS file to rule them all.  I'll import all other MRV styles into that one, and then for any new file, I just import the one main MRV CSS file.  Ok, that's pretty neat and I don't know how I didn't find this before.  This is going to be VERY handy for shared colors and such.

    OK, so it looks like I have a solve for my immediate problem of 'only having to import one component for MRV styles' but not so for another.

    Buuuut... it looks like I can do that with variables.

    6:05
    A whole day and very little to show for it, but I think I did learn some valuable stuff at the end.  Maybe I'll do this again tomorrow.

    Part of the reason I am super excited is that I know so much more now that I just want to get in and build the new app with everything I've learned.  I think that to earn one final swalk I'm going to take a few minutes and list out everything I want to do different.  Actually, there are two categories:  

    
    Things I Have Learned And Will Do Again
        -Full Flexbox worked pretty well
        -WHENEVER possible, re-derive the output rather than maintaining it.
        -Using Objects for conditionals worked pretty darn well.
        - ?? and .?
        -Use custom hooks to re-use logic.
        -have my useReducer cases tailored to use cases, not outputs.
        -Don't use a component when a CSS class will do.
        -useRef to auto-focus input fields.
        -New URL if no shared UI elements, conditional rendering otherwise.
        -For mapping UI elements, 

    Things I Want To Use
        -Use Immer instead of CloneDeep/reducer.  I think this will be cleaner.
        -Get better with custom hooks
        -Learn how to use Flex Grid.  Probably a lot less fiddle-fucking with the code, and can avoid annoying things like my primary footer buttons being different sizes -_-
        -Tighter, lighter, cleaner, more re-usable CSS.  CSS Variables are gonna be dope.
        -Look into using Maps with Immer.  For things like Matchmaker and sortNprocess, that would have probably been a lot cleaner.  
        -Would Redux be good?  What about slices?  

26 Mar 2023
    11:25.
    I did not hit my bench press numbers today and so I'm hoping to redeem myself in the editor :)

    I am proud that I made the choice not to get very far into time-wasters before diving into this.  So we're already off to a good start!  I'm going to start with:
        X-An empty component for Exchanges
        X-A link to that empty component
        X-Figure out how to use CSS Grid in that empty component.
        -I'm obviously hoping for more but if I can leave today with a good handle on CSS Grid I will call that a win.

    12:50.
    OK.  I am spinning a little bit because I need to make a decision about CSS.  I am wondering if I should use styled-components.  It looks like a pretty popular framework.  

    OK.  Took a quick swalk and I have decided I am not going to use it.  First, there's still a lot of this stack that is new to me and I am still going to be learning a lot of new things and to avoid compounding frustration I think it's important not to go too hard on things I don't understand.

    Second, I still feel like I haven't mastered basic CSS.  I think I can get pretty far with variables and inherited classes and I'd like a better grasp of the underlying tech for CSS before I start going up layers in abstraction.

    OK.  I feel good about this.  Let's get after the grids.  
    -First. I THINK I can adjust the relative sizes of the parts without too much pain.  It's only if I start adding columns that everything's gonna go to shit.

    -Potential problem.  As a test, I added a style to a <section> tag in the MRV CSS file.  Now, AFAICT that file is only used in Order right now, but the style was applied to <section> components in Returns as well.  

    That's obviously not what I want.  After some checking, it also does not look like there's currently support for either nesting or scoping.  

    So.  The solution is ugly but I do think it is a solution.  I'm going to add mrv into the name of every new class and style I create, and for element selectors like <div> or <p> I need to make sure that I prefix them like mrv div so that they only apply to elements with mrv as a parent.  

    2:40
    I think I've got the grid up and running.  

    3:15
    I've spent some time looking over the ImmerReducer docs.  If I am understanding correctly: 
        -AFAICT, this replaces the CloneDeep process.  
        -From the documentation, I THINK that if I wanted to do some complex state-changing operations, I can have nested produce() functions. 

    I am now wondering if I should even use useReducer at all?  As opposed to useState.  Obviously I'm going to have an app-wide state.  From what I understand, the best case for useReducer is if you're making the same kind of state change from different parts of the application.  It was a decent fit for the Session state in Returns because there were multiple points in the process where, for instance, I might be adding an invoice (add invoice, any of the lookups, a manager override for NRR, etc.) 

    If I find myself needing to do the same operation, I can just write a custom hook and use it in multiple places.  In practice that's kind of where I found myself ending up in Returns.  There were things like the Matchmaker that were used in multiple Reducer cases.  Even if something is only used in a single case, I often put it off in a custom function just to keep certain files from getting huge.  

    I think the safest bet is to use the Reducer.  Worst case scenario, I just add a "CUSTOM" case at the end that lets me do whatever I want... right?

    Except the problem is I don't see how I get access to the draft state here, so this isn't really the wild card I was hoping for.

    OK.  Here's a question.  Can I use produce() on a state created by useReducer?  If I can, that might be the wild card I seek.  

    But where I feel like I'm ending up is that I'm not seeing a lot of advantages to useReducer here.  Access to other values doesn't seem to be a problem, since I can get them in the draft, or via Original if I need them for comparison.  

    OK.  Let me try and make the best case I can for the immerReducer.  Anything we need to do is going to require a function.  That logic has got to live somewhere.  Right now, a lot of that logic has been living in local components.  Why not have it live in one, central place so we know where to find it?

1 Apr 2023
    10:40.
    First - I really, really want to make sure I don't have a day like last time.  I really want to be driving forward.  I've got a hard decision to make and I'm very distracted by Kira, so I am going to give myself some grace for needing some time to get into the groove.

    -Second, we need to figure out how to hande different layouts on a layout grid.  This is the part I am most interested in, but I want to eat the frog.

    -First, we need to come to a decision about the main Exchanges data structure.  I feel stuck because what I have read suggests that reducers are the best choice for complicated, many-part data states.  I don't see that at all.  I think a simple state with ImmerReducer looks much easier, and that makes me afraid that I am missing something.  In the Returns app, I would actually rather re-create MatchMaker from scratch than have to implement a new structure for the Session data because Session is used literally everywhere. 
    
    What seems better about using State and an object?

        -Returns had some very heavy logic.  I don't want my Reducer function to be 500 lines long, which it probably would be if I did all the logic there.
            -It would also involve passing a lot of variables back and forth.
            -I could break the code into smaller custom hooks, but I'm not sure how I access the draft object.  
            -And if I'm going to be doing most of the logic outside the main reducer, either in custom hooks or within local components, what exactly is the point of the reducer in the first place?  

    12:20
    Thanks to some post-nut clarity, I've chosen a direction.  I can't see a reason not to use the reducer.  I really can't.  If this bites me in the ass later, so be it.

    What I will need: 
        X -A placeholder page that starts the process, probably with a button.
        X -A placeholder for the Item Selection
        X -Routes to my new pages.
        -Figure out how to get Fellix in.
        -Figure out more about CSS Grid.  Specific use case I have in mind is how to have items occupy all or part of the screen during conditional rendering.
        -A placeholder for the different panels.
        -A decision on the number of panels to have.
        -Can I standardize/centralize my panel sizes? Would be really nice if I ever do have to re-form this crap.

    2:40.
    OK.  AFAICT there isn't an easy way to do what I'm trying to do (Fill all columns until you it another element)  Options I can think of are:
        *Use the grid with a width of 1 to control vertical spacing WITHIN columns, but use flex boxes to control the width of the columns themselves.
            -but how to have common widths for button containers?

        *Have the grid, but have different classes for the different page options.  I think there would be 4?
            Main Only;
            Main + Right;
            Left + Main;
            Left + Main + right;
            -This seems like a lot of work and hand maintenence.

        *Can a column have a width of zero?
            -OK.  It can.  Does that change anything?
            -Kind of?  It means I wouldn't have to re-position elements, although I would still have to style them.

        *Since I know that the panels will be one of three names, could I write a function that responds to the presence of a panel and gives space accordingly?  
            -I initially thought this was stupid, but now I am wondering.  

    6:00.
    I haven't gotten terribly far because I've had some worthwhile distractions today, but at this moment I'm actually feeling pretty good.  I'm just going to go until I'm not having fun anymore.


8 Apr 2023
    11:15.
    Man.  I got a good jump on the day and I was so excited to get started.  I just need to try and harness that momentum into a productive direction.  OK.  Today SHOULD be a fun one.  We SHOULD be seeing cool shit happen on-screen.

    Un-fun stuff:
    X-Change the GSOS invoice number to whatever Anthony wanted.
    X-Test and make sure GSOS is working.
    -ImmerReducer:
        -Verify that I can't use .produce to modify the state.  Guessing probably not.
        -See if I can ACCESS (but not modify) the state.  If so, I could still use the reduCer.
        -Based on these outcomes, make a decision.
    -20 start.  Let's try and blaze

    1:40.
    Damn.  It got late.  Ok.  Where am I?
    -I set out to find if it was possible to access the draft object of an ImmerReducer state.  If there is a way to do it, I haven't found it.  Given that I'm not sure it's better than just using a state even if I DID find a way, I think I need to just stop and go ahead using state.

    Over the past week, I figured I actually do want to do the grid for everything.  I've realized that since the left and right panels will always be in the same location, it's not actually a heavy lift to calculate a class that defines what columns the main panel should occupy.  So here's what I need to do.

    -Figure out the column configuration I want that's OK at both big and small sizes.
    -Create 4 CSS classes describing all possible horizontal columns of the main panel, and 1 class each for the Left and Right panels.
    -Create an MRV Functions folder since panel-handling will be universal.
    -Create a custom hook that sets the ActivePanels state, and also returns a CSS class for the main panel based on what states are added.  
    
    -OK.  So.  Got a bit of a snag.  Chrome (and many other browsers) do not support sub-grid.  AFAICT that means that at this time there is no way for a child to inherit the grid of its parent.  So that means that my plan for ensuring all button containers are the same size is out the window.  

    OK.  I mean.  I guess it's not TOTALLY out the window?  I'm going to have 4 CSS classes for the Main page to reflect how many columns it grabs in the potential configurations.  I THINK if I make it a grid, and then for each class.

    OK.  Am I back to being fucked?  Because if I don't know in advance how many columns what the last column of the main panel is, how am I supposed to tell a button which columns to be in?  

        -First.  Let's be very clear.  What a smarter and less-neurotic person would do is say: "The button widths change?  Who gives a fuck?" It's a MINOR visual annoyance that we are going way the hell out of our way to deal with.  

        -OK.  If I HAD to do it.  What I could do is have a *shared* set of column names for all 4 classes.  In the CSS for the button container, I define the button as "You live between Line 3 and Line 4" but where I place the Line 3 and Line 4 markers varies depending on the class.

        -Could I just have the main CSS use the SAME column proportions as the whole document?  No, I don't think that will work because of the fixed values.  

        -I could just use simple fractions but that kind of sucks when the side panels get shrunk.

    5:55.  OK, so... it seems to be working?  I have bottom containers that change as the screen resizes, but maintain size as their parent's occupied columns change.  

        -Was it worth it?  Tough to say.  This was a pain in the dick to set up but IN THEORY but it shouldn't be too hard to work with going forward.  Assuming my "Set Active Panels" custom hook correctly sets the class of the Main container based on the presence/absence of left and right panels, the rest of this SHOULD happen under the hood?  But I think I'll have to set initial sizes by hand each time the URL changes :/

        And I'm wondering if it was worth it.
        Because if I could have some flex-box class for the side panels that would ensure the button of the right panel entered the screen at the same size as the button in the main panel it's pushing over I would probably just do that and live with the Main button existing at a smaller size.  

        And also, the number of situations where there are two buttons on screen should be VERY small.

        And even though I succeeded, honestly I'm kind feeling like it wasn't worth it.

        OK, so let's think here about the worst-case scenario.  Suppose I'm on mrv/this and navigating to mrv/that.  Assuming I'm controlling Active Panel in the EXCH sesson state (which I def. expect to be doing) what changes?

        As I leave mrv/this, I need to specify the default active panels for mrv/that, and this is true whether screen proportion is happening via flexbox or columns.  I will have to write a function that determines the class of Main Panel based on what inputs were passed, but if that function lives in the ActivePanel-setting hook, that all happens with no input needed from me.  

        And so if that's the case I think it is worth it.  Perhaps this wasn't the best use of my time but now that it's done, this actually is the behavior I want.

        And so my last thought of the day is that there is a LOT of repetition in these patterns.  I wonder if I could:
            -use the same line-marker names for both the parent grid and the main grid.
            -Chunk the common elements. EVERY iteration starts with 
                [L1] --Pcol [L2] and ends with:
                [L3] --Pcol [L4]
            -So on both the parent container and the Main section, the only variation is the 4 possible configurations of the middle.

        OK.  Tomorrow I will need to do some thinking about how to represent all this in a universal way, because the Main panel shrinks if more things are on the screen.  I could probably just make a different-named clone to represent the parent grid.  OK.  I need to stop now because I do need groceries and also I've got something exciting to dig into tomorrow.

9 Apr 2023
    12:15.
    It's a workout day, so I can live with a 12:15 start.  Going to start with:

    Figure out a plan for how to have a dictionary of shared terms.  This was formerly a checkbox, but it's kind of hard so I think I'm going to just clear it first.

        -This is probably going to be an EXCH thing rather than an MRV thing, since I expect that MOST term-specific logic is going to be at the Process level rather than the Application level.

        -The best model I have for this is what I was doing with the Status and TenderType names for the refuning of returns.  I was using those keys in logic all over the place, and it really did help to be able to have an easy way to standardize them.

        -Since there are cases where multiple related values might cluster together, I should account for that.  IMO I goofed on Tenders and Status by not grouping the keys and the description strings together.  

        -I think I want to have just one file with multiple exports for this.  Maybe call it a Bestiary?  If it turns out I need to break it apart I can, but similar to the CSS, I want to have one single source where I'm drawing common values from.  

        OK, so I think that's all I need to roll out?  

        One last thing.  It might be a good idea to use nav keys + ActivePanel for ALL screens, even ones where I don't expect to use side panels, because it will be easier to retrofit if I do end up adding 30 panels to things.

    1:15.
    
    OK, so Glossary is up and running although I haven't tested it. Now, onto my checklist.

        X-Fully standardize the columns in the mrvContainerSize CSS file.
        -Figure out whether the Active Panel setter should live in EXCH or MRV.
        -Write that function.

    Got another decision to make about the Pizza Tracker and where to put it.  AFAICT it's only ever going to live in the main panel.  I honestly think the way to handle it is just make it a component and hand-place it in every Main panel.  Feels a little awkward but it's very flexible and I don't really know what else is better.

    3:20.
    I'm kind of fucking around with the CSS, although I still genuinely think this will streamline the work.

    -I do hope I don't encounter any problems with this grid system because so much of the CSS is depending on the grid that I am going to be QUITE fucked if I can't make it work.  Like potentially "All My Work Is Useless" fucked.

    -But I'm not having a bad time.  Stuff is appearing on screen and it feels satisfying.

    4:10.
    OK.  Grid is up and running to my satisfaction and at long last I think I'm ready to get started.  
    -The pizza tracker is probably going to be more fun, but I think I should start on the title bar.  
    -That's going to require me to get the text working, but I kind of need to do that anyways.

    5:05
    Fellix is in the app, it appears to be displaying correctly, it responds to my size requests, and I think that this is a very good stopping point for now.  Swalk time!

13 Apr  
    2:55.
    Going to try to get the header all good and ready to go.
        X-Page Title, Order Num all as inputs?
        X-I actually don't think most of this is re-usable in a different app, so I should move it into Orders components before I get much further.
        -App Title and Cancel Btn can be hard-coded AFAICT.
        X-Verify that a function passed into the button is working.
        -Add mouse-over behavior to the button.
    
    Now wondering how much of this is actually universal and re-usable.  I think the horizontal rows and their behavior is correct.  Not so sure on the vertical rows.  In fact, I am pretty sure they are NOT universal.  Like, I'm probably not going to use the pizza tracker on  a different MRV app.  Not sure I will need this but it's not too hard to do now and if I end up doing a different MRV product later, I'm gonna be sad I didn't.
    
    Then the next step is going to be to start on the Button CSS.  This will be app-wide for MRV so I need to account for that.

    4:45.
    Got interrupted by a 30 minute social hour meeting that was maybe the most retarded waste of my time I've had all week -_-.  

    However, I think I have the correct conceptual model now.  For containers and the Main panel, the columns will come from the MRV container CSS.  For the rows WITHIN the column, which will be for all panels but never for the top container, I will use the exchContainer CSS.  That lives at the Product level because there's no reason to expect it would be the same between apps.  Also, if I can jam till ~6:15 I will earn a swalk.  

    So the pattern I should keep in mind for each URL Page component is:

        <section> for the page gets the mrv-primary-columns class

            <panel> gets its MRV panel class, and then the Columns class from its product, so:    " mrv-panel__main exch-rows "

                <div> sections within the panel, using the grid, get their horizontal position from class names within the product ContainerSize css.

    6:25.
    I actually went over my specified time.  Still feeling good, and like I could go longer.  Even after a partial day of work, I still made so much more progress today than I did the last two Saturdays.  It's amazing how much faster things go when 
        a. I know what I'm doing.
        b. I have an idea of a 'Good' approach to the task.
    I have to remind myself that everything was once this hard, and that each new thing I learn increases the reach of "I know what I'm doing" 

    So far into this project, the biggest improvements have all been in advanced CSS features.  Using Variables, especially compound variables, made the Grid SO much easier.  

    My super-short description of the Grid is: The total number of columns in the container is always equal to the SUM of the number of columns in whatever combination of L-M-R panels is present.  Since L and R are always 1 column, 

14 Apr

    4:55.
    Set a timer for 90 minutes and if I can jam for 90 minutes I get a swalk and food truck if it's there.

    OK, when I left off I was working on the buttons.  IIRC I wasn't having any special difficulty with the buttons, but my nav button in the menu was misbehaving.

    So I think the right move should be to put in the Cancel Exchange button, make sure all my button styling is applying there as expected, and then see if I can get the Nav button working.  

    -I'm also thinking maybe this header needs to move into Exchanges?  Or maybe the header can be universal, but the Order # and Cancel Exchange are definitely exchange-specific.  
        -The other thing I will frequently need to deal with is the fact that ~50% of the time, the Order will not have the Order # / Cancel cluster.
        -OK.  So I think the right move is:
            X-Move it into Exchanges.  (Already did't.  Thanks, Past Me!)
            X-Style the Nav button.  Figure out why the icon is the wrong size.
            X-Have some prop, default false, that controls the presence of the cluster.
            X-And I think I'm just gonna do it in the component.  I'm not re-using this thing so it doesn't need to live on its own.  


    Ok, gonna call it a night.  My starting point tomorrow will be boring, 

15 Apr
    9:25.
    Look at you, all early and shit!  I'm here because I have made a conscious effort to move quick on house chores and turn away from time-wasters.  I felt really good working yesterday.  I'm hoping to cath that waqge early and get moving.  I knew yesterday that the start wasn't going to be the most fun, but other than some decisions, I don't think there's anything TOO terribly difficult?  So, the list, ported over from what wasn't finished yesterday.  I need:

        X-An order to use as the template for Exchanges.
        X-A default state for Exchanges.
        X - Auto-populate the cluster.  No need to be passing props because those will never change.  
            X -Should be simple - a very easy function that changes the State back to default.  But I'm unfamiliar with Immer and so I fear this.
        X - I should add an activeOrder property into the state and read from there.  
        X-A data structure in State (probably a Map) that will contain all the info I need about the Cart items.          

        -A function that loops through the Items in an order and populates that data structure.

    12:10.
    OK.  Decision time.  Gotta decide how hard I want to go on this.  Let's start by listing the functions I DEFINITELY need, and then the optional ones.

    Definitely:
        -Add the contents of an Invoice to the active state.

    Optional:
        -Search the store for a given invoice number.

    OK.  For the time being, I'm just going to write a function that accepts an invoice# and adds the appropriate parts to the state.  I can handle the display and search later, but that already exists and is a super low priority.  I'm going to handle this in StartExchange b/c AFAICT there's nowhere else in this process an order could be added from.

    1:30.
    Groceries delivered and stowed, good start, good momentum, and plenty of time to run up the score.  Focus is good, at this point I need to emphasize velocity.  

    I'm trying to decide whether to make a map of the Invoice Items here or not.  I suppose it's technically duplicate data, but I've got to loop through it all anyways.  Might as well get it here, right?  

    ...or not?  I can't see any reason not to do it in the next phase, either.  It's not being consumed here, and my pattern is to process right before consumption unless I have a reason to do it somewhere else.

    OK.  And I think I'm done with the start of the process?  I think I'm finally ready to work on picking items.

    Two things I am definitely going to need: an effect that sets the active panels, and the pizza tracker.  The pizza tracker is probably more fun.  Since I'm feeling pretty good, I think that means I should do the activePanelSetter.  Where possible I should put off the fun stuff until I can't proceed without it because if I'm spinning wheels, that helps me get into it.  

    OK.  Let's do this.  Remember that one of our goals in this second app was to become more familiar with custom hooks, so this is probably a good one.  

    2:45.
    Well, that went alarming smoothly.  Active Panel setter appears to be up and running.  Next, got to add the correct page to the glossary and use it in the Nav.

    3:05:
    OK, that's all squared away.  Next is the itemEntry page.  I need:
        -The header, because we are using the header now.
        -The Pizza Tracker.  This will be kind of hard, but hopefully fun, too.

    3:35.  I'm still thrashing here but I kind of feel like a swalk.

    OK.  Pizza tracker.  Let's think here.  I'm going to need to populate from a session state, since the Tracker lives within pages.  So I'm thinking:

    pizzaTracker:{
        activeItem: index,
        nodes: [{first}, {second}]
    }
    An array is fine because I can use the index as the keys, and I'll have to loop through it many times.  

    In the object for each node, I'll track all the relevant details.  The nodes themselves will be dumb.  They don't even need a local state.  All the parts will live at the MRV level, since this should be reusable.  
        -
        -Node component
            -Track all three states
            -I should make the nodes as buttons because at some point they will need to be clickable.
        -Spacer component that can either have fixed value or a flex value.
        -Probably a single CSS file for this whole shebang.
        -A top-level tracker component that renders from any number of nodes.  
        -I might make an Exchanges Pizza Tracker component so I can feed in all the configurations once and not have to dick around with it anymore.  TBD.  Until I add button clicks, I think it's fine without this.  

        -I think I might actually want the local component.  If I don't actually need this, who gives a fuck, it's one extra component layer.  If I am right, I might need to do a bunch of replacing and re-mapping.  And I suspect I will need this at some point.  

        OK, got that up and running.  I THINK that all further work should be doable in the global component. 

    6:05.
    Damn.  It got kind of late.

    6:40.
    OK.  I'm gonna knock off for today.  The hardest part of the pizza tracker, accepting (n) possible nodes and populating accordingly, interspersed with spacers of different sizes, has been accomplished.  It looks like ass but all that's left is styling and it should all clean up pretty quick.

16 Apr 2023
    2:30.
    I know I left for the workout at ~12:30 and I did some time-wasting so this is not my best start, but I will earn a swalk if I can jam till 6:30.  Let's go.

    4:40.
    OK.  I've been absolutely jamming so far.  Here is where I am stuck.  Apparently you can do some simple math in CSS.  

    Now.  I could absolutely blaze ahead.  I could finish the pizza tracker and the function that controls it.  But I feel like there's got to be a way I could simplify the column system.  And if everything is using the column system and I decide to fix it later, I might potentially have to re-do EVERYTHING.  

    Eh.  Who am I kidding?  I'm not going to let this drop. Let's see what I can do.  I think the VERY first thing I need to do is to have a way to test, and I think the best way to do that is right from the index screen.  
        
    OK.  So what if I go: --Pcol: max(16rem, 20vw)

    My column arrangement is:  
        var(--Pcol) 
        var(--Pcol) 
        1fr
        var(--Pcol)
        var(--Pcol);

    When I shrink sizes, my middle column starts getting eaten, just like I want.  However, when I get smaller than 1024 (4 * 16rem) my rightmost column is chopped too short, and that happens even if I scroll over.

    So I think where I was running into trouble was that the min width at the app level was 900px, but the sum of my columns was less than that.  When I changed the min-size in the app to be 64rem, it all started working as expected.  So I think my issue was that the vw was able to be smaller than the sum of all my minimum sizes, and that's why that column was getting chopped off.  

    OK.  It's all mostly working.  The main thing I'm fiddling with is if/how big to have the middle-middle column.  

    And what I'm wondering now is if I need the grid for ANYTHING outside the middle column.  Because if I can specify the width of the column, I think if I just have a class with that width, then its position in the layout is going to be determined by render order.  Because as long as the columns are all reading off of the same shared dimension, whether they belong to a grid or not, that should mitigate my dumb concern of buttons being the same size.

    OK.  I'm not technically at the end but I am getting hungry and I think the next conceptual step is way too much to dive into.  Gonna call it a night.  

17 Apr 2023
    4:35.
    I think I'm at a point in my work-work where I can knock off and do some work on this.  I also didn't take anything at all today, so if I can raw-dog a decent 90 minutes in this semi-retarded state I definitely earn a swalk.  

    OK.  So the plan last time was to use the grid ONLY for the main column.  I'm going to try that first.

    5:25.  OK.  So it is working.  There are now two things on my mind here.  The first is that I think I need to have a fixed size for the header space.  It's probably not a problem since every section should have a header, but we're counting on the grid to line it all up.  Also, since the rows are now determined at the Product level, I don't need to universalize any of this.  

    7:10.
    I have tried and failed to disengage like 4 times and failed.  I think it's good enough for now.  When a second column isn't present, the first takes up a larger percentage of the total.  

18 Apr

    5:10.
    Same Bat-time, same Bat-bribe.  Let's go.  
    OK.  Panels appear to be spacing correctly.  
    
    One thing I learned is that if I have X columns in the template but I see <X columns and no errors, usually it's because I'm doing some calculation wrong, I THINK it's causing the columns driven by it to evaluate to 0, and it's usually because I have the format wrong in the calculation (values need to be separated by commas)

    X - OK.  Next question.  Do I account for a ribbon?  I hope the answer is no, but perhaps it wouldn't hurt to add in some named spacers?  Let's just do it and be done.

    X - And it sounds like unless I am gonna use SCSS I should be keeping my CSS in a single file.

    X - I probably need a fixed height for the header.

    X - I'm going to get the Exch Index page working as it was before.  Then I will go to the next page and get the header sized.

    6:45.  
    Damn.  That was all really pretty easy.  I kept expecting to run into some kind of block but it was all really smooth.  OK.  There's nothing I can point to as 'This is bad and needs resolution before I can proceed'.  I think the next roadblock I am going to run into is the tables, and if I want to try doing them as a grid.  I don't have to do the whole thing as a grid, I suppose.  I could just use a grid to control the horizontal sizing of each row.  I mean, the SMART thing to do would be just use a table since the only conceivable objection I could have is "finer control over the sizing".  

    Gotta keep in mind that the ideal for this and all projects is today, not yesterday.  The goal is not to program.  The goal is to get this thing out as fast as I can.  I should look for ways to speed progress, not dragons to slay.  

420, 2023
    I actually worked yesterday too, but didn't record it.  I want to work for at least 90 minutes and then after that I'll just go as long as I feel like.  

    For Item Selection, I will need:
    - A template for a table row
    - An Item Details template that I will reuse damn near everywhere.  
    - A way to get and store the item details in state, since I will be using it damn near everywhere.
    - CSS handling for <tr> (basics only?  Maybe an MRV component?)
    - CSS handling for <th>
    - Input, probably going to have to be a component.  And also a decision on how hard I want to go on this for things like the Text.  

    For now I'm gonna start with getting item details into the state.  Then at least the bare bones of the table.  And whatever I do with getting the items into the state, I need to remember that the order# won't always be fixed.  

    7:10.
    OK, I feel like I am at a decent stopping point.  Item details are added to state, I've got a basic ProductInfo component, and that component is correctly reading from the Exch state.  That means I've got most of the boring wiring done, and that means tomorrow I can really get jamming on this.  

    21 Apr.
    10:45 and just now getting started.  I honestly don't know why this is so hard.  The work ahead SHOULD be very satisfying but I'm struggling to move.

    12:00.
    OK.  Item Info is basically working.  I have a few things to do and not sure in what order to take them.  

    - Finish populating the <tr>
    X - Assign column sizes to the <th>s 
    X - MRV table style.
    - A plan for the input fields.

    Inputs are definitely the hardest.  Normally I try to tackle the hardest stuff first, but in this case my instinct is telling me to crank out the easier stuff.  For the input, the 'hard stuff' looks fairly optional, like the title still being visible.  This looks to me like a pretty clear Rule 1 situation.

    Got the non-computed values reading correctly.  I'm thinking the next thing to do is the MRV table styles.  I definitely need them and I don't think they have any dependencies. OK, let's make it happen.

    Actually, first I'd better check what I did in returns because if I need a specific component to make the size work then maybe those styles live in a Table component?

    -I don't have fixed column sizes, but I'm not sure I need it.  At worst I don't need it right now, so I am going to let that pass.  

    Next, I should make a plan for the input fields.  Let's do some thinking here.  Styles are a given so I'm adding that down below.

        -Styles for the input field states.
            -inactive
            -active
            -focus
            -error
        
    I found a tutorial online and it doesn't look especially hard?  I think I should probably have a component no matter what.  The other thing slowing my roll was wondering whether I should be using default validation, but if there's a reason I'm not seeing it.  

    I THINK I don't need to have the styles live outside the component?  I mean, if I did I could just use the component, right?

    4:15.
    Ok, either it's harder than it looks or I'm dumber than I look and I'm not going to get into this bullshit for a cosmetic feature.  

    Is it still worth it to have an Input component?  Gut instinct is still yes, although I am worried about the permutations.  

    6:05.
    Ran into a bit of a stumper, but the solve is that there is an additional state called focus-visible and it was applying an extra class called 'outline'  Two things to be proud of: first, I (correctly) guessed that it had something to do with a pseudo-class and figured out how to display it, and two, that I identified the source rather than clearing every style or attempting to brute-force it.  

    OK.  I think I'm going to stop here for now.  For tomorrow: first, it seems like most of what this Input is doing for me is holding the input and label in position and applying the classes.  Or, to put it another way, is it more convenient to just accept a child (which will always be an input) and apply the classes and such to the child directly?  Seems kind of hacky, but hand-copying every HTML property I plan to use into the component props and then back into the Input seems sort of goofish, too?  Either way I have definitely earned a swalk today.  

22 Apr
    8:50.
    Goal was 9:00.  We've got a little lead.  We don't want to be the kind of people who squander a lead, right?  

    So afaict, there's no easy way to just set an "invalid" pseudo class.  So I need to have an .invalid class that I will apply or remove by hand.

    OK.  So then I THINK that if I just create styles for Invalid and Disabled I should be good to leave this and get into the coding.  I should also remember that this doesn't have to be perfect.  A rebus is fine for this.  

    It seems to me that there's really only one class, Error.  Disabled has a pseudo class, and I definitely want to use that because it actually disables the button.  So I could also just have an Error property, and that applies the error class or not based on its presence.

    OK.  I think I'm good to go.  

    Actually.  Now wondering if I would like to add the ability to control size or flex from the Component level.  It wouldn't be hard, right?

    OK, got that done.  Might seem silly but I really am glad I did it.  I think there would have been a lot of cases where I had to make a module for the component with input-width as the only class otherwise :/

    OK.  So the displays are done.  Now I need to think about how to handle the logic.  
        
    I was thinking I needed a local state.  However, if I added in a "returning" property into the Session state maybe I could do it there?  

    That said, I think a local state might be better.  Or, to put it another way, I'm pretty sure I'm going to need a local state for the error handling, so I might as well do the quantities there as well.  

    11:15.
    I had a great early start and I'm feeling full of energy but I'm kind of struggling to translate that into forward progress.  I'm going to list out what I need and hope that helps with some momentum.

        -moved to later...


    11:40.
    OK.  I'm trying to identify how to reproduce the problem.  When I navigate to Returns, then back to Exchanges, then hit Add Invoice, I get a big red failure saying: 
    
    Uncaught TypeError: Cannot assign to read only property 'productDetails' of object '#<Object>'

    The error is also not something happening in Returns because it also happens if I tab to Orders (which is just an empty placeholder) and do the same thing.

    Also, if I start at the url mrv/returns , then navigate to Exchanges, then press the button, it all works fine.  So I THINK the error is in fact happening in Exchanges.

    I ALSO notice that if I start at /exchanges, navigate to /returns and then back to /exchanges, and THEN add the order, it also works fine.  

    Now.  Since I know how to avoid this error, perhaps the smart thing to do would be to just forge ahead.  But I don't really like that.  If this is something specific to Immer that can't be solved, I don't want to use Immer.  I'll just go back to my old approach of 'cloneDeep'.  And this could legitimately be a problem, because when I wanted to start over, my intuition was not to hit Cancel Order, it was to go to a different tab to restart the process.  That means it's something a user might do in a test.  

    OK.  I notice I am confused.  

    12:35.  
    OK, so here's where I think I'm running into trouble.  My assumption was that once I'm inside an Immer function, it's a free-for-all and I can mutate as I please.  It turns out that is not the case.  

    Here's my understanding with pictures: https://www.figma.com/file/MkOFBSDjSMm1GJCyW7VNZu/React---Past-Errors?node-id=629%3A31&t=o9HjZLGZgsVQyUaJ-1

    So my hypothesis is that if I cloneDeep the {products} obj from the invoice, I should be fine because I'm no longer re-assigning anything that's read-only.

    OK.  So that works.  I still don't know why my console.log() shows {productDetails} obj present in the {invoiceProducts} before it gets assigned by my for() loop, but I don't think it blocks me so I'll just move ahead.  

    I was going to take a swalk but I think I will skip.  I'm still feeling pretty good, and today is a day of 'Make Good Decisions'.  Instead I will eat something and then get back after it.

    -Can I use produce instead of cloneDeep on the invoice?  (If I can, it's not apparent how)

    2:35.
    Well, here we are after that unfortunate detour, some code cleanup, and some house chores.  I am glad I did it because that was going to be a problem at some point, but I was hoping for big progress today and that's not where we are.

    Also.  I made a mistake that didn't bite me, but it was still a mistake.  When I was writing my description of the mutability problem in the Figma link above, I didn't test my solution (cloneDeep).  I should have done that before I wrote my explanation because if it hadn't worked then my hypothesis was invalid and all that work would have been wasted.  



    -The end result is going to be a map of the items being returned, all of their details, and their quantities.  So I think my Continue step should loop through all the items in the local state, delete any with a quantity of zero, and populate them with their item data.  

    -I guess the other way I could do that is to add a check in the input step that deletes the item if the input is falsy?  

    -More decisions to make.  Do I want my top-level container to be an Object or a Map?

    Map:
    + Maps are naturally iterable, which we will definitely be doing.  They remember insertion order, which is at least a nice thing not to worry about.  We're partially here to learn, and this is a structure we have no experience with.
        -It's not that hard to just do a loop on Object.keys().  We did plenty of that in Returns, where we could probably have made a much better case for using Map.  Insertion order of the keys really doesn't mean much to us.  

        As for the learning, we could probably use the Map for the time-picker.  We will definitely be iterating there, 
        

    I just really can't see a good case for a Map here.  I wish I knew about Immer and Maps with Returns because I bet that would have made a lot of shit easier, but I think this is where we are.

    If I ever do end up working Returns again, I might just flush the whole thing and start again with Maps.  

    OK. So Object it is.  If that is the case, what to do?  I feel like no matter what, I should hang onto the original InvoProducts obj.  So I think what I do is add an extra field, probably when the order/invoice is added, that tracks Exch qty.  I can preserve that - no reason to discard it when I move on - but then I think for the objects being exchanged, I just clone it and clear any zero quantities.  

    5:00.
    OK.  If I have to keep adding every prop by hand to my input field I am gonna lose my fucking mind.  Let's just try this and see how it goes.
    OK.  It worked.  And it was really easy.  I'm glad I tried this.



    6:20.
    -I'm hitting a wall.  I feel like there's got to be an easier way to do what I am trying to do but I feel slow and dull and I think it's time to stop.  I'm not stuck.  I don't expect it will be hard to get back into.  I have a huge amount of freedom for how I tackle this problem.

23 Apr.
    12:20.  I don't really want to get started, but then again I never want to get started.  Instead of waiting another hour for guilt and shame to push me into action, I could just start now :)

    -When I left last time, I was struggling to make the validation function work, and I think part of the reason I was struggling is because I was trying to 'universalize a ~3 line function.  Who gives a fuck.  Ditch the abstraction and write it in a way that's easy to read and understand.  Rule 3.  


    X-I need a local state and a state-setter.

        X - page validity
        X - Error Visibility
        X - requiresMO

    X -I need a function to update the state based on inputs.

    - Before I can do any work on Continue, I need:
        X - A button on this page
        - Helper Text for the button
        X - A ReturnReason page
        X - A route to the Return Reason component.
    
    -On Continue, I need a function that:
        -Checks Validity:

            -If invalid: Displays the Error state. 
            
            -If valid: 
                -Loop through invoiceProducts
                -Adds anything with non-zero value to ExchProducts
                -Increment the Pizza Tracker
                -set Active Panels
                -Navigate to next page

    X-I need to populate each input field with the appropriate functions.

    - I need to set the max{} of each input field to the lesser of invoQty and inStock  qty.  I can figure out the conditional display later, but with the max I can at least prevent any mistakes from being made.

    2:35.
    OK, so thinking about the validity.  AFAICT we aren't using form validity at ANY time other than when the button is clicked.  I don't think we even need to store it in state.  Here's what I have in mind instead.  On click:
        
        -Loop through invoiceProducts
        -Adds anything with non-zero value to ExchProducts obj/map (tbd)
        -If nothing has been added, set the formWarning state.
        -Otherwise, set the Session state and navigate.

    I really don't think we lose anything.  That 'state' doesn't need to persist at all.  And this is actually better because if we navigate back to this page, the exchange Qty will still be represented (because it's stored in the InvoItems{} obj) but the validity would be wrong because the default value is false.  OK. I think we're gonna do it.  

    Now.  Object or map?  Fuck, I am so sick of this question.  OK.  How about this.  Let's TRY it as a Map.  If it's awful, I don't lose the entire app.  I do want to learn, and familiarity would help.  If my very first experience with Map were something as complex as Matchmaker, it would be much harder.

    Even if it sucks or is of little value, it seems worth the exercise.  Even though I'm currently down on useReducer(), I still learned a lot by using it.  For instance, now I know that my pattern should be '1 case per expected user action, updating multiple parts of the state' and not '1 case to update each slice of the state, called in series per expected user action.' I wouldn't have known that without the context.  

    8:05.
    Just came back from a STINKER of a first date, thinking about what to do next.  I think some open, systematizing questions are:
        -Is there a really easy way to handle the Active Panels?  Maybe nested objects in the dictionary?
        -Is there a clean way to handle the cycling I am going to have to do?  
        -Since it is all currently Like for Like, could I skip the Item Selection screen?


24 Apr  
    10:10.
    Well, slow day at work means a good day for coding!  I'm trying the same pattern as yesterday - "If you know what you should be doing, why putter until guilt overwhelms you?"  So here we are!

    OK, so first things.  I don't have that 'Eureka!  I solved it!' feeling with from stashing active panels in the glossary, but I don't have any better ideas so I think I'm just gonna roll with it.  

    I am also wondering about the future state where I can navigate based on nodes.  Each node/page cluster has a bunch of characteristics that are self-related.  Those include:
        -URL
        -Default Active Panels (would these ever change?)
        -Active PT node that might(unlikely) change.
        -(future) A snapshot of the state at the time?

    OK, so honest question - how hard do I want to go on potential re-ordering?  I don't have that feature now.  

    Let's back up.  What even are we looking at here?  I'm planning to have a custom hook that, given a key (probably a string matching the URL segment), will:

        -Navigate to that URL - easy
        -Set the Active Panels - easy
        -Set the active PT node
        -whatever it is I decide to do with state snapshots - hard, but a problem for Future Tom.

    The reason I am wanting this is becase eventually I will add the ability to navigate by pressing the buttons.  OK, actually... this also kind of helps with the 'Back' buttons as well?  OK, so maybe it's not a stupid idea.  

    So I guess what I have to do is figure out how to handle the PT node.  IF for some reason I need to add a node, that's easy.  I would need to add a condition for the new node into the code for the ExchNavigator I'm about to write, so that wouldn't be a problem.  

    I need to remember that the Pizza Tracker doesn't control the sequence - it represents the sequence, and semi-loosely at that.  

    So the ptNodes array in the Session state represent the steps and their order, but they aren't really the SSoT.  Should they be?  No, they can't be because there are going to be URLs in this sequence that don't have a PT node.  Between the manager approval and the Start screen I can think of two already.  

    So how I need to do this is, instead of an active index, I should have an active Key.  Before rendering the pizza tracker, I get the index of the active Key, set that as my active Index, and then run the function as it is.  

    And the reason to do it this way is that IF I'm ever adding/subtracting nodes, I don't know IN ADVANCE what a particular node key's index is going to be.  

    OK. I think I got a plan.  Let's make this happen.  

    12:20.  
    Wheels spinning a bit and not 100% sur why, because I have plenty to do.  I guess I am a little bit afraid of the frustration of de-bugging the issues I'm sure I will find in the ExchNav function.

    12:40.
    OK, my test sample actually went pretty well.  OK, so what do I need to do next?

        X-Set up nav from index to ChooseExchItems.

        X-Build it and verify that it all works from Githb Pages too, because this would be a major bummer if it doesn't.

        X -Assuming success, go through all three pages and replace all(?) instances of navigate() with exchNav.  AFAICT if I have done it right useNav should go ghost green because I am not using it anymore.

        X -Make sure we are using absolute routes and not relative.  Probably     won't be an issue but I want to be sure.

        X -Try using it for backwards nav from 03 to 02

        X -Get the Pizza Tracker working with the new system.

    OK, so let's think about going back.  What are my reservations about just using ".."?  State should be fine.  Anything we care about should be either be directly stored in Session state or re-derived from date that is.  So the Session State shouldn't be a problem.  

    Nothing I care about should be stored in Local state, and it should all be derivable.  
    
    Any factor we change in one state shouldn't be editable in the next state, so we * shouldn't * have to worry about conflicts?  But they might not be editing in the next state...

        -Could potentially be a problem?  Like if the user selects one replacement item, chooses a time, then goes back and chooses a different replacement item for which that time is not available, what happens to the time they chose?  AFACIT it's still stored in the state?  I guess for my purposes this is a minor problem and probably a Rule 1 violation.  

    The other thing I have to worry about is the 30 panels. The reason I chose to store ActivePanel in the Session state rather than locally was so that I could programmatically specify WHAT 30 panels to show in URL-B from URL-A.  For the time being it's not a huge concern, since this is all pretty linear.  

    So then the issue I might run into is: what if the panel depends on local information?  Like, most of the time, the Active panels are going to be determined locally, and they are going to be determined by logic that isn't available at the global level.  

    Here's the compromise I think I'm going to roll with.  I will hold onto the ActivePanel object in the state for now.  If I do run into a case where I need to supersede the page logic to determine what's on screen I can use it and read from it, but otherwise I'm going to do my paneling locally.  

    I think I'm going with local.  Even in Returns there was MAYBE one case where I needed to specify panels cross-url.  

    OK, so where does that leave me with useExchNav and Back?  How about this for a compromise?  I add in a "-1" property that just navigates back up one?  Buuuuuut, then the Pizza tracker is off, right?  

    4:35.  
    I think I am finally ready to start on Choose Exch. Reason.  I will need:
        X-Add an empty exchReason to each item.
        X-I need to map the TRs from the itemMap.
        X-Needs to show quantity.
    Then I can get after the 30 panel.

    6:55.
    Normally I would knock off around now but I'm not having a bad time so I'm just going to keep going until that changes.

    7:20.
    Ok.  I'm now realizing that for the input fields I will probably need to create a stand-alone MRV component and that will be some work, so I think I'm done for the night.  Really good session today.

25 Apr
    11:30.
    Going to a store so I am raw-dogging it today.  I do have something interesting to work on so I hope that will keep me semi-on-track.

    4:40.  
    SBB, SBP.  If I can rawdog a solid 90, that's pretty good considering.  OK.  My first question is why changing the active TR doesn't change what is selected in the 30 panel, and I am wondering if it's because I'm tracking the 30 panel in a state and not a variable?  

    6:30.  Ok.  Through a haze of incomprehension I did succeed in gettin the 30 panel to set the radio buttons purely through the parent's state.  I'm really not in a good position to determine what's happening or why it's working so I'm gonna have to put that off for another time.

26 Apr
    9:55.
    Day CURRENTLY looks clear.  Let's see if we can't thrash ahead here.  The first thing I want to do is:
    
    X-Go through the code, clean it up, and make sure I've got a clear understanding of how it works.  

    -Delete an item.  
        -Don't allow the last item to get deleted.

    -Continue Button.
        X -Apply selected reason to the item.
        X -Error Handling.
        X -Run the function to get the next item.

    -Styling the buttons
        -Text, text size.
        -Button size?
        -Trash Can icon for buttons
        -Get rid of the blue background.
        -Figure out a plan for how to get the divider in.
    
    11:50.
    OK, got a snag here.  Something isn't working right in my nextActive() function.  I had/have kicked around the idea of setting it as a variable, but I fear I might run into snags because variables are not preserved between renders and I think I have a lot of ways that generate renders.  

    1:50.
    Well, I think I actually fixed it.  The key was learning about the current(draft) method(?) in Immer.  I don't actually know why, but for some reason, even though my update to the local state came second, it was reading from the old value of the Session state.  There is SO much I don't know about JS and React, but my guess is that for some reason the Session update Immer hook was resolving AFTER the local update, and that's why it was always behind?  Idk.  I got a solve, and I have a meeting in about 5 minutes that might require me to do my real job the rest of the day so we will see what goes down.  

    4:00.
    OK, things are going pretty well here.  Now I need to figure out how to handle item deletion.  

    I think I need to start with a custom hook.  Whatever route I choose to handle item deletion is going to follow the same path.  

    OK.  So now what do I want to do?  My first question was how to make it behave, but before that I guess I need to answer another question, and that's the local state setting.

    In a worst-case scenario, I think I can set my deletion function to accept a callback that I can run to set the local state, but now I got a crazy idea.  You can nest Immers.  What if I nest a global-state-set inside a local-state-set?  Would that work?  

    6:20.
    After some puttery I at least got the deletion working.  The local state / global state still kind of sucks.

27 Apr.

    3:40.

    Options as I see it:

    * Have the Delete function accept a callback, and run the callback on the current() output?
        -This seems a little fucky?  Maybe just aesthetic, but kind of not-flexible?  

    * cloneDeep, manually set the state, and use that to set both drafts.
        -If we are doing this then we really have no business using Immer.

    * See if I can use an anonymous function to force the session update to happen before the local update?  
        -Don't know if it will work, but cleanest solution?

    * Move more functionality into the Session state.  
        -Could work?  Maybe a shared custom hook that accepts a condition and returns the first Item that meets the condition?  But how to set the first state of the upcoming component?  

    OK, of these options, only the anonymous function doesn't appear to require a giant re-write.  I am going to try that and then re-evaluate.

    5:20.
    The anonymous function didn't work.  It was the same result as trying to run the parent setter inside the local setter - can't update the parent while the child is updating, something like that.

    So here's where I am struggling.  I need the value produced by the parent state to correctly calculate the local state.  I feel like I should not be struggling with this so much.  And the fact that I am struggling so much makes me afraid that I am missing something important.  

    I guess the first thing to note is that I actually do have an in-system solve.  current() doesn't seem to work at getting a value outside the closure of a produce() function, but for anything within the closure, it works just fine, even another produce() function.  I'm doing damn near exactly the thing I want to do when I Apply the dispo in the 30 panel.  The only reason I'm stalling here is that:
        -I'm thinking about adding a check for an empty cart, the value of which is dubious.
        -If I DO decide I need this, I could make useRemoveItem accept a callback that it calls on its own current() value.  
        -If I don't want to fiddle with the callback I could just make a function that only validates, and then do the state-setting within the closure.

    -OK.  First let's test this bitch and make sure I'm not just looking dumb here.  

    -Looks like I'm looking dumb here.  Exact same problem as before.  Cannot update a component (`ExchReason`) while rendering a different component (`Exchanges`).  I think I'm gonna call it a day and think about what to do next.  

28 Mar
    10:10.  Well, well, here we are again.  

    OK, this looks useful.  https://react.dev/reference/react/useLayoutEffect .  Apparently I can automatically set local state on render?  Did I know that?  

    When a prop changes.
    https://react.dev/learn/you-might-not-need-an-effect#adjusting-some-state-when-a-prop-changes


    Chains of Computation: 
    https://react.dev/learn/you-might-not-need-an-effect#chains-of-computations


    OK, so what have we learned?  First, I don't think Immer is the problem.  A change in state (or multiple changes in state) triggers a re-render, but those renders happen concurrently, and they all depend on the current state of the application.  

    AFAICT this isn't new, either.  What I was doing in the past was to make a deepClone of the target state, update the clone, then pass whatever parts of it I needed into my various update functions.  

    How do I want to handle this?  And YTF am I having such a hard time focusing?  

    * use CloneDeep to make a draft of anything that's involved in multiple mutations and mutate from that draft, but keep managing state in Immer.  Remember, Immer is NOT the problem.
        -I don't see anything wrong with this, and I think that's the problem.  AFAICT this shouldn't be necessary with Immer.  

    * Store ActiveItem in ExchSession.  WHAT is active will depend on the page and the calculation determine what to set as Active can be done locally, but the actual Active Index setting and storage live in the Session.
        -Mostly good, but what to do on Page Load?  If that calculation is done locally but stored globally, I can't know what it should be before setting the parent.  
            
        Gun to my head solve:
            * Write any child-specifc functions that calculate (not set) global state locally.  
            * Export it along with the parent.  If multiple, bundle them all into one.
            * Include it in the respective Nav object for useExchNav.  That's already setting the global state, so I should be able to get the current(draft) there.
        -This seems like a long fucking way to go.

    * Just the opposite.  Calculate local state automatically on render.  By the time the child component renders, the parent state will have already updated so the value isn't stale.  This is very clean and intuitive.  Everything lives where I would expect it to live and happens where I would expect it to happen.  
        -My feeling is that I lose some control here.  The thought of having to pre-determine with logic how to set the local state seems kind of hairy?

        -Like, if I click to set the the active item in the local state, doesn't that trigger a re-render, which would then...flush the local state I just set?  

        -Also, a small fear in the back of my mind that this solves my specific problem but there may be a more general problem that it doesn't?  I guess that if I REALLY get stuck I can always fall back on the CloneDeep pattern.  

        -I'm sure I could figure out a way  to handle it with conditionals stored in the local state, like a boolean that tells it not to re-calcuate.  

        -I do have this weird sense that if I go this route that in the rebus phase I might discover a more clear pattern in the logic.  

        At the moment, this feels like a winner.  

    3:20.
    OK, here's another wild idea.  What if I just have an activeKey property?  The autoActiveKey function only checks for an active key, and if all are assigned it returns a string, like "Zilch".  
        -First, I would still need conditional logic that clears the active key if that key matches the item being deleted.
        -Not sure that generalizes?
        -But I guess it does save some logic in a few places.  Shit, let's try it.  
    
    4:05.
    Well, it all seems to be working fine now.  My main takeaways I learned from this:

    -Immer and the stock state-setters both batch state updates concurrently.  That means I can't have one state update depend on the forthcoming value of another.
    -AFAICT the current() method within Immer does work, but I haven't found a way to get that value outside of its closure and I tried a lot of approaches.
    -AFAICT it's OK to re-assign local state during the render, but not any other state.  I don't think I knew that.  
    -If I do that, I must have logic in place to prevent infinite loops, because each state update triggers a rerender of the component.  
    -If I need the value of one to depend on the value of the other, I have two options:
        1. Auto-calculate the local state.  Setting parent state triggers a re-render, at which point the local state will be evaluated and set based on the new value of the parent state.
        2. Calculate the forthcoming values outside of the state setters, then set the states to those values.
    
    OK, so what's left?  
        X - Fix the CSS for the inputs.
        X - Move everything into a form so I can use Enter to submit.
        X - I need a Continue button based on the ActiveKey Status.
        X - I need a route and an empty screen to navigate to.
        X - I need to update the useExchNav object to handle it.
        X - Fix trash button
        X - Should probably figure out a plan to control column width.  Not fun but probs. necessary.
        X - Correct the header for WhichForWhat
        X - Assign correct back button on WhichForWhat
        X - Improve the CSS of the ItemDetails shared component.

    7:05.
    OK.  I'm at a pretty good stopping point.  I made a lot of progress today.  Two BIG takeways in my goodie bag today - a clearer understanding of why co-dependent state updates don't work, and learning that I can set local state on render.  I've got a lot of little ticky-tack shit to handle tomorrow, but that will be a good booster to launch me into the work.  

    WhichForWhat should be mostly cosmetic.  It's going to be the Time Picker that really requires some work on my part.  But nothing looks too terribly daunting about the logic, right?  

29 Apr.
    9:50.
    Not the best start but honestly don't see a lot of time I could have squeezed out of this.  

    12:35.
    OK, things have been VERY smooth today.  I want to try and set the table to handle overflow, but this is a non-crucial feature and I am aware that it could easily turn into a 4-hour rabbit hole.  So if a solution doesn't look immenent by 1:10, I'm moving on.

    1:30.
    OK, I did grocery intake and now the time has passed, but I think I still need to figure out my table scroll problem, and the reason is because the next thing I have to do is the time picker.  That DEPENDS on scrolling, so I need to solve this problem now.  And it's working in Returns, so this is a solvable problem. So my plan to solve this is:

    -Make a table that makes a shitload of rows.
    -Put that table into the very top of Exchanges.
    -Get a solve
    -Add in layers of the app until I have solved it all the way down.

    Testing R1.
    -I tried adding a fixed height to the table.  That did nothing.
    -I tried setting the table height to 100%.  That also did nothing.  
    -Having the overflow of the table as :hidden or as :scroll made no difference.

    When I put the table in a container:
    -Setting the height of the table to 100% just made the container the same size as the table.
    -Setting a fixed height of 10rem did not constrain the table, but when I specified the overflow of the container, it did control the table.  
    -Setting overflow-y gave me just what I was looking for.

    OK, so here's my hypothesis.  The top-level container is App.  That is a flex-box.  Flex elements shrink, grow, and resize in response to other flex elements.  

    2:55.
    I got the result.  Now I just have to figure out how I got it, and why it's not working in other places.

    -OK, one issue solved.  I was wondering why when I set my width to 100% I was getting overflows.  Turns out I did not have   box-sizing: border-box;  and so my borders weren't being included in my 100% width calculations.

    -As I suspected, the multi-level containers were also not necessary.  It's flex-boxes all the way down so I don't know why one more would make a difference.

    -OK.  So we've got it working, at least at the top level.  Now is the time to drill in.

    3:45.  Well, damn, that was an anticlimax.  IIRC there were two issues: one was we had a non-flex container in our chain, and the other was that we needed another container for the table.  It can't scroll directly.  But honestly I will take this result and run.  I really had no idea how the grid and flex containers were going to work and this is a huge relief.  Cleanup and then on to next steps.  

    4:30.  
    Looks like I am having some kind of runaway loop related to navigation.  Let's dig in and see what we can find.  

    you should call navigate() in a React.useEffect(), not when your component is first rendered.     at WhichForWhat (http://localhost:3000/mrv/static/js/bundle.js:2776:81)  

    I'm now wondering if it's WhichForWhat that is the problem?  Because ExchReason was fine until very recently.  I'm gonna try clearing out anthing related to navigation first.

    OK, looks like that was the reason.  Fine vs. meltdown:

    onClick={() => exchNav({ routeStr: "schedule" })}
    onClick={exchNav({ routeStr: "schedule" })}

    Yes, password guessing a little, but because the first wasn't wrapped in anything, on render it was calling the function, not returning assigned to an event.  So I think the general rule of thumb is 'Any function with () in its definition has to be wrapped or React is going to try to run it on the spot.'

    OK!  So we're good?  Almost made the same mistake on the next page.  Ok.  Now we are good.  It's 5:00.  I would really like to share some part of this with Dave later.  I will need:

    - a 30 panel that never goes away.  Component or not?  I'm thinking not?  
    - A mini-card to represent the exchange (now realizing that different items and different times might be a bitch)
    - A local state.
    - A function that sets the local state.
    - An automatic loop similar to Exchreason to auto-assign the active item.  I could probably clone but I should do this by hand to sink the knoweledge in.  
    -I'll need an exchange time property in the Session state.  Probably set it with the exchange items upon creation.  

    I think my plan is to just try and get everything besides the times first.  I've got ~1 hour-ish before I generally peter out.  

    I'm also wondering about how to organize my data so as not to paint myself into a corner for later, and while it is unsatisfying, I think the smart thing is just to solve the problem in front of me.  I don't even know the situation I am solving for, and without a clear conceptual model I am just guessing.  Let's be smart and take the Floor 2 Wild Strike.  

1 May, 2023
    12:50.  Next up is the time picker.  Here's how I think I want to handle it.  I'm going to get the cycling working first, and then I will get work on the times.  For that to happen, I will start with just a single time button.  
        X - CSS cleanup to get into the groove.
        X - Add a local state.
        X - Add a function that checks for the first un-assigned time and automatically sets the local state, similar to Disposition.  
        -Handle manual selection.
        -A funtion to create the buttons.
        -A function to handle the time apply.
        -Deletion.

    So, I was going to make the time buttons last, but I think I actually need to figure out how I am going to handle and populate the times because a lot of pieces here depend on those times and it will be a lot of rework if I have to retrofit.  

    5:20.
    Making progress, but definitely paying the price for not having lunch, which is completely predicable and I am a dumbass.  

    6:30.
    Losing steam and I'm gonna have to start making decisions about the button so I am gonna call it a day.  

2 May

    9:10.  
    Got about 45 minutes before next standup so I am gonna try and sneak a bit of JS in there.  

    OK.  I was thinking before that I could just make a key as a combination of the date and time.  That would at least be a unique identifier for each button, which I will need both as a key and to handle highlighting.  I think I want to store those values in an object, because I think I need them separate for Total Review.  

    I guess I could just parse the JSON, but dude, why?  It's one more property, just shove it in there.  

    12:25.
    OK, got the buttons populated.  Now for the selection.  First, I think I can use a console.log() to verify selection.

    1:10.
    Selection is now working.  I don't think I want to use the default "focus" state because it appears on all of my buttons.  So I should see if I can do it as a conditional instead.

    2:50.
    Having an issue where React is claiming I have an object as a React child.  It is happening after "Apply" but before the page renders.  Trying to find where this is happening.  

    Stepping through the debugger, it looks like(?) I was able to successfully update the state, so I think somewhere between there and the render, something's getting an object it doesn't like.  

    I'm wondering if it's got something to do with the times?  

    I'm stumped.  I don't feel smart.  I feel like taking a walk and then playing Advance Wars.  

    https://www.g2i.co/blog/understanding-the-objects-are-not-valid-as-a-react-child-error-in-react

4:45.
    OK.  I'm going to try and solve this problem for at least 90 minutes.  

    So what do I know?  
    -The page renders successfully the first time, so that part, at least, is fine.  
    -I get the error when I click the Apply button, which is consistent with the first observation.  
    -In my previous debug, I found that the global state (and I think the local state, although I took it out for debugging) did successfully update before the crash.  
    -The object listed in the error contains all the property keys of the 
    
    const btnDataObj = {
        keyStr: `${date}${month}${timeIndex}`,
        timeSlot: timeIndex,
        date: date,
        month: month,
        fart: "Fartrell",
      };

    Here's my current thought.  I DO NOT think that 'blow it all up, start from 0, and hope you eliminate the error by accident' is a good approach to programming.  However, I am having trouble following my own code, which suggests that the code is probably not arranged well.  

    So I think the right move would be to straighten up the code so that it is easier for me to follow.  If the problem gets solved along the way, so be it.  




